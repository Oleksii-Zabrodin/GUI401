
GUI401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f40  08005554  08005554  00006554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007494  08007494  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007494  08007494  00008494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800749c  0800749c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800749c  0800749c  0000849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080074ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000005c  08007508  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08007508  00009558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005287b  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b83  00000000  00000000  0005b907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003ac0  00000000  00000000  00060490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002c0c  00000000  00000000  00063f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019829  00000000  00000000  00066b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d8a  00000000  00000000  00080385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6289  00000000  00000000  000a110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010260  00000000  00000000  001473dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0015763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800553c 	.word	0x0800553c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	0800553c 	.word	0x0800553c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>:

#include "MainViewController.h"
#include "ui_controls.h"
#include "UserEvent.h"

 void MainViewController::handleEvent(EventSender* eventSender, UserEvent userEvent) {
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4639      	mov	r1, r7
 800050c:	e881 000c 	stmia.w	r1, {r2, r3}
	 if (userEvent.state == UserEventState::Long) {
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d112      	bne.n	800053c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3c>
		 if (userEvent.type == UserEventType::Left) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d106      	bne.n	800052a <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x2a>
			 soundEnabled = false;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	735a      	strb	r2, [r3, #13]
			 isUpdated = false;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2200      	movs	r2, #0
 8000526:	731a      	strb	r2, [r3, #12]
	 	 else if (userEvent.type == UserEventType::Right) {
	 		 soundEnabled = true;
	 	 	 isUpdated = false;
	 	 }
	 }
 }
 8000528:	e008      	b.n	800053c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3c>
	 	 else if (userEvent.type == UserEventType::Right) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d105      	bne.n	800053c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3c>
	 		 soundEnabled = true;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2201      	movs	r2, #1
 8000534:	735a      	strb	r2, [r3, #13]
	 	 	 isUpdated = false;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2200      	movs	r2, #0
 800053a:	731a      	strb	r2, [r3, #12]
 }
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_ZThn4_N18MainViewController11handleEventEP11EventSender9UserEvent>:
	void update();
private:
	u8g2_t& u8g2;
	bool isUpdated = false;

	void handleEvent(EventSender* eventSender, UserEvent event);
 8000548:	f1a0 0004 	sub.w	r0, r0, #4
 800054c:	f7ff bfd8 	b.w	8000500 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>

08000550 <_ZN18MainViewController6updateEv>:

 void MainViewController::update() {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
	 if (isUpdated) { return; };
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b1b      	ldrb	r3, [r3, #12]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d117      	bne.n	8000590 <_ZN18MainViewController6updateEv+0x40>
	 isUpdated = true;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	731a      	strb	r2, [r3, #12]

	 u8g2_ClearBuffer(&u8g2);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4618      	mov	r0, r3
 800056c:	f001 f826 	bl	80015bc <u8g2_ClearBuffer>
	 drawMainScreen(&u8g2, 50, soundEnabled, true, false);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6898      	ldr	r0, [r3, #8]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7b5a      	ldrb	r2, [r3, #13]
 8000578:	2300      	movs	r3, #0
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2301      	movs	r3, #1
 800057e:	2132      	movs	r1, #50	@ 0x32
 8000580:	f002 ff14 	bl	80033ac <drawMainScreen>
	 u8g2_SendBuffer(&u8g2);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f88a 	bl	80016a2 <u8g2_SendBuffer>
 800058e:	e000      	b.n	8000592 <_ZN18MainViewController6updateEv+0x42>
	 if (isUpdated) { return; };
 8000590:	bf00      	nop
 }
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_ZN18MainViewControllerD1Ev>:
class MainViewController: public ViewController, public EventReciever {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <_ZN18MainViewControllerD1Ev+0x30>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <_ZN18MainViewControllerD1Ev+0x34>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3304      	adds	r3, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fee5 	bl	8005380 <_ZN13EventRecieverD1Ev>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f831 	bl	8000620 <_ZN14ViewControllerD1Ev>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08005930 	.word	0x08005930
 80005cc:	08005944 	.word	0x08005944

080005d0 <_ZThn4_N18MainViewControllerD1Ev>:
 80005d0:	f1a0 0004 	sub.w	r0, r0, #4
 80005d4:	e7e0      	b.n	8000598 <_ZN18MainViewControllerD1Ev>
 80005d6:	bf00      	nop

080005d8 <_ZN18MainViewControllerD0Ev>:
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ffd9 	bl	8000598 <_ZN18MainViewControllerD1Ev>
 80005e6:	2110      	movs	r1, #16
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f004 ff09 	bl	8005400 <_ZdlPvj>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZThn4_N18MainViewControllerD0Ev>:
 80005f8:	f1a0 0004 	sub.w	r0, r0, #4
 80005fc:	e7ec      	b.n	80005d8 <_ZN18MainViewControllerD0Ev>
	...

08000600 <_ZN14ViewControllerC1Ev>:
 *      Author: lex
 */

#include "ViewController.h"

ViewController::ViewController() {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <_ZN14ViewControllerC1Ev+0x1c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	08005958 	.word	0x08005958

08000620 <_ZN14ViewControllerD1Ev>:

ViewController::~ViewController() {
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <_ZN14ViewControllerD1Ev+0x1c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	08005958 	.word	0x08005958

08000640 <_ZN14ViewControllerD0Ev>:
ViewController::~ViewController() {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
}
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffe9 	bl	8000620 <_ZN14ViewControllerD1Ev>
 800064e:	2104      	movs	r1, #4
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f004 fed5 	bl	8005400 <_ZdlPvj>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b44      	ldr	r3, [pc, #272]	@ (800078c <MX_GPIO_Init+0x12c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a43      	ldr	r2, [pc, #268]	@ (800078c <MX_GPIO_Init+0x12c>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b41      	ldr	r3, [pc, #260]	@ (800078c <MX_GPIO_Init+0x12c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b3d      	ldr	r3, [pc, #244]	@ (800078c <MX_GPIO_Init+0x12c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a3c      	ldr	r2, [pc, #240]	@ (800078c <MX_GPIO_Init+0x12c>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a35      	ldr	r2, [pc, #212]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a2e      	ldr	r2, [pc, #184]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_GPIO_Init+0x12c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	4829      	ldr	r0, [pc, #164]	@ (8000790 <MX_GPIO_Init+0x130>)
 80006ec:	f003 fa0c 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4823      	ldr	r0, [pc, #140]	@ (8000794 <MX_GPIO_Init+0x134>)
 8000708:	f003 f862 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BUTTON_PIN_Pin DOWN_BUTTON_PIN_Pin UP_BUTTON_PIN_Pin LEFT_BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN_Pin|DOWN_BUTTON_PIN_Pin|UP_BUTTON_PIN_Pin|LEFT_BUTTON_PIN_Pin;
 800070c:	230f      	movs	r3, #15
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000710:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	2301      	movs	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481c      	ldr	r0, [pc, #112]	@ (8000794 <MX_GPIO_Init+0x134>)
 8000722:	f003 f855 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000726:	2320      	movs	r3, #32
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4814      	ldr	r0, [pc, #80]	@ (8000790 <MX_GPIO_Init+0x130>)
 800073e:	f003 f847 	bl	80037d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2006      	movs	r0, #6
 8000748:	f003 f80b 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800074c:	2006      	movs	r0, #6
 800074e:	f003 f824 	bl	800379a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2007      	movs	r0, #7
 8000758:	f003 f803 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800075c:	2007      	movs	r0, #7
 800075e:	f003 f81c 	bl	800379a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2008      	movs	r0, #8
 8000768:	f002 fffb 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800076c:	2008      	movs	r0, #8
 800076e:	f003 f814 	bl	800379a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2009      	movs	r0, #9
 8000778:	f002 fff3 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800077c:	2009      	movs	r0, #9
 800077e:	f003 f80c 	bl	800379a <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020800 	.word	0x40020800

08000798 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2C3_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_I2C3_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_I2C3_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_I2C3_Init+0x50>)
 80007d6:	f003 f9c9 	bl	8003b6c <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 f962 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000078 	.word	0x20000078
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	00061a80 	.word	0x00061a80

080007f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <HAL_I2C_MspInit+0xc0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d14a      	bne.n	80008ac <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800084e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	2312      	movs	r3, #18
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000860:	2304      	movs	r3, #4
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4814      	ldr	r0, [pc, #80]	@ (80008bc <HAL_I2C_MspInit+0xc8>)
 800086c:	f002 ffb0 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000870:	2310      	movs	r3, #16
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000880:	2309      	movs	r3, #9
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <HAL_I2C_MspInit+0xcc>)
 800088c:	f002 ffa0 	bl	80037d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 800089a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_I2C_MspInit+0xc4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005c00 	.word	0x40005c00
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020400 	.word	0x40020400

080008c4 <_ZN18MainViewControllerC1ER11u8g2_struct>:
#include "u8g2.h"
#include <EventReciever.h>

class MainViewController: public ViewController, public EventReciever {
public:
	MainViewController(u8g2_t& u8g2): u8g2(u8g2) {};
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe95 	bl	8000600 <_ZN14ViewControllerC1Ev>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3304      	adds	r3, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fd40 	bl	8005360 <_ZN13EventRecieverC1Ev>
 80008e0:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <_ZN18MainViewControllerC1ER11u8g2_struct+0x40>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <_ZN18MainViewControllerC1ER11u8g2_struct+0x44>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	731a      	strb	r2, [r3, #12]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	08005930 	.word	0x08005930
 8000908:	08005944 	.word	0x08005944

0800090c <_Z9u8g2_Initv>:
    1,
    2,
	3
};

void u8g2_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay_stm32);
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <_Z9u8g2_Initv+0x38>)
 8000912:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <_Z9u8g2_Initv+0x3c>)
 8000914:	490d      	ldr	r1, [pc, #52]	@ (800094c <_Z9u8g2_Initv+0x40>)
 8000916:	480e      	ldr	r0, [pc, #56]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 8000918:	f000 fee2 	bl	80016e0 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
    u8g2_InitDisplay(&u8g2);
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 800091e:	f002 fb91 	bl	8003044 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	480a      	ldr	r0, [pc, #40]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 8000926:	f002 fb9c 	bl	8003062 <u8x8_SetPowerSave>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 800092a:	490a      	ldr	r1, [pc, #40]	@ (8000954 <_Z9u8g2_Initv+0x48>)
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 800092e:	f001 fc87 	bl	8002240 <u8g2_SetFont>

    u8g2_ClearBuffer(&u8g2);
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 8000934:	f000 fe42 	bl	80015bc <u8g2_ClearBuffer>
    u8g2_SendBuffer(&u8g2);
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <_Z9u8g2_Initv+0x44>)
 800093a:	f000 feb2 	bl	80016a2 <u8g2_SendBuffer>
//    u8g2_SendBuffer(&u8g2);

//    ssd1306_SetCursor(5, 5);
//    ssd1306_WriteString("qwerty", Font_16x26, White);
//    ssd1306_UpdateScreen();
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08003245 	.word	0x08003245
 8000948:	08003181 	.word	0x08003181
 800094c:	080073f4 	.word	0x080073f4
 8000950:	200000cc 	.word	0x200000cc
 8000954:	080059bc 	.word	0x080059bc

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f002 fd8f 	bl	8003480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f81b 	bl	800099c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f7ff fe7b 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f947 	bl	8000bfc <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800096e:	f7ff ff13 	bl	8000798 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  u8g2_Init();
 8000972:	f7ff ffcb 	bl	800090c <_Z9u8g2_Initv>
//  u8g2_SendBuffer(&u8g2);

//  ssd1306_Line(10, 5, 108, 5, White);
//  ssd1306_UpdateScreen();

  MainViewController mainViewController = MainViewController(u8g2);
 8000976:	463b      	mov	r3, r7
 8000978:	4906      	ldr	r1, [pc, #24]	@ (8000994 <main+0x3c>)
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffa2 	bl	80008c4 <_ZN18MainViewControllerC1ER11u8g2_struct>
  userActionPanel.eventReciever = &mainViewController;
 8000980:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <main+0x40>)
 8000982:	463b      	mov	r3, r7
 8000984:	3304      	adds	r3, #4
 8000986:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainViewController.update();
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fde0 	bl	8000550 <_ZN18MainViewController6updateEv>
 8000990:	e7fa      	b.n	8000988 <main+0x30>
 8000992:	bf00      	nop
 8000994:	200000cc 	.word	0x200000cc
 8000998:	20000160 	.word	0x20000160

0800099c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	2230      	movs	r2, #48	@ 0x30
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fd40 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <_Z18SystemClock_Configv+0xe4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <_Z18SystemClock_Configv+0xe4>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <_Z18SystemClock_Configv+0xe4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <_Z18SystemClock_Configv+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e8:	4a26      	ldr	r2, [pc, #152]	@ (8000a84 <_Z18SystemClock_Configv+0xe8>)
 80009ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <_Z18SystemClock_Configv+0xe8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2310      	movs	r3, #16
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a10:	2310      	movs	r3, #16
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fd3e 	bl	80044a8 <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000a3c:	f000 f834 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 ff9b 	bl	8004998 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000a72:	f000 f819 	bl	8000aa8 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	@ 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	userActionPanel.handleInterrupt(GPIO_Pin);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a98:	f000 f9fc 	bl	8000e94 <_ZN15UserActionPanel15handleInterruptEt>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000160 	.word	0x20000160

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000aba:	f000 f975 	bl	8000da8 <_ZN15UserActionPanelC1Ev>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000160 	.word	0x20000160

08000ac8 <_Z41__static_initialization_and_destruction_1v>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8000ace:	f000 f9b9 	bl	8000e44 <_ZN15UserActionPanelD1Ev>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000160 	.word	0x20000160

08000adc <_GLOBAL__sub_I_u8g2>:
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	f7ff ffe8 	bl	8000ab4 <_Z41__static_initialization_and_destruction_0v>
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_GLOBAL__sub_D_u8g2>:
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	f7ff ffed 	bl	8000ac8 <_Z41__static_initialization_and_destruction_1v>
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f002 fcc5 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_BUTTON_PIN_Pin);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f002 ffca 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_PIN_Pin);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f002 ffc3 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_PIN_Pin);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f002 ffbc 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_BUTTON_PIN_Pin);
 8000bcc:	2008      	movs	r0, #8
 8000bce:	f002 ffb5 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f004 f8d0 	bl	8004dd8 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff ff33 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001ac 	.word	0x200001ac
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000caa:	230c      	movs	r3, #12
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_UART_MspInit+0x8c>)
 8000cc6:	f002 fd83 	bl	80037d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce4:	f7ff ff78 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f004 fb97 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fe21 	bl	8000958 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d24:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 8000d28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d2c:	20000558 	.word	0x20000558

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>

08000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>:
enum class UserEventState { Down, Up, Long };
enum class UserEventType { Down, Up, Left, Right, Enter };

class UserEvent: public Event {
public:
	UserEvent(UserEventState state, UserEventType type): state(state), type(type) { };
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_ZN10UserButtonC1EtP12GPIO_TypeDef>:
	virtual void onButtonLong(UserButton* sender) = 0;
};

class UserButton {
public:
	UserButton(uint16_t pin, GPIO_TypeDef* port): pin(pin), port(port) {}
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	460b      	mov	r3, r1
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	817b      	strh	r3, [r7, #10]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	897a      	ldrh	r2, [r7, #10]
 8000d6a:	801a      	strh	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_ZN18UserButtonDelegateC1Ev>:
class UserButtonDelegate {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <_ZN18UserButtonDelegateC1Ev+0x1c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	080059b0 	.word	0x080059b0

08000da8 <_ZN15UserActionPanelC1Ev>:

#include "UserActionPanel.h"
#include "UserEvent.h"


UserActionPanel::UserActionPanel() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 faf4 	bl	80053a0 <_ZN11EventSenderC1Ev>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3308      	adds	r3, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ffe3 	bl	8000d88 <_ZN18UserButtonDelegateC1Ev>
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e38 <_ZN15UserActionPanelC1Ev+0x90>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <_ZN15UserActionPanelC1Ev+0x94>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <_ZN15UserActionPanelC1Ev+0x98>)
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffbe 	bl	8000d58 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	331c      	adds	r3, #28
 8000de0:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <_ZN15UserActionPanelC1Ev+0x98>)
 8000de2:	2102      	movs	r1, #2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffb7 	bl	8000d58 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	332c      	adds	r3, #44	@ 0x2c
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <_ZN15UserActionPanelC1Ev+0x98>)
 8000df0:	2108      	movs	r1, #8
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ffb0 	bl	8000d58 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	333c      	adds	r3, #60	@ 0x3c
 8000dfc:	4a10      	ldr	r2, [pc, #64]	@ (8000e40 <_ZN15UserActionPanelC1Ev+0x98>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffa9 	bl	8000d58 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
	upButton.delegate = this;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f103 0208 	add.w	r2, r3, #8
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
	downButton.delegate = this;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f103 0208 	add.w	r2, r3, #8
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	621a      	str	r2, [r3, #32]
	leftButton.delegate = this;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f103 0208 	add.w	r2, r3, #8
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	631a      	str	r2, [r3, #48]	@ 0x30
	rightButton.delegate = this;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f103 0208 	add.w	r2, r3, #8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08005980 	.word	0x08005980
 8000e3c:	0800599c 	.word	0x0800599c
 8000e40:	40020800 	.word	0x40020800

08000e44 <_ZN15UserActionPanelD1Ev>:

UserActionPanel::~UserActionPanel() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <_ZN15UserActionPanelD1Ev+0x28>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <_ZN15UserActionPanelD1Ev+0x2c>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated destructor stub
}
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fab0 	bl	80053c0 <_ZN11EventSenderD1Ev>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005980 	.word	0x08005980
 8000e70:	0800599c 	.word	0x0800599c

08000e74 <_ZN15UserActionPanelD0Ev>:
UserActionPanel::~UserActionPanel() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
}
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe1 	bl	8000e44 <_ZN15UserActionPanelD1Ev>
 8000e82:	214c      	movs	r1, #76	@ 0x4c
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f004 fabb 	bl	8005400 <_ZdlPvj>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN15UserActionPanel15handleInterruptEt>:

void UserActionPanel::handleInterrupt(uint16_t pin) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
	switch (pin) {
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d82b      	bhi.n	8000f00 <_ZN15UserActionPanel15handleInterruptEt+0x6c>
 8000ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <_ZN15UserActionPanel15handleInterruptEt+0x1c>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ef5 	.word	0x08000ef5
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000f01 	.word	0x08000f01
 8000ebc:	08000ed1 	.word	0x08000ed1
 8000ec0:	08000f01 	.word	0x08000f01
 8000ec4:	08000f01 	.word	0x08000f01
 8000ec8:	08000f01 	.word	0x08000f01
 8000ecc:	08000ee9 	.word	0x08000ee9
		case UP_BUTTON_PIN_Pin: upButton.handleInterrupt(); break;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	330c      	adds	r3, #12
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f9b1 	bl	800123c <_ZN10UserButton15handleInterruptEv>
 8000eda:	e012      	b.n	8000f02 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case DOWN_BUTTON_PIN_Pin: downButton.handleInterrupt(); break;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	331c      	adds	r3, #28
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f9ab 	bl	800123c <_ZN10UserButton15handleInterruptEv>
 8000ee6:	e00c      	b.n	8000f02 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case LEFT_BUTTON_PIN_Pin: leftButton.handleInterrupt(); break;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	332c      	adds	r3, #44	@ 0x2c
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f9a5 	bl	800123c <_ZN10UserButton15handleInterruptEv>
 8000ef2:	e006      	b.n	8000f02 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case RIGHT_BUTTON_PIN_Pin: rightButton.handleInterrupt(); break;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	333c      	adds	r3, #60	@ 0x3c
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f99f 	bl	800123c <_ZN10UserButton15handleInterruptEv>
 8000efe:	e000      	b.n	8000f02 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    default: break;
 8000f00:	bf00      	nop
	}
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop

08000f0c <_ZN15UserActionPanel12onButtonDownEP10UserButton>:

void UserActionPanel::onButtonDown(UserButton* sender) {
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	b08b      	sub	sp, #44	@ 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d073      	beq.n	8001004 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d071      	beq.n	8001008 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xfc>

	switch (sender->pin) {
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	d86e      	bhi.n	800100c <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x100>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x28>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000fd9 	.word	0x08000fd9
 8000f38:	08000f81 	.word	0x08000f81
 8000f3c:	0800100d 	.word	0x0800100d
 8000f40:	08000f55 	.word	0x08000f55
 8000f44:	0800100d 	.word	0x0800100d
 8000f48:	0800100d 	.word	0x0800100d
 8000f4c:	0800100d 	.word	0x0800100d
 8000f50:	08000fad 	.word	0x08000fad
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Up)); break;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685d      	ldr	r5, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	681c      	ldr	r4, [r3, #0]
 8000f62:	687e      	ldr	r6, [r7, #4]
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fee0 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	cb0c      	ldmia	r3, {r2, r3}
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	47a0      	blx	r4
 8000f7e:	e046      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Down)); break;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685d      	ldr	r5, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	681c      	ldr	r4, [r3, #0]
 8000f8e:	687e      	ldr	r6, [r7, #4]
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff feca 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	cb0c      	ldmia	r3, {r2, r3}
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	47a0      	blx	r4
 8000faa:	e030      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Left)); break;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685d      	ldr	r5, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	681c      	ldr	r4, [r3, #0]
 8000fba:	687e      	ldr	r6, [r7, #4]
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff feb4 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	cb0c      	ldmia	r3, {r2, r3}
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	47a0      	blx	r4
 8000fd6:	e01a      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Right)); break;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685d      	ldr	r5, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	681c      	ldr	r4, [r3, #0]
 8000fe6:	687e      	ldr	r6, [r7, #4]
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	2203      	movs	r2, #3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe9e 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	cb0c      	ldmia	r3, {r2, r3}
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	4628      	mov	r0, r5
 8001000:	47a0      	blx	r4
 8001002:	e004      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!sender) { return; };
 8001004:	bf00      	nop
 8001006:	e002      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001008:	bf00      	nop
 800100a:	e000      	b.n	800100e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		default: break;
 800100c:	bf00      	nop
	}
}
 800100e:	372c      	adds	r7, #44	@ 0x2c
 8001010:	46bd      	mov	sp, r7
 8001012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001014 <_ZThn8_N15UserActionPanel12onButtonDownEP10UserButton>:
	UserButton upButton = UserButton(UP_BUTTON_PIN_Pin, UP_BUTTON_PIN_GPIO_Port);
	UserButton downButton = UserButton(DOWN_BUTTON_PIN_Pin, DOWN_BUTTON_PIN_GPIO_Port);
	UserButton leftButton = UserButton(LEFT_BUTTON_PIN_Pin, LEFT_BUTTON_PIN_GPIO_Port);
	UserButton rightButton = UserButton(RIGHT_BUTTON_PIN_Pin, RIGHT_BUTTON_PIN_GPIO_Port);

	virtual void onButtonDown(UserButton* sender);
 8001014:	f1a0 0008 	sub.w	r0, r0, #8
 8001018:	f7ff bf78 	b.w	8000f0c <_ZN15UserActionPanel12onButtonDownEP10UserButton>

0800101c <_ZN15UserActionPanel10onButtonUpEP10UserButton>:

void UserActionPanel::onButtonUp(UserButton* sender) {
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101e:	b08b      	sub	sp, #44	@ 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d073      	beq.n	8001114 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d071      	beq.n	8001118 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xfc>

	switch (sender->pin) {
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b07      	cmp	r3, #7
 800103c:	d86e      	bhi.n	800111c <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x100>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x28>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	080010e9 	.word	0x080010e9
 8001048:	08001091 	.word	0x08001091
 800104c:	0800111d 	.word	0x0800111d
 8001050:	08001065 	.word	0x08001065
 8001054:	0800111d 	.word	0x0800111d
 8001058:	0800111d 	.word	0x0800111d
 800105c:	0800111d 	.word	0x0800111d
 8001060:	080010bd 	.word	0x080010bd
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Up)); break;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685d      	ldr	r5, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3308      	adds	r3, #8
 8001070:	681c      	ldr	r4, [r3, #0]
 8001072:	687e      	ldr	r6, [r7, #4]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe58 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	cb0c      	ldmia	r3, {r2, r3}
 8001088:	4631      	mov	r1, r6
 800108a:	4628      	mov	r0, r5
 800108c:	47a0      	blx	r4
 800108e:	e046      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Down)); break;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685d      	ldr	r5, [r3, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3308      	adds	r3, #8
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	687e      	ldr	r6, [r7, #4]
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe42 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	cb0c      	ldmia	r3, {r2, r3}
 80010b4:	4631      	mov	r1, r6
 80010b6:	4628      	mov	r0, r5
 80010b8:	47a0      	blx	r4
 80010ba:	e030      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Left)); break;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685d      	ldr	r5, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3308      	adds	r3, #8
 80010c8:	681c      	ldr	r4, [r3, #0]
 80010ca:	687e      	ldr	r6, [r7, #4]
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	2202      	movs	r2, #2
 80010d2:	2101      	movs	r1, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fe2c 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	cb0c      	ldmia	r3, {r2, r3}
 80010e0:	4631      	mov	r1, r6
 80010e2:	4628      	mov	r0, r5
 80010e4:	47a0      	blx	r4
 80010e6:	e01a      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Right)); break;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685d      	ldr	r5, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3308      	adds	r3, #8
 80010f4:	681c      	ldr	r4, [r3, #0]
 80010f6:	687e      	ldr	r6, [r7, #4]
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	2203      	movs	r2, #3
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe16 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	cb0c      	ldmia	r3, {r2, r3}
 800110c:	4631      	mov	r1, r6
 800110e:	4628      	mov	r0, r5
 8001110:	47a0      	blx	r4
 8001112:	e004      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!sender) { return; };
 8001114:	bf00      	nop
 8001116:	e002      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001118:	bf00      	nop
 800111a:	e000      	b.n	800111e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		default: break;
 800111c:	bf00      	nop
	}
}
 800111e:	372c      	adds	r7, #44	@ 0x2c
 8001120:	46bd      	mov	sp, r7
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001124 <_ZThn8_N15UserActionPanel10onButtonUpEP10UserButton>:
	virtual void onButtonUp(UserButton* sender);
 8001124:	f1a0 0008 	sub.w	r0, r0, #8
 8001128:	f7ff bf78 	b.w	800101c <_ZN15UserActionPanel10onButtonUpEP10UserButton>

0800112c <_ZN15UserActionPanel12onButtonLongEP10UserButton>:

void UserActionPanel::onButtonLong(UserButton* sender) {
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d073      	beq.n	8001224 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d071      	beq.n	8001228 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xfc>

	switch (sender->pin) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	2b07      	cmp	r3, #7
 800114c:	d86e      	bhi.n	800122c <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x100>
 800114e:	a201      	add	r2, pc, #4	@ (adr r2, 8001154 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x28>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011f9 	.word	0x080011f9
 8001158:	080011a1 	.word	0x080011a1
 800115c:	0800122d 	.word	0x0800122d
 8001160:	08001175 	.word	0x08001175
 8001164:	0800122d 	.word	0x0800122d
 8001168:	0800122d 	.word	0x0800122d
 800116c:	0800122d 	.word	0x0800122d
 8001170:	080011cd 	.word	0x080011cd
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Up)); break;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685d      	ldr	r5, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3308      	adds	r3, #8
 8001180:	681c      	ldr	r4, [r3, #0]
 8001182:	687e      	ldr	r6, [r7, #4]
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdd0 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	cb0c      	ldmia	r3, {r2, r3}
 8001198:	4631      	mov	r1, r6
 800119a:	4628      	mov	r0, r5
 800119c:	47a0      	blx	r4
 800119e:	e046      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Down)); break;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685d      	ldr	r5, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3308      	adds	r3, #8
 80011ac:	681c      	ldr	r4, [r3, #0]
 80011ae:	687e      	ldr	r6, [r7, #4]
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2200      	movs	r2, #0
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fdba 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	cb0c      	ldmia	r3, {r2, r3}
 80011c4:	4631      	mov	r1, r6
 80011c6:	4628      	mov	r0, r5
 80011c8:	47a0      	blx	r4
 80011ca:	e030      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Left)); break;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685d      	ldr	r5, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3308      	adds	r3, #8
 80011d8:	681c      	ldr	r4, [r3, #0]
 80011da:	687e      	ldr	r6, [r7, #4]
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	2202      	movs	r2, #2
 80011e2:	2102      	movs	r1, #2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fda4 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	cb0c      	ldmia	r3, {r2, r3}
 80011f0:	4631      	mov	r1, r6
 80011f2:	4628      	mov	r0, r5
 80011f4:	47a0      	blx	r4
 80011f6:	e01a      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Right)); break;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685d      	ldr	r5, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	681c      	ldr	r4, [r3, #0]
 8001206:	687e      	ldr	r6, [r7, #4]
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	2203      	movs	r2, #3
 800120e:	2102      	movs	r1, #2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd8e 	bl	8000d32 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	cb0c      	ldmia	r3, {r2, r3}
 800121c:	4631      	mov	r1, r6
 800121e:	4628      	mov	r0, r5
 8001220:	47a0      	blx	r4
 8001222:	e004      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!sender) { return; };
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		default: break;
 800122c:	bf00      	nop
	}
}
 800122e:	372c      	adds	r7, #44	@ 0x2c
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001234 <_ZThn8_N15UserActionPanel12onButtonLongEP10UserButton>:
	virtual void onButtonLong(UserButton* sender);
 8001234:	f1a0 0008 	sub.w	r0, r0, #8
 8001238:	f7ff bf78 	b.w	800112c <_ZN15UserActionPanel12onButtonLongEP10UserButton>

0800123c <_ZN10UserButton15handleInterruptEv>:
#include <UserEvent.h>

#define DEBOUNCE_TIME_MS 50
#define LONG_PRESS_TIME_MS 1000  // (1 секунда)

void UserButton::handleInterrupt() {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if (!delegate) { return; };
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d04d      	beq.n	80012e8 <_ZN10UserButton15handleInterruptEv+0xac>

	uint32_t currentTime = HAL_GetTick();
 800124c:	f002 f97e 	bl	800354c <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]
	if ((currentTime - lastActionTime) < DEBOUNCE_TIME_MS) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b31      	cmp	r3, #49	@ 0x31
 800125c:	d803      	bhi.n	8001266 <_ZN10UserButton15handleInterruptEv+0x2a>
		lastActionTime = currentTime;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	609a      	str	r2, [r3, #8]
		return;
 8001264:	e041      	b.n	80012ea <_ZN10UserButton15handleInterruptEv+0xae>
	}

	bool isPressed = HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f002 fc31 	bl	8003ad8 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	72fb      	strb	r3, [r7, #11]
	if (isPressed) {
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d009      	beq.n	800129c <_ZN10UserButton15handleInterruptEv+0x60>
		delegate->onButtonDown(this);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4610      	mov	r0, r2
 8001298:	4798      	blx	r3
 800129a:	e021      	b.n	80012e0 <_ZN10UserButton15handleInterruptEv+0xa4>
	}
	else {
		bool isLong = LONG_PRESS_TIME_MS < (currentTime - lastActionTime);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a8:	bf8c      	ite	hi
 80012aa:	2301      	movhi	r3, #1
 80012ac:	2300      	movls	r3, #0
 80012ae:	72bb      	strb	r3, [r7, #10]
		if (isLong) {
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <_ZN10UserButton15handleInterruptEv+0x90>
			delegate->onButtonLong(this);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3308      	adds	r3, #8
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4610      	mov	r0, r2
 80012c8:	4798      	blx	r3
 80012ca:	e009      	b.n	80012e0 <_ZN10UserButton15handleInterruptEv+0xa4>
		}
		else {
			delegate->onButtonUp(this);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4610      	mov	r0, r2
 80012de:	4798      	blx	r3
		}
	}

	lastActionTime = currentTime;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	e000      	b.n	80012ea <_ZN10UserButton15handleInterruptEv+0xae>
	if (!delegate) { return; };
 80012e8:	bf00      	nop
}
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	817b      	strh	r3, [r7, #10]
 8001302:	460b      	mov	r3, r1
 8001304:	813b      	strh	r3, [r7, #8]
 8001306:	4613      	mov	r3, r2
 8001308:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001310:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001320:	897a      	ldrh	r2, [r7, #10]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4413      	add	r3, r2
 8001326:	b298      	uxth	r0, r3
 8001328:	893b      	ldrh	r3, [r7, #8]
 800132a:	3301      	adds	r3, #1
 800132c:	b29b      	uxth	r3, r3
 800132e:	893a      	ldrh	r2, [r7, #8]
 8001330:	8979      	ldrh	r1, [r7, #10]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4603      	mov	r3, r0
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f001 f8e0 	bl	80024fc <u8g2_IsIntersection>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d062      	beq.n	8001408 <u8g2_DrawHXBMP+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 8001346:	e057      	b.n	80013f8 <u8g2_DrawHXBMP+0x108>
  {
    uint8_t current_bit = u8x8_pgm_read(b) & mask;
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	4013      	ands	r3, r2
 8001350:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001356:	e013      	b.n	8001380 <u8g2_DrawHXBMP+0x90>
    {
        run_length++;
 8001358:	8abb      	ldrh	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	82bb      	strh	r3, [r7, #20]
        x++;
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	3301      	adds	r3, #1
 8001362:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <u8g2_DrawHXBMP+0x8a>
        {
            mask = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	75fb      	strb	r3, [r7, #23]
            b++;
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	3301      	adds	r3, #1
 8001378:	623b      	str	r3, [r7, #32]
        }
        len--;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	3b01      	subs	r3, #1
 800137e:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d011      	beq.n	80013aa <u8g2_DrawHXBMP+0xba>
 8001386:	7c7b      	ldrb	r3, [r7, #17]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <u8g2_DrawHXBMP+0xac>
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	4013      	ands	r3, r2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0de      	beq.n	8001358 <u8g2_DrawHXBMP+0x68>
 800139a:	e006      	b.n	80013aa <u8g2_DrawHXBMP+0xba>
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4013      	ands	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1d6      	bne.n	8001358 <u8g2_DrawHXBMP+0x68>
    }
    if (current_bit)
 80013aa:	7c7b      	ldrb	r3, [r7, #17]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00f      	beq.n	80013d0 <u8g2_DrawHXBMP+0xe0>
    {
        u8g2->draw_color = color;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	7cfa      	ldrb	r2, [r7, #19]
 80013b4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 80013b8:	897a      	ldrh	r2, [r7, #10]
 80013ba:	8abb      	ldrh	r3, [r7, #20]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	b299      	uxth	r1, r3
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	893a      	ldrh	r2, [r7, #8]
 80013c4:	2000      	movs	r0, #0
 80013c6:	9000      	str	r0, [sp, #0]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 ffc2 	bl	8002352 <u8g2_DrawHVLine>
 80013ce:	e013      	b.n	80013f8 <u8g2_DrawHXBMP+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10e      	bne.n	80013f8 <u8g2_DrawHXBMP+0x108>
    {
        u8g2->draw_color = ncolor;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	7cba      	ldrb	r2, [r7, #18]
 80013de:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 80013e2:	897a      	ldrh	r2, [r7, #10]
 80013e4:	8abb      	ldrh	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b299      	uxth	r1, r3
 80013ea:	8abb      	ldrh	r3, [r7, #20]
 80013ec:	893a      	ldrh	r2, [r7, #8]
 80013ee:	2000      	movs	r0, #0
 80013f0:	9000      	str	r0, [sp, #0]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 ffad 	bl	8002352 <u8g2_DrawHVLine>
  while(len > 0)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1a4      	bne.n	8001348 <u8g2_DrawHXBMP+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	7cfa      	ldrb	r2, [r7, #19]
 8001402:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001406:	e000      	b.n	800140a <u8g2_DrawHXBMP+0x11a>
    return;
 8001408:	bf00      	nop
}
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af02      	add	r7, sp, #8
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4603      	mov	r3, r0
 8001420:	817b      	strh	r3, [r7, #10]
 8001422:	460b      	mov	r3, r1
 8001424:	813b      	strh	r3, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800142e:	8afb      	ldrh	r3, [r7, #22]
 8001430:	3307      	adds	r3, #7
 8001432:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001434:	8afb      	ldrh	r3, [r7, #22]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800143a:	897a      	ldrh	r2, [r7, #10]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4413      	add	r3, r2
 8001440:	b298      	uxth	r0, r3
 8001442:	893a      	ldrh	r2, [r7, #8]
 8001444:	8c3b      	ldrh	r3, [r7, #32]
 8001446:	4413      	add	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	893a      	ldrh	r2, [r7, #8]
 800144c:	8979      	ldrh	r1, [r7, #10]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4603      	mov	r3, r0
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f001 f852 	bl	80024fc <u8g2_IsIntersection>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d017      	beq.n	800148e <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800145e:	e012      	b.n	8001486 <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001460:	88f8      	ldrh	r0, [r7, #6]
 8001462:	893a      	ldrh	r2, [r7, #8]
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	4603      	mov	r3, r0
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff ff3f 	bl	80012f0 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001476:	4413      	add	r3, r2
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800147a:	893b      	ldrh	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	813b      	strh	r3, [r7, #8]
    h--;
 8001480:	8c3b      	ldrh	r3, [r7, #32]
 8001482:	3b01      	subs	r3, #1
 8001484:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001486:	8c3b      	ldrh	r3, [r7, #32]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e9      	bne.n	8001460 <u8g2_DrawXBMP+0x50>
 800148c:	e000      	b.n	8001490 <u8g2_DrawXBMP+0x80>
    return;
 800148e:	bf00      	nop
  }
}
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af02      	add	r7, sp, #8
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	4608      	mov	r0, r1
 80014a0:	4611      	mov	r1, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	460b      	mov	r3, r1
 80014aa:	813b      	strh	r3, [r7, #8]
 80014ac:	4613      	mov	r3, r2
 80014ae:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80014b0:	897a      	ldrh	r2, [r7, #10]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4413      	add	r3, r2
 80014b6:	b298      	uxth	r0, r3
 80014b8:	893a      	ldrh	r2, [r7, #8]
 80014ba:	8b3b      	ldrh	r3, [r7, #24]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	893a      	ldrh	r2, [r7, #8]
 80014c2:	8979      	ldrh	r1, [r7, #10]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4603      	mov	r3, r0
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f001 f817 	bl	80024fc <u8g2_IsIntersection>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80014d4:	e00d      	b.n	80014f2 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	893a      	ldrh	r2, [r7, #8]
 80014da:	8979      	ldrh	r1, [r7, #10]
 80014dc:	2000      	movs	r0, #0
 80014de:	9000      	str	r0, [sp, #0]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 ff36 	bl	8002352 <u8g2_DrawHVLine>
    y++;    
 80014e6:	893b      	ldrh	r3, [r7, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	813b      	strh	r3, [r7, #8]
    h--;
 80014ec:	8b3b      	ldrh	r3, [r7, #24]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80014f2:	8b3b      	ldrh	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <u8g2_DrawBox+0x40>
 80014f8:	e000      	b.n	80014fc <u8g2_DrawBox+0x66>
    return;
 80014fa:	bf00      	nop
  }
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af02      	add	r7, sp, #8
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	4608      	mov	r0, r1
 800150c:	4611      	mov	r1, r2
 800150e:	461a      	mov	r2, r3
 8001510:	4603      	mov	r3, r0
 8001512:	817b      	strh	r3, [r7, #10]
 8001514:	460b      	mov	r3, r1
 8001516:	813b      	strh	r3, [r7, #8]
 8001518:	4613      	mov	r3, r2
 800151a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001520:	897a      	ldrh	r2, [r7, #10]
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4413      	add	r3, r2
 8001526:	b298      	uxth	r0, r3
 8001528:	893a      	ldrh	r2, [r7, #8]
 800152a:	8c3b      	ldrh	r3, [r7, #32]
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	8979      	ldrh	r1, [r7, #10]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4603      	mov	r3, r0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 ffdf 	bl	80024fc <u8g2_IsIntersection>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d037      	beq.n	80015b4 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	893a      	ldrh	r2, [r7, #8]
 8001548:	8979      	ldrh	r1, [r7, #10]
 800154a:	2000      	movs	r0, #0
 800154c:	9000      	str	r0, [sp, #0]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 feff 	bl	8002352 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001554:	8c3b      	ldrh	r3, [r7, #32]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d92d      	bls.n	80015b6 <u8g2_DrawFrame+0xb4>
    h-=2;
 800155a:	8c3b      	ldrh	r3, [r7, #32]
 800155c:	3b02      	subs	r3, #2
 800155e:	843b      	strh	r3, [r7, #32]
    y++;
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001566:	8c3b      	ldrh	r3, [r7, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01a      	beq.n	80015a2 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800156c:	8c3b      	ldrh	r3, [r7, #32]
 800156e:	893a      	ldrh	r2, [r7, #8]
 8001570:	8979      	ldrh	r1, [r7, #10]
 8001572:	2001      	movs	r0, #1
 8001574:	9000      	str	r0, [sp, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 feeb 	bl	8002352 <u8g2_DrawHVLine>
      x+=w;
 800157c:	897a      	ldrh	r2, [r7, #10]
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	4413      	add	r3, r2
 8001582:	817b      	strh	r3, [r7, #10]
      x--;
 8001584:	897b      	ldrh	r3, [r7, #10]
 8001586:	3b01      	subs	r3, #1
 8001588:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800158a:	8c3b      	ldrh	r3, [r7, #32]
 800158c:	893a      	ldrh	r2, [r7, #8]
 800158e:	8979      	ldrh	r1, [r7, #10]
 8001590:	2001      	movs	r0, #1
 8001592:	9000      	str	r0, [sp, #0]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 fedc 	bl	8002352 <u8g2_DrawHVLine>
      y+=h;
 800159a:	893a      	ldrh	r2, [r7, #8]
 800159c:	8c3b      	ldrh	r3, [r7, #32]
 800159e:	4413      	add	r3, r2
 80015a0:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	8af9      	ldrh	r1, [r7, #22]
 80015a8:	2000      	movs	r0, #0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fed0 	bl	8002352 <u8g2_DrawHVLine>
 80015b2:	e000      	b.n	80015b6 <u8g2_DrawFrame+0xb4>
    return;
 80015b4:	bf00      	nop
  }
}
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	7c1b      	ldrb	r3, [r3, #16]
 80015ca:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 ff20 	bl	8005430 <memset>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
 8001604:	4613      	mov	r3, r2
 8001606:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	7c1b      	ldrb	r3, [r3, #16]
 800160e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001618:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	b29b      	uxth	r3, r3
 800161e:	89ba      	ldrh	r2, [r7, #12]
 8001620:	fb12 f303 	smulbb	r3, r2, r3
 8001624:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001634:	7bf9      	ldrb	r1, [r7, #15]
 8001636:	78ba      	ldrb	r2, [r7, #2]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	460b      	mov	r3, r1
 800163e:	2100      	movs	r1, #0
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f001 fcce 	bl	8002fe2 <u8x8_DrawTile>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001660:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001668:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	7c5b      	ldrb	r3, [r3, #17]
 8001670:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001672:	7bba      	ldrb	r2, [r7, #14]
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffbd 	bl	80015f8 <u8g2_send_tile_row>
    src_row++;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	3301      	adds	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001684:	7bbb      	ldrb	r3, [r7, #14]
 8001686:	3301      	adds	r3, #1
 8001688:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	7b7b      	ldrb	r3, [r7, #13]
 800168e:	429a      	cmp	r2, r3
 8001690:	d203      	bcs.n	800169a <u8g2_send_buffer+0x4c>
 8001692:	7bba      	ldrb	r2, [r7, #14]
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3eb      	bcc.n	8001672 <u8g2_send_buffer+0x24>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffcf 	bl	800164e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f001 fce7 	bl	8003084 <u8x8_RefreshDisplay>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	701a      	strb	r2, [r3, #0]
  return buf;
 80016ce:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <u8g2_m_16_4_f+0x1c>)
  #endif
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	200001f4 	.word	0x200001f4

080016e0 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 80016f6:	490c      	ldr	r1, [pc, #48]	@ (8001728 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f001 fd23 	bl	8003144 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 80016fe:	f107 0313 	add.w	r3, r7, #19
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffdc 	bl	80016c0 <u8g2_m_16_4_f>
 8001708:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800170a:	7cfa      	ldrb	r2, [r7, #19]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 8001712:	6979      	ldr	r1, [r7, #20]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 ffdb 	bl	80026d0 <u8g2_SetupBuffer>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	08002c95 	.word	0x08002c95
 8001728:	08002f01 	.word	0x08002f01
 800172c:	08002553 	.word	0x08002553

08001730 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	81fb      	strh	r3, [r7, #14]
    font++;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	4413      	add	r3, r2
 8001784:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001786:	89fb      	ldrh	r3, [r7, #14]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800179e:	2100      	movs	r1, #0
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7ff ffc5 	bl	8001730 <u8g2_font_get_byte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80017ae:	2101      	movs	r1, #1
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff ffbd 	bl	8001730 <u8g2_font_get_byte>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80017be:	2102      	movs	r1, #2
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff ffb5 	bl	8001730 <u8g2_font_get_byte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80017ce:	2103      	movs	r1, #3
 80017d0:	6838      	ldr	r0, [r7, #0]
 80017d2:	f7ff ffad 	bl	8001730 <u8g2_font_get_byte>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80017de:	2104      	movs	r1, #4
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ffa5 	bl	8001730 <u8g2_font_get_byte>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80017ee:	2105      	movs	r1, #5
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff ff9d 	bl	8001730 <u8g2_font_get_byte>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80017fe:	2106      	movs	r1, #6
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ff95 	bl	8001730 <u8g2_font_get_byte>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800180e:	2107      	movs	r1, #7
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7ff ff8d 	bl	8001730 <u8g2_font_get_byte>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800181e:	2108      	movs	r1, #8
 8001820:	6838      	ldr	r0, [r7, #0]
 8001822:	f7ff ff85 	bl	8001730 <u8g2_font_get_byte>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800182e:	2109      	movs	r1, #9
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7ff ff7d 	bl	8001730 <u8g2_font_get_byte>
 8001836:	4603      	mov	r3, r0
 8001838:	b25a      	sxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800183e:	210a      	movs	r1, #10
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ff75 	bl	8001730 <u8g2_font_get_byte>
 8001846:	4603      	mov	r3, r0
 8001848:	b25a      	sxtb	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800184e:	210b      	movs	r1, #11
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f7ff ff6d 	bl	8001730 <u8g2_font_get_byte>
 8001856:	4603      	mov	r3, r0
 8001858:	b25a      	sxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800185e:	210c      	movs	r1, #12
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f7ff ff65 	bl	8001730 <u8g2_font_get_byte>
 8001866:	4603      	mov	r3, r0
 8001868:	b25a      	sxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800186e:	210d      	movs	r1, #13
 8001870:	6838      	ldr	r0, [r7, #0]
 8001872:	f7ff ff5d 	bl	8001730 <u8g2_font_get_byte>
 8001876:	4603      	mov	r3, r0
 8001878:	b25a      	sxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800187e:	210e      	movs	r1, #14
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f7ff ff55 	bl	8001730 <u8g2_font_get_byte>
 8001886:	4603      	mov	r3, r0
 8001888:	b25a      	sxtb	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800188e:	210f      	movs	r1, #15
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7ff ff4d 	bl	8001730 <u8g2_font_get_byte>
 8001896:	4603      	mov	r3, r0
 8001898:	b25a      	sxtb	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800189e:	2110      	movs	r1, #16
 80018a0:	6838      	ldr	r0, [r7, #0]
 80018a2:	f7ff ff45 	bl	8001730 <u8g2_font_get_byte>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b25a      	sxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80018ae:	2111      	movs	r1, #17
 80018b0:	6838      	ldr	r0, [r7, #0]
 80018b2:	f7ff ff4f 	bl	8001754 <u8g2_font_get_word>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80018be:	2113      	movs	r1, #19
 80018c0:	6838      	ldr	r0, [r7, #0]
 80018c2:	f7ff ff47 	bl	8001754 <u8g2_font_get_word>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80018ce:	2115      	movs	r1, #21
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f7ff ff3f 	bl	8001754 <u8g2_font_get_word>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	82da      	strh	r2, [r3, #22]
#endif
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b1b      	ldrb	r3, [r3, #12]
 80018f6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	7b7b      	ldrb	r3, [r7, #13]
 8001904:	fa42 f303 	asr.w	r3, r2, r3
 8001908:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800190a:	7b7b      	ldrb	r3, [r7, #13]
 800190c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800190e:	7bba      	ldrb	r2, [r7, #14]
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	4413      	add	r3, r2
 8001914:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	2b07      	cmp	r3, #7
 800191a:	d91a      	bls.n	8001952 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800191c:	2308      	movs	r3, #8
 800191e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001920:	7b3a      	ldrb	r2, [r7, #12]
 8001922:	7b7b      	ldrb	r3, [r7, #13]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	7b3b      	ldrb	r3, [r7, #12]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4313      	orrs	r3, r2
 8001948:	b25b      	sxtb	r3, r3
 800194a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	3b08      	subs	r3, #8
 8001950:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	4013      	ands	r3, r2
 8001966:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7bba      	ldrb	r2, [r7, #14]
 800196c:	731a      	strb	r2, [r3, #12]
  return val;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffaa 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	3b01      	subs	r3, #1
 800199e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80019a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	73fb      	strb	r3, [r7, #15]
  return v;
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80019c2:	b490      	push	{r4, r7}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4604      	mov	r4, r0
 80019ca:	4608      	mov	r0, r1
 80019cc:	4611      	mov	r1, r2
 80019ce:	461a      	mov	r2, r3
 80019d0:	4623      	mov	r3, r4
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	4603      	mov	r3, r0
 80019d6:	717b      	strb	r3, [r7, #5]
 80019d8:	460b      	mov	r3, r1
 80019da:	713b      	strb	r3, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d014      	beq.n	8001a10 <u8g2_add_vector_y+0x4e>
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	dc19      	bgt.n	8001a1e <u8g2_add_vector_y+0x5c>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <u8g2_add_vector_y+0x32>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d007      	beq.n	8001a02 <u8g2_add_vector_y+0x40>
 80019f2:	e014      	b.n	8001a1e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80019f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4413      	add	r3, r2
 80019fe:	80fb      	strh	r3, [r7, #6]
      break;
 8001a00:	e014      	b.n	8001a2c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001a02:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
      break;
 8001a0e:	e00d      	b.n	8001a2c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001a10:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	80fb      	strh	r3, [r7, #6]
      break;
 8001a1c:	e006      	b.n	8001a2c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001a1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	80fb      	strh	r3, [r7, #6]
      break;      
 8001a2a:	bf00      	nop
  }
  return dy;
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc90      	pop	{r4, r7}
 8001a36:	4770      	bx	lr

08001a38 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001a38:	b490      	push	{r4, r7}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4604      	mov	r4, r0
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	717b      	strb	r3, [r7, #5]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	713b      	strb	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d014      	beq.n	8001a86 <u8g2_add_vector_x+0x4e>
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	dc19      	bgt.n	8001a94 <u8g2_add_vector_x+0x5c>
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <u8g2_add_vector_x+0x32>
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d007      	beq.n	8001a78 <u8g2_add_vector_x+0x40>
 8001a68:	e014      	b.n	8001a94 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001a6a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	4413      	add	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
      break;
 8001a76:	e014      	b.n	8001aa2 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001a78:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	80fb      	strh	r3, [r7, #6]
      break;
 8001a84:	e00d      	b.n	8001aa2 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001a86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	80fb      	strh	r3, [r7, #6]
      break;
 8001a92:	e006      	b.n	8001aa2 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001a94:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001aa0:	bf00      	nop
  }
  return dx;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc90      	pop	{r4, r7}
 8001aac:	4770      	bx	lr

08001aae <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b088      	sub	sp, #32
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3360      	adds	r3, #96	@ 0x60
 8001ac2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ace:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ad6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ade:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	7d7b      	ldrb	r3, [r7, #21]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001aec:	7dfa      	ldrb	r2, [r7, #23]
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d201      	bcs.n	8001af8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	889b      	ldrh	r3, [r3, #4]
 8001afc:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	88db      	ldrh	r3, [r3, #6]
 8001b02:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001b04:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001b08:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	7c1b      	ldrb	r3, [r3, #16]
 8001b10:	89b8      	ldrh	r0, [r7, #12]
 8001b12:	f7ff ff91 	bl	8001a38 <u8g2_add_vector_x>
 8001b16:	4603      	mov	r3, r0
 8001b18:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001b1a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001b1e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	7c1b      	ldrb	r3, [r3, #16]
 8001b26:	8978      	ldrh	r0, [r7, #10]
 8001b28:	f7ff ff4b 	bl	80019c2 <u8g2_add_vector_y>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	7b9a      	ldrb	r2, [r3, #14]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001b40:	7dbb      	ldrb	r3, [r7, #22]
 8001b42:	b298      	uxth	r0, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	7c1b      	ldrb	r3, [r3, #16]
 8001b48:	897a      	ldrh	r2, [r7, #10]
 8001b4a:	89b9      	ldrh	r1, [r7, #12]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fbfe 	bl	8002352 <u8g2_DrawHVLine>
 8001b56:	e013      	b.n	8001b80 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	7b5b      	ldrb	r3, [r3, #13]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	7bda      	ldrb	r2, [r3, #15]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001b6a:	7dbb      	ldrb	r3, [r7, #22]
 8001b6c:	b298      	uxth	r0, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	897a      	ldrh	r2, [r7, #10]
 8001b74:	89b9      	ldrh	r1, [r7, #12]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fbe9 	bl	8002352 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001b80:	7dfa      	ldrb	r2, [r7, #23]
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d309      	bcc.n	8001b9c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001b88:	7dfa      	ldrb	r2, [r7, #23]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	757b      	strb	r3, [r7, #21]
    ly++;
 8001b94:	7d3b      	ldrb	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001b9a:	e79d      	b.n	8001ad8 <u8g2_font_decode_len+0x2a>
      break;
 8001b9c:	bf00      	nop
  }
  lx += cnt;
 8001b9e:	7d7a      	ldrb	r2, [r7, #21]
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001ba6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001bae:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	725a      	strb	r2, [r3, #9]
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3360      	adds	r3, #96	@ 0x60
 8001bcc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff fe7f 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b25a      	sxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fe74 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b25a      	sxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	7b9b      	ldrb	r3, [r3, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	73da      	strb	r2, [r3, #15]
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffbd 	bl	8001bbe <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001c4a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c52:	4619      	mov	r1, r3
 8001c54:	6978      	ldr	r0, [r7, #20]
 8001c56:	f7ff fe91 	bl	800197c <u8g2_font_decode_get_signed_bits>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001c64:	4619      	mov	r1, r3
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff fe88 	bl	800197c <u8g2_font_decode_get_signed_bits>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001c76:	4619      	mov	r1, r3
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f7ff fe7f 	bl	800197c <u8g2_font_decode_get_signed_bits>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f340 80d7 	ble.w	8001e3c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	8898      	ldrh	r0, [r3, #4]
 8001c92:	7cfa      	ldrb	r2, [r7, #19]
 8001c94:	7c7b      	ldrb	r3, [r7, #17]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	7c1b      	ldrb	r3, [r3, #16]
 8001ca4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001ca8:	f7ff fec6 	bl	8001a38 <u8g2_add_vector_x>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	88d8      	ldrh	r0, [r3, #6]
 8001cb8:	7cfa      	ldrb	r2, [r7, #19]
 8001cba:	7c7b      	ldrb	r3, [r7, #17]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	b25a      	sxtb	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	7c1b      	ldrb	r3, [r3, #16]
 8001cca:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001cce:	f7ff fe78 	bl	80019c2 <u8g2_add_vector_y>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	889b      	ldrh	r3, [r3, #4]
 8001cde:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	88db      	ldrh	r3, [r3, #6]
 8001ce4:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001ce6:	8bfb      	ldrh	r3, [r7, #30]
 8001ce8:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001cea:	8b7b      	ldrh	r3, [r7, #26]
 8001cec:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	7c1b      	ldrb	r3, [r3, #16]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d85a      	bhi.n	8001dac <u8g2_font_decode_glyph+0x180>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <u8g2_font_decode_glyph+0xd0>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d29 	.word	0x08001d29
 8001d04:	08001d51 	.word	0x08001d51
 8001d08:	08001d85 	.word	0x08001d85
      {
	case 0:
	    x1 += decode->glyph_width;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	8bbb      	ldrh	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001d1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	8b3b      	ldrh	r3, [r7, #24]
 8001d22:	4413      	add	r3, r2
 8001d24:	833b      	strh	r3, [r7, #24]
	    break;
 8001d26:	e041      	b.n	8001dac <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001d28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8bfa      	ldrh	r2, [r7, #30]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001d34:	8bfb      	ldrh	r3, [r7, #30]
 8001d36:	3301      	adds	r3, #1
 8001d38:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	8b3b      	ldrh	r3, [r7, #24]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	833b      	strh	r3, [r7, #24]
	    break;
 8001d4e:	e02d      	b.n	8001dac <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	8bfa      	ldrh	r2, [r7, #30]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001d5e:	8bfb      	ldrh	r3, [r7, #30]
 8001d60:	3301      	adds	r3, #1
 8001d62:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001d64:	8bbb      	ldrh	r3, [r7, #28]
 8001d66:	3301      	adds	r3, #1
 8001d68:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001d6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	8b7a      	ldrh	r2, [r7, #26]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001d7c:	8b3b      	ldrh	r3, [r7, #24]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001d82:	e013      	b.n	8001dac <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001d84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	8bbb      	ldrh	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	8b7a      	ldrh	r2, [r7, #26]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001d9e:	8b7b      	ldrh	r3, [r7, #26]
 8001da0:	3301      	adds	r3, #1
 8001da2:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001da4:	8b3b      	ldrh	r3, [r7, #24]
 8001da6:	3301      	adds	r3, #1
 8001da8:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001daa:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001dac:	8bb8      	ldrh	r0, [r7, #28]
 8001dae:	8b7a      	ldrh	r2, [r7, #26]
 8001db0:	8bf9      	ldrh	r1, [r7, #30]
 8001db2:	8b3b      	ldrh	r3, [r7, #24]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fb9f 	bl	80024fc <u8g2_IsIntersection>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <u8g2_font_decode_glyph+0x19e>
	return d;
 8001dc4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001dc8:	e03a      	b.n	8001e40 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff fd81 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001dee:	4619      	mov	r1, r3
 8001df0:	6978      	ldr	r0, [r7, #20]
 8001df2:	f7ff fd78 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff fe54 	bl	8001aae <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe4e 	bl	8001aae <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001e12:	2101      	movs	r1, #1
 8001e14:	6978      	ldr	r0, [r7, #20]
 8001e16:	f7ff fd66 	bl	80018e6 <u8g2_font_decode_get_unsigned_bits>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ec      	bne.n	8001dfa <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001e26:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dd00      	ble.n	8001e30 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001e2e:	e7d2      	b.n	8001dd6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001e30:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	7b9a      	ldrb	r2, [r3, #14]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001e3c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3317      	adds	r3, #23
 8001e5e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	2bff      	cmp	r3, #255	@ 0xff
 8001e64:	d82a      	bhi.n	8001ebc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	2b60      	cmp	r3, #96	@ 0x60
 8001e6a:	d907      	bls.n	8001e7c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001e72:	461a      	mov	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	2b40      	cmp	r3, #64	@ 0x40
 8001e80:	d906      	bls.n	8001e90 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001e88:	461a      	mov	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04e      	beq.n	8001f38 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d102      	bne.n	8001eac <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	e049      	b.n	8001f40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001eba:	e7e9      	b.n	8001e90 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6938      	ldr	r0, [r7, #16]
 8001ed2:	f7ff fc3f 	bl	8001754 <u8g2_font_get_word>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4413      	add	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	6938      	ldr	r0, [r7, #16]
 8001ee4:	f7ff fc36 	bl	8001754 <u8g2_font_get_word>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001ef2:	89fa      	ldrh	r2, [r7, #14]
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3e9      	bcc.n	8001ece <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001f1a:	89fa      	ldrh	r2, [r7, #14]
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d102      	bne.n	8001f28 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3303      	adds	r3, #3
 8001f26:	e00b      	b.n	8001f40 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001f36:	e7e0      	b.n	8001efa <u8g2_font_get_glyph_data+0xb2>
	break;
 8001f38:	bf00      	nop
 8001f3a:	e000      	b.n	8001f3e <u8g2_font_get_glyph_data+0xf6>
	break;
 8001f3c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	813b      	strh	r3, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	897a      	ldrh	r2, [r7, #10]
 8001f6a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	893a      	ldrh	r2, [r7, #8]
 8001f72:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff ff64 	bl	8001e48 <u8g2_font_get_glyph_data>
 8001f80:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fe4e 	bl	8001c2c <u8g2_font_decode_glyph>
 8001f90:	4603      	mov	r3, r0
 8001f92:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001f94:	8afb      	ldrh	r3, [r7, #22]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	817b      	strh	r3, [r7, #10]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	813b      	strh	r3, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d833      	bhi.n	800202c <u8g2_DrawGlyph+0x8c>
 8001fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fcc <u8g2_DrawGlyph+0x2c>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001ff1 	.word	0x08001ff1
 8001fd4:	08002005 	.word	0x08002005
 8001fd8:	08002019 	.word	0x08002019
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	4413      	add	r3, r2
 8001fec:	813b      	strh	r3, [r7, #8]
      break;
 8001fee:	e01d      	b.n	800202c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	817b      	strh	r3, [r7, #10]
      break;
 8002002:	e013      	b.n	800202c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	4798      	blx	r3
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	893b      	ldrh	r3, [r7, #8]
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	813b      	strh	r3, [r7, #8]
      break;
 8002016:	e009      	b.n	800202c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	4798      	blx	r3
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	897b      	ldrh	r3, [r7, #10]
 8002026:	4413      	add	r3, r2
 8002028:	817b      	strh	r3, [r7, #10]
      break;
 800202a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	893a      	ldrh	r2, [r7, #8]
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff88 	bl	8001f48 <u8g2_font_draw_glyph>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop

08002044 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	817b      	strh	r3, [r7, #10]
 8002052:	4613      	mov	r3, r2
 8002054:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fc80 	bl	800295c <u8x8_utf8_init>
  sum = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	4611      	mov	r1, r2
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	4798      	blx	r3
 800206e:	4603      	mov	r3, r0
 8002070:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002072:	8abb      	ldrh	r3, [r7, #20]
 8002074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002078:	4293      	cmp	r3, r2
 800207a:	d038      	beq.n	80020ee <u8g2_draw_string+0xaa>
      break;
    str++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002082:	8abb      	ldrh	r3, [r7, #20]
 8002084:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002088:	4293      	cmp	r3, r2
 800208a:	d0e9      	beq.n	8002060 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800208c:	8abb      	ldrh	r3, [r7, #20]
 800208e:	893a      	ldrh	r2, [r7, #8]
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff84 	bl	8001fa0 <u8g2_DrawGlyph>
 8002098:	4603      	mov	r3, r0
 800209a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d81e      	bhi.n	80020e4 <u8g2_draw_string+0xa0>
 80020a6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <u8g2_draw_string+0x68>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020c7 	.word	0x080020c7
 80020b4:	080020d1 	.word	0x080020d1
 80020b8:	080020db 	.word	0x080020db
      {
	case 0:
	  x += delta;
 80020bc:	897a      	ldrh	r2, [r7, #10]
 80020be:	8a7b      	ldrh	r3, [r7, #18]
 80020c0:	4413      	add	r3, r2
 80020c2:	817b      	strh	r3, [r7, #10]
	  break;
 80020c4:	e00e      	b.n	80020e4 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80020c6:	893a      	ldrh	r2, [r7, #8]
 80020c8:	8a7b      	ldrh	r3, [r7, #18]
 80020ca:	4413      	add	r3, r2
 80020cc:	813b      	strh	r3, [r7, #8]
	  break;
 80020ce:	e009      	b.n	80020e4 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80020d0:	897a      	ldrh	r2, [r7, #10]
 80020d2:	8a7b      	ldrh	r3, [r7, #18]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	817b      	strh	r3, [r7, #10]
	  break;
 80020d8:	e004      	b.n	80020e4 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80020da:	893a      	ldrh	r2, [r7, #8]
 80020dc:	8a7b      	ldrh	r3, [r7, #18]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	813b      	strh	r3, [r7, #8]
	  break;
 80020e2:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80020e4:	8afa      	ldrh	r2, [r7, #22]
 80020e6:	8a7b      	ldrh	r3, [r7, #18]
 80020e8:	4413      	add	r3, r2
 80020ea:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020ec:	e7b8      	b.n	8002060 <u8g2_draw_string+0x1c>
      break;
 80020ee:	bf00      	nop
    }
  }
  return sum;
 80020f0:	8afb      	ldrh	r3, [r7, #22]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop

080020fc <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	4613      	mov	r3, r2
 800210c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4a06      	ldr	r2, [pc, #24]	@ (800212c <u8g2_DrawUTF8+0x30>)
 8002112:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	8979      	ldrh	r1, [r7, #10]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff ff92 	bl	8002044 <u8g2_draw_string>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	08002979 	.word	0x08002979

08002130 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	2b00      	cmp	r3, #0
 800213e:	d05d      	beq.n	80021fc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04d      	beq.n	80021fe <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002168:	2b01      	cmp	r3, #1
 800216a:	d11c      	bne.n	80021a6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002178:	429a      	cmp	r2, r3
 800217a:	da05      	bge.n	8002188 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002194:	429a      	cmp	r2, r3
 8002196:	dd32      	ble.n	80021fe <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80021a4:	e02b      	b.n	80021fe <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80021b4:	4619      	mov	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80021bc:	440b      	add	r3, r1
 80021be:	429a      	cmp	r2, r3
 80021c0:	da0d      	bge.n	80021de <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	b25a      	sxtb	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dd07      	ble.n	80021fe <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80021fa:	e000      	b.n	80021fe <u8g2_UpdateRefHeight+0xce>
    return;
 80021fc:	bf00      	nop
  }  
}
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a04      	ldr	r2, [pc, #16]	@ (800223c <u8g2_SetFontPosBaseline+0x1c>)
 800222c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	08002209 	.word	0x08002209

08002240 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d00b      	beq.n	800226c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3374      	adds	r3, #116	@ 0x74
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fa97 	bl	8001794 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff62 	bl	8002130 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	460b      	mov	r3, r1
 8002284:	80fb      	strh	r3, [r7, #6]
 8002286:	4613      	mov	r3, r2
 8002288:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	8abb      	ldrh	r3, [r7, #20]
 800229a:	4413      	add	r3, r2
 800229c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800229e:	8afa      	ldrh	r2, [r7, #22]
 80022a0:	8abb      	ldrh	r3, [r7, #20]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90b      	bls.n	80022be <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80022a6:	8afa      	ldrh	r2, [r7, #22]
 80022a8:	88bb      	ldrh	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d205      	bcs.n	80022ba <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80022ae:	88bb      	ldrh	r3, [r7, #4]
 80022b0:	82bb      	strh	r3, [r7, #20]
      b--;
 80022b2:	8abb      	ldrh	r3, [r7, #20]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	82bb      	strh	r3, [r7, #20]
 80022b8:	e001      	b.n	80022be <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80022be:	8afa      	ldrh	r2, [r7, #22]
 80022c0:	88bb      	ldrh	r3, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d301      	bcc.n	80022ca <u8g2_clip_intersection2+0x56>
    return 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e01c      	b.n	8002304 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80022ca:	8aba      	ldrh	r2, [r7, #20]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d801      	bhi.n	80022d6 <u8g2_clip_intersection2+0x62>
    return 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e016      	b.n	8002304 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80022d6:	8afa      	ldrh	r2, [r7, #22]
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d201      	bcs.n	80022e2 <u8g2_clip_intersection2+0x6e>
    a = c;
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80022e2:	8aba      	ldrh	r2, [r7, #20]
 80022e4:	88bb      	ldrh	r3, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d901      	bls.n	80022ee <u8g2_clip_intersection2+0x7a>
    b = d;
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8afa      	ldrh	r2, [r7, #22]
 80022f2:	801a      	strh	r2, [r3, #0]
  b -= a;
 80022f4:	8aba      	ldrh	r2, [r7, #20]
 80022f6:	8afb      	ldrh	r3, [r7, #22]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	8aba      	ldrh	r2, [r7, #20]
 8002300:	801a      	strh	r2, [r3, #0]
  return 1;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800232e:	893a      	ldrh	r2, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002338:	88f8      	ldrh	r0, [r7, #6]
 800233a:	893a      	ldrh	r2, [r7, #8]
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4603      	mov	r3, r0
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	47a0      	blx	r4
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}

08002352 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b087      	sub	sp, #28
 8002356:	af02      	add	r7, sp, #8
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	461a      	mov	r2, r3
 8002360:	4603      	mov	r3, r0
 8002362:	817b      	strh	r3, [r7, #10]
 8002364:	460b      	mov	r3, r1
 8002366:	813b      	strh	r3, [r7, #8]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d075      	beq.n	8002462 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d072      	beq.n	8002462 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d91a      	bls.n	80023b8 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d109      	bne.n	800239e <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800238a:	897a      	ldrh	r2, [r7, #10]
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	b29b      	uxth	r3, r3
 8002392:	817b      	strh	r3, [r7, #10]
	  x++;
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	3301      	adds	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	817b      	strh	r3, [r7, #10]
 800239c:	e00c      	b.n	80023b8 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800239e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d108      	bne.n	80023b8 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80023a6:	893a      	ldrh	r2, [r7, #8]
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	813b      	strh	r3, [r7, #8]
	  y++;
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80023b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80023c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11a      	bne.n	8002402 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80023d2:	893b      	ldrh	r3, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d83b      	bhi.n	8002450 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d937      	bls.n	8002454 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80023f0:	1db9      	adds	r1, r7, #6
 80023f2:	f107 000a 	add.w	r0, r7, #10
 80023f6:	f7ff ff3d 	bl	8002274 <u8g2_clip_intersection2>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11a      	bne.n	8002436 <u8g2_DrawHVLine+0xe4>
	  return;
 8002400:	e02f      	b.n	8002462 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002408:	897b      	ldrh	r3, [r7, #10]
 800240a:	429a      	cmp	r2, r3
 800240c:	d824      	bhi.n	8002458 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	429a      	cmp	r2, r3
 8002418:	d920      	bls.n	800245c <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002426:	1db9      	adds	r1, r7, #6
 8002428:	f107 0008 	add.w	r0, r7, #8
 800242c:	f7ff ff22 	bl	8002274 <u8g2_clip_intersection2>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d014      	beq.n	8002460 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	689c      	ldr	r4, [r3, #8]
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	893a      	ldrh	r2, [r7, #8]
 8002440:	88f8      	ldrh	r0, [r7, #6]
 8002442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4603      	mov	r3, r0
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	47a0      	blx	r4
 800244e:	e008      	b.n	8002462 <u8g2_DrawHVLine+0x110>
	  return;
 8002450:	bf00      	nop
 8002452:	e006      	b.n	8002462 <u8g2_DrawHVLine+0x110>
	  return;
 8002454:	bf00      	nop
 8002456:	e004      	b.n	8002462 <u8g2_DrawHVLine+0x110>
	  return;
 8002458:	bf00      	nop
 800245a:	e002      	b.n	8002462 <u8g2_DrawHVLine+0x110>
	  return;
 800245c:	bf00      	nop
 800245e:	e000      	b.n	8002462 <u8g2_DrawHVLine+0x110>
	  return;
 8002460:	bf00      	nop
    }
}
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d903      	bls.n	800248a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002496:	b490      	push	{r4, r7}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4604      	mov	r4, r0
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	461a      	mov	r2, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	80fb      	strh	r3, [r7, #6]
 80024a8:	4603      	mov	r3, r0
 80024aa:	80bb      	strh	r3, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80024b4:	887a      	ldrh	r2, [r7, #2]
 80024b6:	88bb      	ldrh	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d20d      	bcs.n	80024d8 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80024bc:	883a      	ldrh	r2, [r7, #0]
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d901      	bls.n	80024c8 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e014      	b.n	80024f2 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	883b      	ldrh	r3, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d901      	bls.n	80024d4 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00e      	b.n	80024f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e00c      	b.n	80024f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80024d8:	883a      	ldrh	r2, [r7, #0]
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d907      	bls.n	80024f0 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	883b      	ldrh	r3, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d901      	bls.n	80024ec <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e002      	b.n	80024f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80024f0:	2300      	movs	r3, #0
    }
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc90      	pop	{r4, r7}
 80024fa:	4770      	bx	lr

080024fc <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002522:	8b3b      	ldrh	r3, [r7, #24]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	f7ff ffb6 	bl	8002496 <u8g2_is_intersection_decision_tree>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <u8g2_IsIntersection+0x38>
    return 0; 
 8002530:	2300      	movs	r3, #0
 8002532:	e00a      	b.n	800254a <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	897a      	ldrh	r2, [r7, #10]
 8002544:	f7ff ffa7 	bl	8002496 <u8g2_is_intersection_decision_tree>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002552:	b480      	push	{r7}
 8002554:	b089      	sub	sp, #36	@ 0x24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	4608      	mov	r0, r1
 800255c:	4611      	mov	r1, r2
 800255e:	461a      	mov	r2, r3
 8002560:	4603      	mov	r3, r0
 8002562:	817b      	strh	r3, [r7, #10]
 8002564:	460b      	mov	r3, r1
 8002566:	813b      	strh	r3, [r7, #8]
 8002568:	4613      	mov	r3, r2
 800256a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002570:	7efb      	ldrb	r3, [r7, #27]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002578:	2301      	movs	r3, #1
 800257a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800257c:	7e3a      	ldrb	r2, [r7, #24]
 800257e:	7efb      	ldrb	r3, [r7, #27]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002594:	2b01      	cmp	r3, #1
 8002596:	d801      	bhi.n	800259c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002598:	7e3b      	ldrb	r3, [r7, #24]
 800259a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80025a6:	7e3b      	ldrb	r3, [r7, #24]
 80025a8:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80025ae:	8afb      	ldrh	r3, [r7, #22]
 80025b0:	f023 0307 	bic.w	r3, r3, #7
 80025b4:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	7c1b      	ldrb	r3, [r3, #16]
 80025bc:	461a      	mov	r2, r3
 80025be:	8afb      	ldrh	r3, [r7, #22]
 80025c0:	fb13 f302 	smulbb	r3, r3, r2
 80025c4:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ca:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80025cc:	8afb      	ldrh	r3, [r7, #22]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80025d4:	897b      	ldrh	r3, [r7, #10]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80025dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d117      	bne.n	8002614 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	7ebb      	ldrb	r3, [r7, #26]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	7e7b      	ldrb	r3, [r7, #25]
 80025f8:	4053      	eors	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3301      	adds	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
	len--;
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	3b01      	subs	r3, #1
 800260a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e8      	bne.n	80025e4 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002612:	e038      	b.n	8002686 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	7ebb      	ldrb	r3, [r7, #26]
 800261a:	4313      	orrs	r3, r2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	7e7b      	ldrb	r3, [r7, #25]
 8002628:	4053      	eors	r3, r2
 800262a:	b2da      	uxtb	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002630:	7efb      	ldrb	r3, [r7, #27]
 8002632:	3301      	adds	r3, #1
 8002634:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002636:	7efb      	ldrb	r3, [r7, #27]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	76fb      	strb	r3, [r7, #27]
      len--;
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	3b01      	subs	r3, #1
 8002642:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002644:	7efb      	ldrb	r3, [r7, #27]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d114      	bne.n	8002674 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800264e:	461a      	mov	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800265c:	2b01      	cmp	r3, #1
 800265e:	d801      	bhi.n	8002664 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800266a:	2b01      	cmp	r3, #1
 800266c:	d008      	beq.n	8002680 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	767b      	strb	r3, [r7, #25]
 8002672:	e005      	b.n	8002680 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002674:	7ebb      	ldrb	r3, [r7, #26]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800267a:	7e7b      	ldrb	r3, [r7, #25]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1c6      	bne.n	8002614 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002686:	bf00      	nop
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	79fa      	ldrb	r2, [r7, #7]
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ffa9 	bl	8002692 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff fd6d 	bl	8002220 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800276a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	89fa      	ldrh	r2, [r7, #14]
 8002776:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	7c1b      	ldrb	r3, [r3, #16]
 800277c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800277e:	89fb      	ldrh	r3, [r7, #14]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	89fa      	ldrh	r2, [r7, #14]
 8002788:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002790:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	89fa      	ldrh	r2, [r7, #14]
 800279c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027a4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80027ae:	4413      	add	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	7c52      	ldrb	r2, [r2, #17]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	dd07      	ble.n	80027c8 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	7c5b      	ldrb	r3, [r3, #17]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	4413      	add	r3, r2
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	8a9a      	ldrh	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	8ada      	ldrh	r2, [r3, #22]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af02      	add	r7, sp, #8
 800281c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4603      	mov	r3, r0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fe5e 	bl	80024fc <u8g2_IsIntersection>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800284e:	e03b      	b.n	80028c8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002864:	429a      	cmp	r2, r3
 8002866:	d205      	bcs.n	8002874 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002880:	429a      	cmp	r2, r3
 8002882:	d905      	bls.n	8002890 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800289c:	429a      	cmp	r2, r3
 800289e:	d205      	bcs.n	80028ac <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d905      	bls.n	80028c8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff3c 	bl	8002756 <u8g2_update_dimension_common>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff7b 	bl	8002816 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002942:	88f8      	ldrh	r0, [r7, #6]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	7e3b      	ldrb	r3, [r7, #24]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4603      	mov	r3, r0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fcde 	bl	8002310 <u8g2_draw_hv_line_2dir>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <u8x8_utf8_next+0x18>
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d102      	bne.n	8002996 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002994:	e06e      	b.n	8002a74 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800299c:	2b00      	cmp	r3, #0
 800299e:	d145      	bne.n	8002a2c <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	2bfb      	cmp	r3, #251	@ 0xfb
 80029a4:	d908      	bls.n	80029b8 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2205      	movs	r2, #5
 80029aa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 1;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	70fb      	strb	r3, [r7, #3]
 80029b6:	e032      	b.n	8002a1e <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	2bf7      	cmp	r3, #247	@ 0xf7
 80029bc:	d908      	bls.n	80029d0 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2204      	movs	r2, #4
 80029c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 3;
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	e026      	b.n	8002a1e <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	2bef      	cmp	r3, #239	@ 0xef
 80029d4:	d908      	bls.n	80029e8 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 7;      
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	70fb      	strb	r3, [r7, #3]
 80029e6:	e01a      	b.n	8002a1e <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	2bdf      	cmp	r3, #223	@ 0xdf
 80029ec:	d908      	bls.n	8002a00 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 15;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	70fb      	strb	r3, [r7, #3]
 80029fe:	e00e      	b.n	8002a1e <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2bbf      	cmp	r3, #191	@ 0xbf
 8002a04:	d908      	bls.n	8002a18 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 0x01f;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	e002      	b.n	8002a1e <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	e02a      	b.n	8002a74 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002a26:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002a2a:	e023      	b.n	8002a74 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8c1b      	ldrh	r3, [r3, #32]
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a4e:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8c1a      	ldrh	r2, [r3, #32]
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002a6a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8002a6e:	e001      	b.n	8002a74 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8c1b      	ldrh	r3, [r3, #32]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691c      	ldr	r4, [r3, #16]
 8002a92:	7afa      	ldrb	r2, [r7, #11]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2117      	movs	r1, #23
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	47a0      	blx	r4
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd90      	pop	{r4, r7, pc}

08002aa6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002ab2:	1cfb      	adds	r3, r7, #3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffe1 	bl	8002a80 <u8x8_byte_SendBytes>
 8002abe:	4603      	mov	r3, r0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691c      	ldr	r4, [r3, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2118      	movs	r1, #24
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	47a0      	blx	r4
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691c      	ldr	r4, [r3, #16]
 8002af4:	2300      	movs	r3, #0
 8002af6:	2200      	movs	r2, #0
 8002af8:	2119      	movs	r1, #25
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	47a0      	blx	r4
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68dc      	ldr	r4, [r3, #12]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2115      	movs	r1, #21
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	47a0      	blx	r4
 8002b22:	4603      	mov	r3, r0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}

08002b2c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68dc      	ldr	r4, [r3, #12]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2116      	movs	r1, #22
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	47a0      	blx	r4
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68dc      	ldr	r4, [r3, #12]
 8002b62:	7afa      	ldrb	r2, [r7, #11]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2117      	movs	r1, #23
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	47a0      	blx	r4
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68dc      	ldr	r4, [r3, #12]
 8002b82:	2300      	movs	r3, #0
 8002b84:	2200      	movs	r2, #0
 8002b86:	2118      	movs	r1, #24
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	47a0      	blx	r4
 8002b8c:	4603      	mov	r3, r0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}

08002b96 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002b96:	b590      	push	{r4, r7, lr}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68dc      	ldr	r4, [r3, #12]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2119      	movs	r1, #25
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	47a0      	blx	r4
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}

08002bb6 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002bb6:	b590      	push	{r4, r7, lr}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	73fb      	strb	r3, [r7, #15]
    data++;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2bfe      	cmp	r3, #254	@ 0xfe
 8002bd0:	d031      	beq.n	8002c36 <u8x8_cad_SendSequence+0x80>
 8002bd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8002bd4:	dc3d      	bgt.n	8002c52 <u8x8_cad_SendSequence+0x9c>
 8002bd6:	2b19      	cmp	r3, #25
 8002bd8:	dc3b      	bgt.n	8002c52 <u8x8_cad_SendSequence+0x9c>
 8002bda:	2b18      	cmp	r3, #24
 8002bdc:	da23      	bge.n	8002c26 <u8x8_cad_SendSequence+0x70>
 8002bde:	2b16      	cmp	r3, #22
 8002be0:	dc02      	bgt.n	8002be8 <u8x8_cad_SendSequence+0x32>
 8002be2:	2b15      	cmp	r3, #21
 8002be4:	da03      	bge.n	8002bee <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002be6:	e034      	b.n	8002c52 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002be8:	2b17      	cmp	r3, #23
 8002bea:	d00e      	beq.n	8002c0a <u8x8_cad_SendSequence+0x54>
	return;
 8002bec:	e031      	b.n	8002c52 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68dc      	ldr	r4, [r3, #12]
 8002bf8:	7bba      	ldrb	r2, [r7, #14]
 8002bfa:	7bf9      	ldrb	r1, [r7, #15]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	47a0      	blx	r4
	  data++;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	603b      	str	r3, [r7, #0]
	  break;
 8002c08:	e022      	b.n	8002c50 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c10:	f107 030e 	add.w	r3, r7, #14
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff99 	bl	8002b50 <u8x8_cad_SendData>
	  data++;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	603b      	str	r3, [r7, #0]
	  break;
 8002c24:	e014      	b.n	8002c50 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68dc      	ldr	r4, [r3, #12]
 8002c2a:	7bf9      	ldrb	r1, [r7, #15]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2200      	movs	r2, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	47a0      	blx	r4
	  break;
 8002c34:	e00c      	b.n	8002c50 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2129      	movs	r1, #41	@ 0x29
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa2d 	bl	80030a2 <u8x8_gpio_call>
	  data++;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	603b      	str	r3, [r7, #0]
	  break;
 8002c4e:	bf00      	nop
    cmd = *data;
 8002c50:	e7b6      	b.n	8002bc0 <u8x8_cad_SendSequence+0xa>
	return;
 8002c52:	bf00      	nop
    }
  }
}
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}

08002c5a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	460b      	mov	r3, r1
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff ff2d 	bl	8002ac8 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002c6e:	2140      	movs	r1, #64	@ 0x40
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff ff18 	bl	8002aa6 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691c      	ldr	r4, [r3, #16]
 8002c7a:	7afa      	ldrb	r2, [r7, #11]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2117      	movs	r1, #23
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff ff2f 	bl	8002ae8 <u8x8_byte_EndTransfer>
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}
	...

08002c94 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	72fb      	strb	r3, [r7, #11]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	3b14      	subs	r3, #20
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d86e      	bhi.n	8002d8c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002d4b 	.word	0x08002d4b
 8002cb8:	08002ccd 	.word	0x08002ccd
 8002cbc:	08002cfb 	.word	0x08002cfb
 8002cc0:	08002d07 	.word	0x08002d07
 8002cc4:	08002d6f 	.word	0x08002d6f
 8002cc8:	08002d77 	.word	0x08002d77
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002ccc:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <u8x8_cad_ssd13xx_fast_i2c+0x46>
    	  u8x8_byte_EndTransfer(u8x8);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ff07 	bl	8002ae8 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fef4 	bl	8002ac8 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fedf 	bl	8002aa6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002ce8:	7abb      	ldrb	r3, [r7, #10]
 8002cea:	4619      	mov	r1, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f7ff feda 	bl	8002aa6 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002cf8:	e04a      	b.n	8002d90 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002cfa:	7abb      	ldrb	r3, [r7, #10]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff fed1 	bl	8002aa6 <u8x8_byte_SendByte>
      break;      
 8002d04:	e044      	b.n	8002d90 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002d06:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff feea 	bl	8002ae8 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d18:	e00a      	b.n	8002d30 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff ff9b 	bl	8002c5a <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002d24:	7abb      	ldrb	r3, [r7, #10]
 8002d26:	3b18      	subs	r3, #24
 8002d28:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d30:	7abb      	ldrb	r3, [r7, #10]
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d8f1      	bhi.n	8002d1a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002d36:	7abb      	ldrb	r3, [r7, #10]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff ff8c 	bl	8002c5a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002d42:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e022      	b.n	8002d90 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d50:	2bff      	cmp	r3, #255	@ 0xff
 8002d52:	d103      	bne.n	8002d5c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    	  u8x8->i2c_address = 0x078;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2278      	movs	r2, #120	@ 0x78
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691c      	ldr	r4, [r3, #16]
 8002d60:	7aba      	ldrb	r2, [r7, #10]
 8002d62:	7af9      	ldrb	r1, [r7, #11]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	47a0      	blx	r4
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	e011      	b.n	8002d92 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
      break;
 8002d74:	e00c      	b.n	8002d90 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff feb2 	bl	8002ae8 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
      break;
 8002d8a:	e001      	b.n	8002d90 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200003f4 	.word	0x200003f4

08002da0 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	72fb      	strb	r3, [r7, #11]
 8002dae:	4613      	mov	r3, r2
 8002db0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	3b0a      	subs	r3, #10
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	f200 8090 	bhi.w	8002edc <u8x8_d_ssd1306_128x32_generic+0x13c>
 8002dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <u8x8_d_ssd1306_128x32_generic+0x24>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002edd 	.word	0x08002edd
 8002dd0:	08002e07 	.word	0x08002e07
 8002dd4:	08002e39 	.word	0x08002e39
 8002dd8:	08002e59 	.word	0x08002e59
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f8c3 	bl	8002f68 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8002de2:	4942      	ldr	r1, [pc, #264]	@ (8002eec <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fee6 	bl	8002bb6 <u8x8_cad_SendSequence>
      break;
 8002dea:	e079      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002dec:	7abb      	ldrb	r3, [r7, #10]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8002df2:	493f      	ldr	r1, [pc, #252]	@ (8002ef0 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fede 	bl	8002bb6 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8002dfa:	e071      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8002dfc:	493d      	ldr	r1, [pc, #244]	@ (8002ef4 <u8x8_d_ssd1306_128x32_generic+0x154>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff fed9 	bl	8002bb6 <u8x8_cad_SendSequence>
      break;
 8002e04:	e06c      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8002e0c:	493a      	ldr	r1, [pc, #232]	@ (8002ef8 <u8x8_d_ssd1306_128x32_generic+0x158>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fed1 	bl	8002bb6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	7c9a      	ldrb	r2, [r3, #18]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002e20:	e05e      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8002e22:	4936      	ldr	r1, [pc, #216]	@ (8002efc <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fec6 	bl	8002bb6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	7cda      	ldrb	r2, [r3, #19]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8002e36:	e053      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fe9c 	bl	8002b76 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002e3e:	2181      	movs	r1, #129	@ 0x81
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff fe61 	bl	8002b08 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fe6e 	bl	8002b2c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fea0 	bl	8002b96 <u8x8_cad_EndTransfer>
      break;
 8002e56:	e043      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fe8c 	bl	8002b76 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	795b      	ldrb	r3, [r3, #5]
 8002e62:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	4413      	add	r3, r2
 8002e74:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f043 0310 	orr.w	r3, r3, #16
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff fe3f 	bl	8002b08 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff fe37 	bl	8002b08 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff fe2e 	bl	8002b08 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002eb8:	7dbb      	ldrb	r3, [r7, #22]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fe44 	bl	8002b50 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002ec8:	7abb      	ldrb	r3, [r7, #10]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002ece:	7abb      	ldrb	r3, [r7, #10]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1eb      	bne.n	8002eac <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fe5e 	bl	8002b96 <u8x8_cad_EndTransfer>
      break;
 8002eda:	e001      	b.n	8002ee0 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8002ee0:	2301      	movs	r3, #1
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	08007400 	.word	0x08007400
 8002ef0:	08007438 	.word	0x08007438
 8002ef4:	08007440 	.word	0x08007440
 8002ef8:	08007448 	.word	0x08007448
 8002efc:	08007450 	.word	0x08007450

08002f00 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	72fb      	strb	r3, [r7, #11]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	2b09      	cmp	r3, #9
 8002f16:	d105      	bne.n	8002f24 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8002f18:	4908      	ldr	r1, [pc, #32]	@ (8002f3c <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f810 	bl	8002f40 <u8x8_d_helper_display_setup_memory>
      return 1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e006      	b.n	8002f32 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8002f24:	7aba      	ldrb	r2, [r7, #10]
 8002f26:	7af9      	ldrb	r1, [r7, #11]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff ff38 	bl	8002da0 <u8x8_d_ssd1306_128x32_generic>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08007458 	.word	0x08007458

08002f40 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	7c9a      	ldrb	r2, [r3, #18]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695c      	ldr	r4, [r3, #20]
 8002f74:	2300      	movs	r3, #0
 8002f76:	2200      	movs	r2, #0
 8002f78:	2128      	movs	r1, #40	@ 0x28
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68dc      	ldr	r4, [r3, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	2200      	movs	r2, #0
 8002f86:	2114      	movs	r1, #20
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	214b      	movs	r1, #75	@ 0x4b
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f886 	bl	80030a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2129      	movs	r1, #41	@ 0x29
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f87e 	bl	80030a2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	214b      	movs	r1, #75	@ 0x4b
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f879 	bl	80030a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	791b      	ldrb	r3, [r3, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2129      	movs	r1, #41	@ 0x29
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f871 	bl	80030a2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	214b      	movs	r1, #75	@ 0x4b
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f86c 	bl	80030a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	795b      	ldrb	r3, [r3, #5]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2129      	movs	r1, #41	@ 0x29
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f864 	bl	80030a2 <u8x8_gpio_call>
}    
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}

08002fe2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002fe2:	b590      	push	{r4, r7, lr}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	4608      	mov	r0, r1
 8002fec:	4611      	mov	r1, r2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	70fb      	strb	r3, [r7, #3]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70bb      	strb	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003000:	78bb      	ldrb	r3, [r7, #2]
 8003002:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689c      	ldr	r4, [r3, #8]
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	2201      	movs	r2, #1
 8003016:	210f      	movs	r1, #15
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	47a0      	blx	r4
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}

08003026 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003026:	b590      	push	{r4, r7, lr}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689c      	ldr	r4, [r3, #8]
 8003032:	2300      	movs	r3, #0
 8003034:	2200      	movs	r2, #0
 8003036:	2109      	movs	r1, #9
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	47a0      	blx	r4
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}

08003044 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689c      	ldr	r4, [r3, #8]
 8003050:	2300      	movs	r3, #0
 8003052:	2200      	movs	r2, #0
 8003054:	210a      	movs	r1, #10
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}

08003062 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689c      	ldr	r4, [r3, #8]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	2300      	movs	r3, #0
 8003076:	210b      	movs	r1, #11
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	47a0      	blx	r4
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}

08003084 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689c      	ldr	r4, [r3, #8]
 8003090:	2300      	movs	r3, #0
 8003092:	2200      	movs	r2, #0
 8003094:	2110      	movs	r1, #16
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	47a0      	blx	r4
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd90      	pop	{r4, r7, pc}

080030a2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80030a2:	b590      	push	{r4, r7, lr}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
 80030ae:	4613      	mov	r3, r2
 80030b0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695c      	ldr	r4, [r3, #20]
 80030b6:	78ba      	ldrb	r2, [r7, #2]
 80030b8:	78f9      	ldrb	r1, [r7, #3]
 80030ba:	2300      	movs	r3, #0
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	47a0      	blx	r4
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}

080030c8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
 80030d6:	4613      	mov	r3, r2
 80030d8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a11      	ldr	r2, [pc, #68]	@ (8003140 <u8x8_SetupDefaults+0x58>)
 80030fa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a10      	ldr	r2, [pc, #64]	@ (8003140 <u8x8_SetupDefaults+0x58>)
 8003100:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0e      	ldr	r2, [pc, #56]	@ (8003140 <u8x8_SetupDefaults+0x58>)
 8003106:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <u8x8_SetupDefaults+0x58>)
 800310c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	22ff      	movs	r2, #255	@ 0xff
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	22ff      	movs	r2, #255	@ 0xff
 8003130:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	080030c9 	.word	0x080030c9

08003144 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ffc8 	bl	80030e8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff ff58 	bl	8003026 <u8x8_SetupMemory>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <u8x8_byte_hw_i2c>:
extern I2C_HandleTypeDef hi2c3;

static uint8_t u8g2Buffer[25] = {0};
static uint8_t u8g2BufferCounter = 0;

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	72fb      	strb	r3, [r7, #11]
 800318e:	4613      	mov	r3, r2
 8003190:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	3b14      	subs	r3, #20
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d845      	bhi.n	8003226 <u8x8_byte_hw_i2c+0xa6>
 800319a:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <u8x8_byte_hw_i2c+0x20>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	0800322b 	.word	0x0800322b
 80031a4:	08003227 	.word	0x08003227
 80031a8:	08003227 	.word	0x08003227
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031f9 	.word	0x080031f9
 80031b4:	08003201 	.word	0x08003201
 80031b8:	08003227 	.word	0x08003227
 80031bc:	08003227 	.word	0x08003227
 80031c0:	08003227 	.word	0x08003227
 80031c4:	08003227 	.word	0x08003227
 80031c8:	08003227 	.word	0x08003227
 80031cc:	08003227 	.word	0x08003227
 80031d0:	0800322b 	.word	0x0800322b
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SEND:
        	memcpy(u8g2Buffer + u8g2BufferCounter, arg_ptr, arg_int);
 80031d4:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <u8x8_byte_hw_i2c+0xb8>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <u8x8_byte_hw_i2c+0xbc>)
 80031dc:	4413      	add	r3, r2
 80031de:	7aba      	ldrb	r2, [r7, #10]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 f952 	bl	800548c <memcpy>
        	u8g2BufferCounter += arg_int;
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <u8x8_byte_hw_i2c+0xb8>)
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	7abb      	ldrb	r3, [r7, #10]
 80031ee:	4413      	add	r3, r2
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <u8x8_byte_hw_i2c+0xb8>)
 80031f4:	701a      	strb	r2, [r3, #0]
        	break;
 80031f6:	e019      	b.n	800322c <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_SET_DC:

        	break;
        case U8X8_MSG_BYTE_START_TRANSFER:
        	u8g2BufferCounter = 0;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <u8x8_byte_hw_i2c+0xb8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
        	break;
 80031fe:	e015      	b.n	800322c <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_END_TRANSFER:
        	return  HAL_OK ==  HAL_I2C_Master_Transmit(&hi2c3, (0x3C << 1), (uint8_t*)u8g2Buffer, u8g2BufferCounter, HAL_MAX_DELAY);
 8003200:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <u8x8_byte_hw_i2c+0xb8>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <u8x8_byte_hw_i2c+0xbc>)
 8003210:	2178      	movs	r1, #120	@ 0x78
 8003212:	480b      	ldr	r0, [pc, #44]	@ (8003240 <u8x8_byte_hw_i2c+0xc0>)
 8003214:	f000 fdee 	bl	8003df4 <HAL_I2C_Master_Transmit>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e003      	b.n	800322e <u8x8_byte_hw_i2c+0xae>
        default:
        	return 0;
 8003226:	2300      	movs	r3, #0
 8003228:	e001      	b.n	800322e <u8x8_byte_hw_i2c+0xae>
            break;
 800322a:	bf00      	nop
    }

    return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000411 	.word	0x20000411
 800323c:	200003f8 	.word	0x200003f8
 8003240:	20000078 	.word	0x20000078

08003244 <u8x8_gpio_and_delay_stm32>:
    }

    return 1;
}

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	72fb      	strb	r3, [r7, #11]
 8003252:	4613      	mov	r3, r2
 8003254:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	2b2c      	cmp	r3, #44	@ 0x2c
 800325a:	dc0d      	bgt.n	8003278 <u8x8_gpio_and_delay_stm32+0x34>
 800325c:	2b2b      	cmp	r3, #43	@ 0x2b
 800325e:	da08      	bge.n	8003272 <u8x8_gpio_and_delay_stm32+0x2e>
 8003260:	2b28      	cmp	r3, #40	@ 0x28
 8003262:	d008      	beq.n	8003276 <u8x8_gpio_and_delay_stm32+0x32>
 8003264:	2b29      	cmp	r3, #41	@ 0x29
 8003266:	d107      	bne.n	8003278 <u8x8_gpio_and_delay_stm32+0x34>
    	case U8X8_MSG_GPIO_AND_DELAY_INIT:
    		break;
        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
 8003268:	7abb      	ldrb	r3, [r7, #10]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f97a 	bl	8003564 <HAL_Delay>
            break;
 8003270:	e002      	b.n	8003278 <u8x8_gpio_and_delay_stm32+0x34>
        case U8X8_MSG_DELAY_NANO:
        case U8X8_MSG_DELAY_100NANO:
            __NOP();
 8003272:	bf00      	nop
            break;
 8003274:	e000      	b.n	8003278 <u8x8_gpio_and_delay_stm32+0x34>
    		break;
 8003276:	bf00      	nop
    }

    return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <drawBatteryIndicator>:
 */

#include "ui_controls.h"
#include "resources.h"

void drawBatteryIndicator(u8g2_t *u8g2, int x, int y, uint8_t level) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	70fb      	strb	r3, [r7, #3]
    u8g2_DrawFrame(u8g2, x, y, 16, 8);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	b299      	uxth	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	b29a      	uxth	r2, r3
 800329a:	2308      	movs	r3, #8
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2310      	movs	r3, #16
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7fe f92e 	bl	8001502 <u8g2_DrawFrame>
    u8g2_DrawBox(u8g2, x + 16, y + 2, 2, 4);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3310      	adds	r3, #16
 80032ac:	b299      	uxth	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3302      	adds	r3, #2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	2304      	movs	r3, #4
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2302      	movs	r3, #2
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7fe f8ea 	bl	8001496 <u8g2_DrawBox>
    int fillWidth = (level * 14) / 100;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003308 <drawBatteryIndicator+0x84>)
 80032ce:	fb82 1203 	smull	r1, r2, r2, r3
 80032d2:	1152      	asrs	r2, r2, #5
 80032d4:	17db      	asrs	r3, r3, #31
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    if (fillWidth > 0) u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	dd0e      	ble.n	80032fe <drawBatteryIndicator+0x7a>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	b299      	uxth	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2006      	movs	r0, #6
 80032f6:	9000      	str	r0, [sp, #0]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fe f8cc 	bl	8001496 <u8g2_DrawBox>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <drawSoundIcon>:


    u8g2_SetDrawColor(u8g2, currentColor);
}

void drawSoundIcon(u8g2_t *u8g2, uint8_t x, uint8_t y, bool enabled) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	70fb      	strb	r3, [r7, #3]
 800331e:	460b      	mov	r3, r1
 8003320:	70bb      	strb	r3, [r7, #2]
 8003322:	4613      	mov	r3, r2
 8003324:	707b      	strb	r3, [r7, #1]
    if (enabled) {
 8003326:	787b      	ldrb	r3, [r7, #1]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <drawSoundIcon+0x3a>
        u8g2_DrawXBMP(u8g2, x, y, sound_off_image_width, sound_off_image_height, sound_off_image_bits);
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	b299      	uxth	r1, r3
 8003330:	78bb      	ldrb	r3, [r7, #2]
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <drawSoundIcon+0x5c>)
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2308      	movs	r3, #8
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2310      	movs	r3, #16
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f866 	bl	8001410 <u8g2_DrawXBMP>
    } else {
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
    }
}
 8003344:	e00b      	b.n	800335e <drawSoundIcon+0x52>
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	b299      	uxth	r1, r3
 800334a:	78bb      	ldrb	r3, [r7, #2]
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b07      	ldr	r3, [pc, #28]	@ (800336c <drawSoundIcon+0x60>)
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2308      	movs	r3, #8
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2310      	movs	r3, #16
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe f859 	bl	8001410 <u8g2_DrawXBMP>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	080058e4 	.word	0x080058e4
 800336c:	080058d4 	.word	0x080058d4

08003370 <drawAlertIcon>:

void drawAlertIcon(u8g2_t *u8g2, uint8_t x, uint8_t y) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af02      	add	r7, sp, #8
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(u8g2, 0);
 8003380:	2100      	movs	r1, #0
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff f870 	bl	8002468 <u8g2_SetDrawColor>
    u8g2_DrawXBMP(u8g2, x, y, alert_width, alert_height, alert_bits);
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	b299      	uxth	r1, r3
 800338c:	78bb      	ldrb	r3, [r7, #2]
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <drawAlertIcon+0x38>)
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	230e      	movs	r3, #14
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe f838 	bl	8001410 <u8g2_DrawXBMP>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	080057f4 	.word	0x080057f4

080033ac <drawMainScreen>:
	u8g2_ClearBuffer(u8g2);
	u8g2_DrawXBMP(u8g2, 0, 0, logo_image_width, logo_image_height, logo_image_bits);
	u8g2_SendBuffer(u8g2);
}

void drawMainScreen(u8g2_t *u8g2, int batteryLevel, bool soundEnabled, bool isScanning, bool alertState) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	460b      	mov	r3, r1
 80033bc:	71fb      	strb	r3, [r7, #7]
 80033be:	4613      	mov	r3, r2
 80033c0:	71bb      	strb	r3, [r7, #6]
  const uint8_t listStartY = 19;
 80033c2:	2313      	movs	r3, #19
 80033c4:	75fb      	strb	r3, [r7, #23]
  const uint8_t itemHeight = 8;
 80033c6:	2308      	movs	r3, #8
 80033c8:	75bb      	strb	r3, [r7, #22]
  uint8_t y = listStartY;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	757b      	strb	r3, [r7, #21]


  u8g2_SetDrawColor(u8g2, 1);
 80033ce:	2101      	movs	r1, #1
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff f849 	bl	8002468 <u8g2_SetDrawColor>
  drawBatteryIndicator(u8g2, 108, 0, batteryLevel);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	216c      	movs	r1, #108	@ 0x6c
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff ff50 	bl	8003284 <drawBatteryIndicator>
  drawSoundIcon(u8g2, 88, 0, soundEnabled);
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2158      	movs	r1, #88	@ 0x58
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff ff8e 	bl	800330c <drawSoundIcon>
  u8g2_SetFont(u8g2, u8g2_font_6x12_t_cyrillic);
 80033f0:	4920      	ldr	r1, [pc, #128]	@ (8003474 <drawMainScreen+0xc8>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fe ff24 	bl	8002240 <u8g2_SetFont>

  if (isScanning) {
 80033f8:	79bb      	ldrb	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <drawMainScreen+0x94>
    u8g2_SetDrawColor(u8g2, 1);
 80033fe:	2101      	movs	r1, #1
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff f831 	bl	8002468 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, 0, y - itemHeight-2, 128, itemHeight+1);
 8003406:	7d7b      	ldrb	r3, [r7, #21]
 8003408:	b29a      	uxth	r2, r3
 800340a:	7dbb      	ldrb	r3, [r7, #22]
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b02      	subs	r3, #2
 8003414:	b29a      	uxth	r2, r3
 8003416:	7dbb      	ldrb	r3, [r7, #22]
 8003418:	b29b      	uxth	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	2100      	movs	r1, #0
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7fe f836 	bl	8001496 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, 0);
 800342a:	2100      	movs	r1, #0
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff f81b 	bl	8002468 <u8g2_SetDrawColor>
    u8g2_DrawUTF8(u8g2, 1, 17, "Сканування...");
 8003432:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <drawMainScreen+0xcc>)
 8003434:	2211      	movs	r2, #17
 8003436:	2101      	movs	r1, #1
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7fe fe5f 	bl	80020fc <u8g2_DrawUTF8>
 800343e:	e009      	b.n	8003454 <drawMainScreen+0xa8>
  } else {
    u8g2_SetDrawColor(u8g2, 1);
 8003440:	2101      	movs	r1, #1
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff f810 	bl	8002468 <u8g2_SetDrawColor>
    u8g2_DrawUTF8(u8g2, 1, 17, "Обраний канал:");
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <drawMainScreen+0xd0>)
 800344a:	2211      	movs	r2, #17
 800344c:	2101      	movs	r1, #1
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7fe fe54 	bl	80020fc <u8g2_DrawUTF8>
  }

  y = y - 1;
 8003454:	7d7b      	ldrb	r3, [r7, #21]
 8003456:	3b01      	subs	r3, #1
 8003458:	757b      	strb	r3, [r7, #21]
//
//    }
//
//  }

  if (alertState) {
 800345a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <drawMainScreen+0xc0>
	  drawAlertIcon(u8g2, 0, 51);
 8003462:	2233      	movs	r2, #51	@ 0x33
 8003464:	2100      	movs	r1, #0
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff ff82 	bl	8003370 <drawAlertIcon>
  }
}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	080061a0 	.word	0x080061a0
 8003478:	080058f4 	.word	0x080058f4
 800347c:	0800590c 	.word	0x0800590c

08003480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	@ (80034c0 <HAL_Init+0x40>)
 800348a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800348e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_Init+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <HAL_Init+0x40>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800349a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349c:	4b08      	ldr	r3, [pc, #32]	@ (80034c0 <HAL_Init+0x40>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a07      	ldr	r2, [pc, #28]	@ (80034c0 <HAL_Init+0x40>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f000 f94f 	bl	800374c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f000 f808 	bl	80034c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b4:	f7fd fb1c 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023c00 	.word	0x40023c00

080034c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_InitTick+0x54>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_InitTick+0x58>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f967 	bl	80037b6 <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d80a      	bhi.n	800350e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003500:	f000 f92f 	bl	8003762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003504:	4a06      	ldr	r2, [pc, #24]	@ (8003520 <HAL_InitTick+0x5c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000000 	.word	0x20000000
 800351c:	20000008 	.word	0x20000008
 8003520:	20000004 	.word	0x20000004

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000008 	.word	0x20000008
 8003548:	20000414 	.word	0x20000414

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000414 	.word	0x20000414

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000008 	.word	0x20000008

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035de:	4a04      	ldr	r2, [pc, #16]	@ (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	60d3      	str	r3, [r2, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	@ (8003648 <__NVIC_EnableIRQ+0x38>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	db0a      	blt.n	8003676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	490c      	ldr	r1, [pc, #48]	@ (8003698 <__NVIC_SetPriority+0x4c>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	440b      	add	r3, r1
 8003670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003674:	e00a      	b.n	800368c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4908      	ldr	r1, [pc, #32]	@ (800369c <__NVIC_SetPriority+0x50>)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	3b04      	subs	r3, #4
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	440b      	add	r3, r1
 800368a:	761a      	strb	r2, [r3, #24]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f1c3 0307 	rsb	r3, r3, #7
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf28      	it	cs
 80036be:	2304      	movcs	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d902      	bls.n	80036d0 <NVIC_EncodePriority+0x30>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b03      	subs	r3, #3
 80036ce:	e000      	b.n	80036d2 <NVIC_EncodePriority+0x32>
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	4313      	orrs	r3, r2
         );
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003718:	d301      	bcc.n	800371e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371a:	2301      	movs	r3, #1
 800371c:	e00f      	b.n	800373e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <SysTick_Config+0x40>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003726:	210f      	movs	r1, #15
 8003728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800372c:	f7ff ff8e 	bl	800364c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003730:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <SysTick_Config+0x40>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003736:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <SysTick_Config+0x40>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	e000e010 	.word	0xe000e010

0800374c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff29 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003774:	f7ff ff3e 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7ff ff8e 	bl	80036a0 <NVIC_EncodePriority>
 8003784:	4602      	mov	r2, r0
 8003786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff5d 	bl	800364c <__NVIC_SetPriority>
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff31 	bl	8003610 <__NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ffa2 	bl	8003708 <SysTick_Config>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e159      	b.n	8003aa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	429a      	cmp	r2, r3
 8003806:	f040 8148 	bne.w	8003a9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d005      	beq.n	8003822 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381e:	2b02      	cmp	r3, #2
 8003820:	d130      	bne.n	8003884 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d017      	beq.n	80038c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d123      	bne.n	8003914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	220f      	movs	r2, #15
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08da      	lsrs	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	69b9      	ldr	r1, [r7, #24]
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0203 	and.w	r2, r3, #3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a2 	beq.w	8003a9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b57      	ldr	r3, [pc, #348]	@ (8003ab8 <HAL_GPIO_Init+0x2e8>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	4a56      	ldr	r2, [pc, #344]	@ (8003ab8 <HAL_GPIO_Init+0x2e8>)
 8003960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003964:	6453      	str	r3, [r2, #68]	@ 0x44
 8003966:	4b54      	ldr	r3, [pc, #336]	@ (8003ab8 <HAL_GPIO_Init+0x2e8>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003972:	4a52      	ldr	r2, [pc, #328]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a49      	ldr	r2, [pc, #292]	@ (8003ac0 <HAL_GPIO_Init+0x2f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x202>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a48      	ldr	r2, [pc, #288]	@ (8003ac4 <HAL_GPIO_Init+0x2f4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x1fe>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a47      	ldr	r2, [pc, #284]	@ (8003ac8 <HAL_GPIO_Init+0x2f8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x1fa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a46      	ldr	r2, [pc, #280]	@ (8003acc <HAL_GPIO_Init+0x2fc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x1f6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a45      	ldr	r2, [pc, #276]	@ (8003ad0 <HAL_GPIO_Init+0x300>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x1f2>
 80039be:	2304      	movs	r3, #4
 80039c0:	e008      	b.n	80039d4 <HAL_GPIO_Init+0x204>
 80039c2:	2307      	movs	r3, #7
 80039c4:	e006      	b.n	80039d4 <HAL_GPIO_Init+0x204>
 80039c6:	2303      	movs	r3, #3
 80039c8:	e004      	b.n	80039d4 <HAL_GPIO_Init+0x204>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e002      	b.n	80039d4 <HAL_GPIO_Init+0x204>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_GPIO_Init+0x204>
 80039d2:	2300      	movs	r3, #0
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f002 0203 	and.w	r2, r2, #3
 80039da:	0092      	lsls	r2, r2, #2
 80039dc:	4093      	lsls	r3, r2
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e4:	4935      	ldr	r1, [pc, #212]	@ (8003abc <HAL_GPIO_Init+0x2ec>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	089b      	lsrs	r3, r3, #2
 80039ea:	3302      	adds	r3, #2
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039f2:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a16:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a40:	4a24      	ldr	r2, [pc, #144]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a46:	4b23      	ldr	r3, [pc, #140]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a70:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a94:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad4 <HAL_GPIO_Init+0x304>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	f67f aea2 	bls.w	80037ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3724      	adds	r7, #36	@ 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020c00 	.word	0x40020c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e001      	b.n	8003afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b24:	e003      	b.n	8003b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	041a      	lsls	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	619a      	str	r2, [r3, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b46:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b52:	4a05      	ldr	r2, [pc, #20]	@ (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc ff94 	bl	8000a88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40013c00 	.word	0x40013c00

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e12b      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fe2e 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	@ 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 f8da 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a81      	ldr	r2, [pc, #516]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a80      	ldr	r2, [pc, #512]	@ (8003de4 <HAL_I2C_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <HAL_I2C_Init+0x27c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e7      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a78      	ldr	r2, [pc, #480]	@ (8003dec <HAL_I2C_Init+0x280>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a69      	ldr	r2, [pc, #420]	@ (8003df0 <HAL_I2C_Init+0x284>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	495c      	ldr	r1, [pc, #368]	@ (8003de0 <HAL_I2C_Init+0x274>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d819      	bhi.n	8003ca8 <HAL_I2C_Init+0x13c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c88:	400b      	ands	r3, r1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_I2C_Init+0x138>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e59      	subs	r1, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	e051      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x168>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x18e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x196>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
 8003e04:	4613      	mov	r3, r2
 8003e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7ff fba0 	bl	800354c <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 80e0 	bne.w	8003fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	4970      	ldr	r1, [pc, #448]	@ (8003fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f964 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0d3      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_Master_Transmit+0x50>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0cc      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d007      	beq.n	8003e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a50      	ldr	r2, [pc, #320]	@ (8003fec <HAL_I2C_Master_Transmit+0x1f8>)
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f89c 	bl	8003ff0 <I2C_MasterRequestWrite>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08d      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ed8:	e066      	b.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fa22 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06b      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa19 	bl	80043b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01a      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d194      	bne.n	8003eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d006      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d003      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004018:	d108      	bne.n	800402c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e00b      	b.n	8004044 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	2b12      	cmp	r3, #18
 8004032:	d107      	bne.n	8004044 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f84f 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d103      	bne.n	8004074 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e035      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004090:	611a      	str	r2, [r3, #16]
 8004092:	e01b      	b.n	80040cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	11db      	asrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 030f 	orn	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	490e      	ldr	r1, [pc, #56]	@ (80040ec <I2C_MasterRequestWrite+0xfc>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f898 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e010      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4907      	ldr	r1, [pc, #28]	@ (80040f0 <I2C_MasterRequestWrite+0x100>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f888 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010008 	.word	0x00010008
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e048      	b.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800410c:	d044      	beq.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7ff fa1d 	bl	800354c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d139      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10d      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x56>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	e00c      	b.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	d116      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e023      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10d      	bne.n	80041be <I2C_WaitOnFlagUntilTimeout+0xca>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	e00c      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d093      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	e071      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004206:	d123      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e067      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004256:	d041      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7ff f978 	bl	800354c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d136      	bne.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e021      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10c      	bne.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e00b      	b.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f af6d 	bne.w	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f886 	bl	8004448 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7ff f8fd 	bl	800354c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	e034      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f83e 	bl	8004448 <I2C_IsAcknowledgeFailed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e034      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043dc:	d028      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7ff f8b5 	bl	800354c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d016      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d1c3      	bne.n	80043c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445e:	d11b      	bne.n	8004498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e267      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d075      	beq.n	80045b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044c6:	4b88      	ldr	r3, [pc, #544]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b85      	ldr	r3, [pc, #532]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b82      	ldr	r3, [pc, #520]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b7e      	ldr	r3, [pc, #504]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d157      	bne.n	80045b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e242      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x74>
 800450e:	4b76      	ldr	r3, [pc, #472]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a75      	ldr	r2, [pc, #468]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e01d      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x98>
 8004526:	4b70      	ldr	r3, [pc, #448]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6f      	ldr	r2, [pc, #444]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b6d      	ldr	r3, [pc, #436]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6c      	ldr	r2, [pc, #432]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 8004540:	4b69      	ldr	r3, [pc, #420]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a65      	ldr	r2, [pc, #404]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fff4 	bl	800354c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe fff0 	bl	800354c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e207      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b5b      	ldr	r3, [pc, #364]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xc0>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe ffe0 	bl	800354c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe ffdc 	bl	800354c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	@ 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1f3      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	4b51      	ldr	r3, [pc, #324]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0xe8>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d063      	beq.n	8004686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045be:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b47      	ldr	r3, [pc, #284]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d11c      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b44      	ldr	r3, [pc, #272]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d116      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1c7      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4937      	ldr	r1, [pc, #220]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	e03a      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004618:	4b34      	ldr	r3, [pc, #208]	@ (80046ec <HAL_RCC_OscConfig+0x244>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe ff95 	bl	800354c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe ff91 	bl	800354c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1a8      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004638:	4b2b      	ldr	r3, [pc, #172]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b28      	ldr	r3, [pc, #160]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4925      	ldr	r1, [pc, #148]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	e015      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <HAL_RCC_OscConfig+0x244>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fe ff74 	bl	800354c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004668:	f7fe ff70 	bl	800354c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e187      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d036      	beq.n	8004700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <HAL_RCC_OscConfig+0x248>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fe ff54 	bl	800354c <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a8:	f7fe ff50 	bl	800354c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e167      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x200>
 80046c6:	e01b      	b.n	8004700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c8:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_RCC_OscConfig+0x248>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ce:	f7fe ff3d 	bl	800354c <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	e00e      	b.n	80046f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d6:	f7fe ff39 	bl	800354c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d907      	bls.n	80046f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e150      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	42470000 	.word	0x42470000
 80046f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	4b88      	ldr	r3, [pc, #544]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ea      	bne.n	80046d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8097 	beq.w	800483c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b81      	ldr	r3, [pc, #516]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	4b7d      	ldr	r3, [pc, #500]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	4a7c      	ldr	r2, [pc, #496]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	@ 0x40
 800472e:	4b7a      	ldr	r3, [pc, #488]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	4b77      	ldr	r3, [pc, #476]	@ (800491c <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b74      	ldr	r3, [pc, #464]	@ (800491c <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a73      	ldr	r2, [pc, #460]	@ (800491c <HAL_RCC_OscConfig+0x474>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fe fef9 	bl	800354c <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475e:	f7fe fef5 	bl	800354c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e10c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x474>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x2ea>
 8004784:	4b64      	ldr	r3, [pc, #400]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	4a63      	ldr	r2, [pc, #396]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004790:	e01c      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x30c>
 800479a:	4b5f      	ldr	r3, [pc, #380]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a5e      	ldr	r2, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 80047b4:	4b58      	ldr	r3, [pc, #352]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a57      	ldr	r2, [pc, #348]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	4b55      	ldr	r3, [pc, #340]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a54      	ldr	r2, [pc, #336]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fe feba 	bl	800354c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fe feb6 	bl	800354c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0cb      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	4b49      	ldr	r3, [pc, #292]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ee      	beq.n	80047dc <HAL_RCC_OscConfig+0x334>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004800:	f7fe fea4 	bl	800354c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fe fea0 	bl	800354c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0b5      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	4b3e      	ldr	r3, [pc, #248]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ee      	bne.n	8004808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b39      	ldr	r3, [pc, #228]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	4a38      	ldr	r2, [pc, #224]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a1 	beq.w	8004988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004846:	4b34      	ldr	r3, [pc, #208]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b08      	cmp	r3, #8
 8004850:	d05c      	beq.n	800490c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d141      	bne.n	80048de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b31      	ldr	r3, [pc, #196]	@ (8004920 <HAL_RCC_OscConfig+0x478>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fe74 	bl	800354c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fe fe70 	bl	800354c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e087      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	019b      	lsls	r3, r3, #6
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	491b      	ldr	r1, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x478>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fe fe49 	bl	800354c <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048be:	f7fe fe45 	bl	800354c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e05c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d0:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x416>
 80048dc:	e054      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <HAL_RCC_OscConfig+0x478>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fe32 	bl	800354c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fe fe2e 	bl	800354c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e045      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_RCC_OscConfig+0x470>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x444>
 800490a:	e03d      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e038      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
 8004920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004924:	4b1b      	ldr	r3, [pc, #108]	@ (8004994 <HAL_RCC_OscConfig+0x4ec>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d028      	beq.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d121      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d11a      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800495a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0cc      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b68      	ldr	r3, [pc, #416]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d90c      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b65      	ldr	r3, [pc, #404]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b63      	ldr	r3, [pc, #396]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b8      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ec:	4b59      	ldr	r3, [pc, #356]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a58      	ldr	r2, [pc, #352]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4b53      	ldr	r3, [pc, #332]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a52      	ldr	r2, [pc, #328]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b50      	ldr	r3, [pc, #320]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	494d      	ldr	r1, [pc, #308]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d044      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b47      	ldr	r3, [pc, #284]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b3f      	ldr	r3, [pc, #252]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3b      	ldr	r3, [pc, #236]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e067      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b37      	ldr	r3, [pc, #220]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4934      	ldr	r1, [pc, #208]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fe fd60 	bl	800354c <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fe fd5c 	bl	800354c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b25      	ldr	r3, [pc, #148]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20c      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b22      	ldr	r3, [pc, #136]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e032      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4916      	ldr	r1, [pc, #88]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490e      	ldr	r1, [pc, #56]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1e:	f000 f821 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490a      	ldr	r1, [pc, #40]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a09      	ldr	r2, [pc, #36]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fcc0 	bl	80034c4 <HAL_InitTick>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00
 8004b54:	40023800 	.word	0x40023800
 8004b58:	08005960 	.word	0x08005960
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b094      	sub	sp, #80	@ 0x50
 8004b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7c:	4b79      	ldr	r3, [pc, #484]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 030c 	and.w	r3, r3, #12
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d00d      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	f200 80e1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x34>
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b96:	e0db      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b73      	ldr	r3, [pc, #460]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b9c:	e0db      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9e:	4b73      	ldr	r3, [pc, #460]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba2:	e0d8      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bae:	4b6d      	ldr	r3, [pc, #436]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bba:	4b6a      	ldr	r3, [pc, #424]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be8:	0150      	lsls	r0, r2, #5
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4621      	mov	r1, r4
 8004bf0:	1a51      	subs	r1, r2, r1
 8004bf2:	6139      	str	r1, [r7, #16]
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c12:	4651      	mov	r1, sl
 8004c14:	018a      	lsls	r2, r1, #6
 8004c16:	4651      	mov	r1, sl
 8004c18:	ebb2 0801 	subs.w	r8, r2, r1
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c36:	4690      	mov	r8, r2
 8004c38:	4699      	mov	r9, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb18 0303 	adds.w	r3, r8, r3
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	462b      	mov	r3, r5
 8004c44:	eb49 0303 	adc.w	r3, r9, r3
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c56:	4629      	mov	r1, r5
 8004c58:	024b      	lsls	r3, r1, #9
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c60:	4621      	mov	r1, r4
 8004c62:	024a      	lsls	r2, r1, #9
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c74:	f7fb faae 	bl	80001d4 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c80:	e058      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b38      	ldr	r3, [pc, #224]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	2300      	movs	r3, #0
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cae:	0150      	lsls	r0, r2, #5
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	00eb      	lsls	r3, r5, #3
 8004ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cea:	00e2      	lsls	r2, r4, #3
 8004cec:	4614      	mov	r4, r2
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb45 0303 	adc.w	r3, r5, r3
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	f7fb fa54 	bl	80001d4 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3750      	adds	r7, #80	@ 0x50
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000000 	.word	0x20000000

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	@ (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	08005970 	.word	0x08005970

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004db4:	f7ff ffdc 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0b5b      	lsrs	r3, r3, #13
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4903      	ldr	r1, [pc, #12]	@ (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	08005970 	.word	0x08005970

08004dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e042      	b.n	8004e70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb ff26 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	@ 0x24
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f82b 	bl	8004e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b0c0      	sub	sp, #256	@ 0x100
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ed0:	f021 010c 	bic.w	r1, r1, #12
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	6999      	ldr	r1, [r3, #24]
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	ea40 0301 	orr.w	r3, r0, r1
 8004efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b8f      	ldr	r3, [pc, #572]	@ (8005144 <UART_SetConfig+0x2cc>)
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d005      	beq.n	8004f18 <UART_SetConfig+0xa0>
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8d      	ldr	r3, [pc, #564]	@ (8005148 <UART_SetConfig+0x2d0>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d104      	bne.n	8004f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7ff ff4a 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f20:	e003      	b.n	8004f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f22:	f7ff ff31 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 8004f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f34:	f040 810c 	bne.w	8005150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f52:	415b      	adcs	r3, r3
 8004f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	eb12 0801 	adds.w	r8, r2, r1
 8004f60:	4629      	mov	r1, r5
 8004f62:	eb43 0901 	adc.w	r9, r3, r1
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7a:	4690      	mov	r8, r2
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	eb18 0303 	adds.w	r3, r8, r3
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f88:	462b      	mov	r3, r5
 8004f8a:	eb49 0303 	adc.w	r3, r9, r3
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	18db      	adds	r3, r3, r3
 8004faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fac:	4613      	mov	r3, r2
 8004fae:	eb42 0303 	adc.w	r3, r2, r3
 8004fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fbc:	f7fb f90a 	bl	80001d4 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4b61      	ldr	r3, [pc, #388]	@ (800514c <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	011c      	lsls	r4, r3, #4
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800500c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005010:	4692      	mov	sl, r2
 8005012:	469b      	mov	fp, r3
 8005014:	4643      	mov	r3, r8
 8005016:	eb1a 0303 	adds.w	r3, sl, r3
 800501a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800501e:	464b      	mov	r3, r9
 8005020:	eb4b 0303 	adc.w	r3, fp, r3
 8005024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800503c:	460b      	mov	r3, r1
 800503e:	18db      	adds	r3, r3, r3
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
 8005042:	4613      	mov	r3, r2
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	647b      	str	r3, [r7, #68]	@ 0x44
 800504a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800504e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005052:	f7fb f8bf 	bl	80001d4 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4611      	mov	r1, r2
 800505c:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <UART_SetConfig+0x2d4>)
 800505e:	fba3 2301 	umull	r2, r3, r3, r1
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2264      	movs	r2, #100	@ 0x64
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	1acb      	subs	r3, r1, r3
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005072:	4b36      	ldr	r3, [pc, #216]	@ (800514c <UART_SetConfig+0x2d4>)
 8005074:	fba3 2302 	umull	r2, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005080:	441c      	add	r4, r3
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800508c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	1891      	adds	r1, r2, r2
 800509a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800509c:	415b      	adcs	r3, r3
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050a4:	4641      	mov	r1, r8
 80050a6:	1851      	adds	r1, r2, r1
 80050a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050aa:	4649      	mov	r1, r9
 80050ac:	414b      	adcs	r3, r1
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050bc:	4659      	mov	r1, fp
 80050be:	00cb      	lsls	r3, r1, #3
 80050c0:	4651      	mov	r1, sl
 80050c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c6:	4651      	mov	r1, sl
 80050c8:	00ca      	lsls	r2, r1, #3
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	4642      	mov	r2, r8
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d8:	464b      	mov	r3, r9
 80050da:	460a      	mov	r2, r1
 80050dc:	eb42 0303 	adc.w	r3, r2, r3
 80050e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800510a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800510e:	f7fb f861 	bl	80001d4 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <UART_SetConfig+0x2d4>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	@ 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3332      	adds	r3, #50	@ 0x32
 800512a:	4a08      	ldr	r2, [pc, #32]	@ (800514c <UART_SetConfig+0x2d4>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 0207 	and.w	r2, r3, #7
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4422      	add	r2, r4
 800513e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005140:	e106      	b.n	8005350 <UART_SetConfig+0x4d8>
 8005142:	bf00      	nop
 8005144:	40011000 	.word	0x40011000
 8005148:	40011400 	.word	0x40011400
 800514c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800515a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800515e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	6239      	str	r1, [r7, #32]
 800516a:	415b      	adcs	r3, r3
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
 800516e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005172:	4641      	mov	r1, r8
 8005174:	1854      	adds	r4, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0501 	adc.w	r5, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	00eb      	lsls	r3, r5, #3
 8005186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800518a:	00e2      	lsls	r2, r4, #3
 800518c:	4614      	mov	r4, r2
 800518e:	461d      	mov	r5, r3
 8005190:	4643      	mov	r3, r8
 8005192:	18e3      	adds	r3, r4, r3
 8005194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005198:	464b      	mov	r3, r9
 800519a:	eb45 0303 	adc.w	r3, r5, r3
 800519e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051be:	4629      	mov	r1, r5
 80051c0:	008b      	lsls	r3, r1, #2
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c8:	4621      	mov	r1, r4
 80051ca:	008a      	lsls	r2, r1, #2
 80051cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051d0:	f7fb f800 	bl	80001d4 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4b60      	ldr	r3, [pc, #384]	@ (800535c <UART_SetConfig+0x4e4>)
 80051da:	fba3 2302 	umull	r2, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	011c      	lsls	r4, r3, #4
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	61b9      	str	r1, [r7, #24]
 80051fc:	415b      	adcs	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6139      	str	r1, [r7, #16]
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800524e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800525c:	4649      	mov	r1, r9
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005266:	4641      	mov	r1, r8
 8005268:	008a      	lsls	r2, r1, #2
 800526a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800526e:	f7fa ffb1 	bl	80001d4 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4611      	mov	r1, r2
 8005278:	4b38      	ldr	r3, [pc, #224]	@ (800535c <UART_SetConfig+0x4e4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2264      	movs	r2, #100	@ 0x64
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	1acb      	subs	r3, r1, r3
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	3332      	adds	r3, #50	@ 0x32
 800528c:	4a33      	ldr	r2, [pc, #204]	@ (800535c <UART_SetConfig+0x4e4>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005298:	441c      	add	r4, r3
 800529a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800529e:	2200      	movs	r2, #0
 80052a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b8:	4641      	mov	r1, r8
 80052ba:	1851      	adds	r1, r2, r1
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	4649      	mov	r1, r9
 80052c0:	414b      	adcs	r3, r1
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052d0:	4659      	mov	r1, fp
 80052d2:	00cb      	lsls	r3, r1, #3
 80052d4:	4651      	mov	r1, sl
 80052d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052da:	4651      	mov	r1, sl
 80052dc:	00ca      	lsls	r2, r1, #3
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	4642      	mov	r2, r8
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ea:	464b      	mov	r3, r9
 80052ec:	460a      	mov	r2, r1
 80052ee:	eb42 0303 	adc.w	r3, r2, r3
 80052f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80052fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800531e:	f7fa ff59 	bl	80001d4 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <UART_SetConfig+0x4e4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	@ 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	3332      	adds	r3, #50	@ 0x32
 800533a:	4a08      	ldr	r2, [pc, #32]	@ (800535c <UART_SetConfig+0x4e4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4422      	add	r2, r4
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535c:	51eb851f 	.word	0x51eb851f

08005360 <_ZN13EventRecieverC1Ev>:
 *      Author: lex
 */

#include <EventReciever.h>

EventReciever::EventReciever() {
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	4a04      	ldr	r2, [pc, #16]	@ (800537c <_ZN13EventRecieverC1Ev+0x1c>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	08007478 	.word	0x08007478

08005380 <_ZN13EventRecieverD1Ev>:

EventReciever::~EventReciever() {
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	4a04      	ldr	r2, [pc, #16]	@ (800539c <_ZN13EventRecieverD1Ev+0x1c>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	08007478 	.word	0x08007478

080053a0 <_ZN11EventSenderC1Ev>:
 *      Author: lex
 */

#include <EventSender.h>

EventSender::EventSender() {
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <_ZN11EventSenderC1Ev+0x1c>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	0800748c 	.word	0x0800748c

080053c0 <_ZN11EventSenderD1Ev>:

EventSender::~EventSender() {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	4a04      	ldr	r2, [pc, #16]	@ (80053dc <_ZN11EventSenderD1Ev+0x1c>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	0800748c 	.word	0x0800748c

080053e0 <_ZN11EventSenderD0Ev>:
EventSender::~EventSender() {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
}
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ffe9 	bl	80053c0 <_ZN11EventSenderD1Ev>
 80053ee:	2108      	movs	r1, #8
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f805 	bl	8005400 <_ZdlPvj>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_ZdlPvj>:
 8005400:	f000 b800 	b.w	8005404 <_ZdlPv>

08005404 <_ZdlPv>:
 8005404:	f000 b800 	b.w	8005408 <free>

08005408 <free>:
 8005408:	4b02      	ldr	r3, [pc, #8]	@ (8005414 <free+0xc>)
 800540a:	4601      	mov	r1, r0
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f000 b84b 	b.w	80054a8 <_free_r>
 8005412:	bf00      	nop
 8005414:	2000000c 	.word	0x2000000c

08005418 <__malloc_lock>:
 8005418:	4801      	ldr	r0, [pc, #4]	@ (8005420 <__malloc_lock+0x8>)
 800541a:	f000 b835 	b.w	8005488 <__retarget_lock_acquire_recursive>
 800541e:	bf00      	nop
 8005420:	20000554 	.word	0x20000554

08005424 <__malloc_unlock>:
 8005424:	4801      	ldr	r0, [pc, #4]	@ (800542c <__malloc_unlock+0x8>)
 8005426:	f000 b830 	b.w	800548a <__retarget_lock_release_recursive>
 800542a:	bf00      	nop
 800542c:	20000554 	.word	0x20000554

08005430 <memset>:
 8005430:	4402      	add	r2, r0
 8005432:	4603      	mov	r3, r0
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4d0d      	ldr	r5, [pc, #52]	@ (8005478 <__libc_init_array+0x38>)
 8005444:	4c0d      	ldr	r4, [pc, #52]	@ (800547c <__libc_init_array+0x3c>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	2600      	movs	r6, #0
 800544c:	42a6      	cmp	r6, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	4d0b      	ldr	r5, [pc, #44]	@ (8005480 <__libc_init_array+0x40>)
 8005452:	4c0c      	ldr	r4, [pc, #48]	@ (8005484 <__libc_init_array+0x44>)
 8005454:	f000 f872 	bl	800553c <_init>
 8005458:	1b64      	subs	r4, r4, r5
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	2600      	movs	r6, #0
 800545e:	42a6      	cmp	r6, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f855 3b04 	ldr.w	r3, [r5], #4
 8005468:	4798      	blx	r3
 800546a:	3601      	adds	r6, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005472:	4798      	blx	r3
 8005474:	3601      	adds	r6, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	0800749c 	.word	0x0800749c
 800547c:	0800749c 	.word	0x0800749c
 8005480:	0800749c 	.word	0x0800749c
 8005484:	080074a4 	.word	0x080074a4

08005488 <__retarget_lock_acquire_recursive>:
 8005488:	4770      	bx	lr

0800548a <__retarget_lock_release_recursive>:
 800548a:	4770      	bx	lr

0800548c <memcpy>:
 800548c:	440a      	add	r2, r1
 800548e:	4291      	cmp	r1, r2
 8005490:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	4770      	bx	lr
 8005498:	b510      	push	{r4, lr}
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a2:	4291      	cmp	r1, r2
 80054a4:	d1f9      	bne.n	800549a <memcpy+0xe>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <_free_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4605      	mov	r5, r0
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d041      	beq.n	8005534 <_free_r+0x8c>
 80054b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b4:	1f0c      	subs	r4, r1, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfb8      	it	lt
 80054ba:	18e4      	addlt	r4, r4, r3
 80054bc:	f7ff ffac 	bl	8005418 <__malloc_lock>
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <_free_r+0x90>)
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	b933      	cbnz	r3, 80054d4 <_free_r+0x2c>
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	6014      	str	r4, [r2, #0]
 80054ca:	4628      	mov	r0, r5
 80054cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d0:	f7ff bfa8 	b.w	8005424 <__malloc_unlock>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d908      	bls.n	80054ea <_free_r+0x42>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	1821      	adds	r1, r4, r0
 80054dc:	428b      	cmp	r3, r1
 80054de:	bf01      	itttt	eq
 80054e0:	6819      	ldreq	r1, [r3, #0]
 80054e2:	685b      	ldreq	r3, [r3, #4]
 80054e4:	1809      	addeq	r1, r1, r0
 80054e6:	6021      	streq	r1, [r4, #0]
 80054e8:	e7ed      	b.n	80054c6 <_free_r+0x1e>
 80054ea:	461a      	mov	r2, r3
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b10b      	cbz	r3, 80054f4 <_free_r+0x4c>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d9fa      	bls.n	80054ea <_free_r+0x42>
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	1850      	adds	r0, r2, r1
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d10b      	bne.n	8005514 <_free_r+0x6c>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	4401      	add	r1, r0
 8005500:	1850      	adds	r0, r2, r1
 8005502:	4283      	cmp	r3, r0
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	d1e0      	bne.n	80054ca <_free_r+0x22>
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	6053      	str	r3, [r2, #4]
 800550e:	4408      	add	r0, r1
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	e7da      	b.n	80054ca <_free_r+0x22>
 8005514:	d902      	bls.n	800551c <_free_r+0x74>
 8005516:	230c      	movs	r3, #12
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	e7d6      	b.n	80054ca <_free_r+0x22>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	1821      	adds	r1, r4, r0
 8005520:	428b      	cmp	r3, r1
 8005522:	bf04      	itt	eq
 8005524:	6819      	ldreq	r1, [r3, #0]
 8005526:	685b      	ldreq	r3, [r3, #4]
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	bf04      	itt	eq
 800552c:	1809      	addeq	r1, r1, r0
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	6054      	str	r4, [r2, #4]
 8005532:	e7ca      	b.n	80054ca <_free_r+0x22>
 8005534:	bd38      	pop	{r3, r4, r5, pc}
 8005536:	bf00      	nop
 8005538:	20000418 	.word	0x20000418

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
