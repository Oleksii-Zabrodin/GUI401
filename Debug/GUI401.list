
GUI401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a08  08003a08  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a10  08003a10  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000000c  08003a24  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08003a24  0000536c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036230  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339a  00000000  00000000  0003b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003718  00000000  00000000  0003e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000298a  00000000  00000000  00041d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019399  00000000  00000000  000446aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c775  00000000  00000000  0005da43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097538  00000000  00000000  0007a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001116f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f334  00000000  00000000  00111734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00120a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800395c 	.word	0x0800395c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800395c 	.word	0x0800395c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <MX_GPIO_Init+0xec>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a33      	ldr	r2, [pc, #204]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a2c      	ldr	r2, [pc, #176]	@ (80005ec <MX_GPIO_Init+0xec>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a25      	ldr	r2, [pc, #148]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a1e      	ldr	r2, [pc, #120]	@ (80005ec <MX_GPIO_Init+0xec>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <MX_GPIO_Init+0xec>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <MX_GPIO_Init+0xf0>)
 800058c:	f001 fda6 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000596:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 80005a8:	f001 fc14 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BUTTON_PIN_Pin DOWN_BUTTON_PIN_Pin UP_BUTTON_PIN_Pin LEFT_BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN_Pin|DOWN_BUTTON_PIN_Pin|UP_BUTTON_PIN_Pin|LEFT_BUTTON_PIN_Pin;
 80005ac:	230f      	movs	r3, #15
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005b0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 80005c2:	f001 fc07 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c6:	2320      	movs	r3, #32
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_GPIO_Init+0xf0>)
 80005de:	f001 fbf9 	bl	8001dd4 <HAL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020800 	.word	0x40020800

080005f8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_I2C3_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	@ (800064c <MX_I2C3_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_I2C3_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_I2C3_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_I2C3_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_I2C3_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_I2C3_Init+0x50>)
 8000636:	f001 fd6b 	bl	8002110 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f918 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40005c00 	.word	0x40005c00
 8000650:	00061a80 	.word	0x00061a80

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <HAL_I2C_MspInit+0xc0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d14a      	bne.n	800070c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a26      	ldr	r2, [pc, #152]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b4:	2312      	movs	r3, #18
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80006c0:	2304      	movs	r3, #4
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <HAL_I2C_MspInit+0xc8>)
 80006cc:	f001 fb82 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006d0:	2310      	movs	r3, #16
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80006e0:	2309      	movs	r3, #9
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	@ (8000720 <HAL_I2C_MspInit+0xcc>)
 80006ec:	f001 fb72 	bl	8001dd4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 80006fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_I2C_MspInit+0xc4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	@ 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40005c00 	.word	0x40005c00
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400

08000724 <_Z9u8g2_Initv>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
u8g2_t u8g2;

void u8g2_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay_stm32);
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <_Z9u8g2_Initv+0x34>)
 800072a:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <_Z9u8g2_Initv+0x38>)
 800072c:	490c      	ldr	r1, [pc, #48]	@ (8000760 <_Z9u8g2_Initv+0x3c>)
 800072e:	480d      	ldr	r0, [pc, #52]	@ (8000764 <_Z9u8g2_Initv+0x40>)
 8000730:	f000 fa1e 	bl	8000b70 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
    u8g2_InitDisplay(&u8g2);
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <_Z9u8g2_Initv+0x40>)
 8000736:	f001 f8b7 	bl	80018a8 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <_Z9u8g2_Initv+0x40>)
 800073e:	f001 f8c2 	bl	80018c6 <u8x8_SetPowerSave>

    u8g2_DrawHLine(&u8g2, 0, 0, 40);
 8000742:	2328      	movs	r3, #40	@ 0x28
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	4806      	ldr	r0, [pc, #24]	@ (8000764 <_Z9u8g2_Initv+0x40>)
 800074a:	f000 fb4f 	bl	8000dec <u8g2_DrawHLine>
    u8g2_SendBuffer(&u8g2);
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <_Z9u8g2_Initv+0x40>)
 8000750:	f000 f9f0 	bl	8000b34 <u8g2_SendBuffer>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	08001a9d 	.word	0x08001a9d
 800075c:	080019e5 	.word	0x080019e5
 8000760:	0800398c 	.word	0x0800398c
 8000764:	2000007c 	.word	0x2000007c

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f001 f9b6 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f80a 	bl	8000788 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff fec4 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000778:	f000 f8ec 	bl	8000954 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800077c:	f7ff ff3c 	bl	80005f8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  u8g2_Init();
 8000780:	f7ff ffd0 	bl	8000724 <_Z9u8g2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <main+0x1c>

08000788 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f8b4 	bl	8003904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <_Z18SystemClock_Configv+0xe4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a2d      	ldr	r2, [pc, #180]	@ (800086c <_Z18SystemClock_Configv+0xe4>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <_Z18SystemClock_Configv+0xe4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <_Z18SystemClock_Configv+0xe8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <_Z18SystemClock_Configv+0xe8>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <_Z18SystemClock_Configv+0xe8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000806:	2304      	movs	r3, #4
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f002 f91a 	bl	8002a4c <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000828:	f000 f824 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fb77 	bl	8002f3c <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800085e:	f000 f809 	bl	8000874 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	@ 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f001 f92b 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f002 fcf6 	bl	800337c <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f7ff ff6d 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000110 	.word	0x20000110
 80009a4:	40004400 	.word	0x40004400

080009a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f001 f9d9 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a3c:	f7ff ff78 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 ff55 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fe7d 	bl	8000768 <main>
  bx  lr    
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08003a18 	.word	0x08003a18
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	2000036c 	.word	0x2000036c

08000a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>

08000a8a <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af02      	add	r7, sp, #8
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	70fb      	strb	r3, [r7, #3]
 8000a96:	4613      	mov	r3, r2
 8000a98:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	7c1b      	ldrb	r3, [r3, #16]
 8000aa0:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	89ba      	ldrh	r2, [r7, #12]
 8000ab2:	fb12 f303 	smulbb	r3, r2, r3
 8000ab6:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000ab8:	89bb      	ldrh	r3, [r7, #12]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000abe:	89bb      	ldrh	r3, [r7, #12]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000ac6:	7bf9      	ldrb	r1, [r7, #15]
 8000ac8:	78ba      	ldrb	r2, [r7, #2]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 feb7 	bl	8001846 <u8x8_DrawTile>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000af2:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000afa:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	7c5b      	ldrb	r3, [r3, #17]
 8000b02:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000b04:	7bba      	ldrb	r2, [r7, #14]
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffbd 	bl	8000a8a <u8g2_send_tile_row>
    src_row++;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	3301      	adds	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	7b7b      	ldrb	r3, [r7, #13]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d203      	bcs.n	8000b2c <u8g2_send_buffer+0x4c>
 8000b24:	7bba      	ldrb	r2, [r7, #14]
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3eb      	bcc.n	8000b04 <u8g2_send_buffer+0x24>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffcf 	bl	8000ae0 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fed0 	bl	80018e8 <u8x8_RefreshDisplay>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	701a      	strb	r2, [r3, #0]
  return buf;
 8000b5e:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20000158 	.word	0x20000158

08000b70 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 ff0d 	bl	80019a8 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 8000b8e:	f107 0313 	add.w	r3, r7, #19
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffdc 	bl	8000b50 <u8g2_m_16_4_f>
 8000b98:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000b9a:	7cfa      	ldrb	r2, [r7, #19]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 8000ba2:	6979      	ldr	r1, [r7, #20]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 fa57 	bl	8001058 <u8g2_SetupBuffer>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	080014f9 	.word	0x080014f9
 8000bb8:	08001765 	.word	0x08001765
 8000bbc:	08000edb 	.word	0x08000edb

08000bc0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <u8g2_SetFontPosBaseline+0x1c>)
 8000be4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	08000bc1 	.word	0x08000bc1

08000bf8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	460b      	mov	r3, r1
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8000c14:	8afb      	ldrh	r3, [r7, #22]
 8000c16:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	881a      	ldrh	r2, [r3, #0]
 8000c1c:	8abb      	ldrh	r3, [r7, #20]
 8000c1e:	4413      	add	r3, r2
 8000c20:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8000c22:	8afa      	ldrh	r2, [r7, #22]
 8000c24:	8abb      	ldrh	r3, [r7, #20]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d90b      	bls.n	8000c42 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8000c2a:	8afa      	ldrh	r2, [r7, #22]
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d205      	bcs.n	8000c3e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	82bb      	strh	r3, [r7, #20]
      b--;
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	82bb      	strh	r3, [r7, #20]
 8000c3c:	e001      	b.n	8000c42 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8000c42:	8afa      	ldrh	r2, [r7, #22]
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d301      	bcc.n	8000c4e <u8g2_clip_intersection2+0x56>
    return 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e01c      	b.n	8000c88 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8000c4e:	8aba      	ldrh	r2, [r7, #20]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d801      	bhi.n	8000c5a <u8g2_clip_intersection2+0x62>
    return 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e016      	b.n	8000c88 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8000c5a:	8afa      	ldrh	r2, [r7, #22]
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d201      	bcs.n	8000c66 <u8g2_clip_intersection2+0x6e>
    a = c;
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8000c66:	8aba      	ldrh	r2, [r7, #20]
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d901      	bls.n	8000c72 <u8g2_clip_intersection2+0x7a>
    b = d;
 8000c6e:	88bb      	ldrh	r3, [r7, #4]
 8000c70:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8afa      	ldrh	r2, [r7, #22]
 8000c76:	801a      	strh	r2, [r3, #0]
  b -= a;
 8000c78:	8aba      	ldrh	r2, [r7, #20]
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	8aba      	ldrh	r2, [r7, #20]
 8000c84:	801a      	strh	r2, [r3, #0]
  return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	817b      	strh	r3, [r7, #10]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	813b      	strh	r3, [r7, #8]
 8000caa:	4613      	mov	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000cb2:	893a      	ldrh	r2, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8000cbc:	88f8      	ldrh	r0, [r7, #6]
 8000cbe:	893a      	ldrh	r2, [r7, #8]
 8000cc0:	8979      	ldrh	r1, [r7, #10]
 8000cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	4603      	mov	r3, r0
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	47a0      	blx	r4
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}

08000cd6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000cd6:	b590      	push	{r4, r7, lr}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af02      	add	r7, sp, #8
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	817b      	strh	r3, [r7, #10]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	813b      	strh	r3, [r7, #8]
 8000cec:	4613      	mov	r3, r2
 8000cee:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d075      	beq.n	8000de6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d072      	beq.n	8000de6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d91a      	bls.n	8000d3c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8000d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d109      	bne.n	8000d22 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8000d0e:	897a      	ldrh	r2, [r7, #10]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	817b      	strh	r3, [r7, #10]
	  x++;
 8000d18:	897b      	ldrh	r3, [r7, #10]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	817b      	strh	r3, [r7, #10]
 8000d20:	e00c      	b.n	8000d3c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8000d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d108      	bne.n	8000d3c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8000d2a:	893a      	ldrh	r2, [r7, #8]
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	813b      	strh	r3, [r7, #8]
	  y++;
 8000d34:	893b      	ldrh	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8000d3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8000d48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11a      	bne.n	8000d86 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8000d56:	893b      	ldrh	r3, [r7, #8]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d83b      	bhi.n	8000dd4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8000d62:	893b      	ldrh	r3, [r7, #8]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d937      	bls.n	8000dd8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8000d74:	1db9      	adds	r1, r7, #6
 8000d76:	f107 000a 	add.w	r0, r7, #10
 8000d7a:	f7ff ff3d 	bl	8000bf8 <u8g2_clip_intersection2>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11a      	bne.n	8000dba <u8g2_DrawHVLine+0xe4>
	  return;
 8000d84:	e02f      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d824      	bhi.n	8000ddc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8000d98:	897b      	ldrh	r3, [r7, #10]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d920      	bls.n	8000de0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8000daa:	1db9      	adds	r1, r7, #6
 8000dac:	f107 0008 	add.w	r0, r7, #8
 8000db0:	f7ff ff22 	bl	8000bf8 <u8g2_clip_intersection2>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d014      	beq.n	8000de4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	689c      	ldr	r4, [r3, #8]
 8000dc0:	8979      	ldrh	r1, [r7, #10]
 8000dc2:	893a      	ldrh	r2, [r7, #8]
 8000dc4:	88f8      	ldrh	r0, [r7, #6]
 8000dc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	47a0      	blx	r4
 8000dd2:	e008      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
	  return;
 8000dd4:	bf00      	nop
 8000dd6:	e006      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
	  return;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
	  return;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
	  return;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <u8g2_DrawHVLine+0x110>
	  return;
 8000de4:	bf00      	nop
    }
}
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	817b      	strh	r3, [r7, #10]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	813b      	strh	r3, [r7, #8]
 8000e02:	4613      	mov	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	893a      	ldrh	r2, [r7, #8]
 8000e0a:	8979      	ldrh	r1, [r7, #10]
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	9000      	str	r0, [sp, #0]
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff ff60 	bl	8000cd6 <u8g2_DrawHVLine>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8000e1e:	b490      	push	{r4, r7}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4604      	mov	r4, r0
 8000e26:	4608      	mov	r0, r1
 8000e28:	4611      	mov	r1, r2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	80fb      	strh	r3, [r7, #6]
 8000e30:	4603      	mov	r3, r0
 8000e32:	80bb      	strh	r3, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d20d      	bcs.n	8000e60 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8000e44:	883a      	ldrh	r2, [r7, #0]
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d901      	bls.n	8000e50 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e014      	b.n	8000e7a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8000e50:	887a      	ldrh	r2, [r7, #2]
 8000e52:	883b      	ldrh	r3, [r7, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d901      	bls.n	8000e5c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e00e      	b.n	8000e7a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e00c      	b.n	8000e7a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8000e60:	883a      	ldrh	r2, [r7, #0]
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d907      	bls.n	8000e78 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8000e68:	887a      	ldrh	r2, [r7, #2]
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d901      	bls.n	8000e74 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e002      	b.n	8000e7a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8000e78:	2300      	movs	r3, #0
    }
  }
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc90      	pop	{r4, r7}
 8000e82:	4770      	bx	lr

08000e84 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	817b      	strh	r3, [r7, #10]
 8000e96:	460b      	mov	r3, r1
 8000e98:	813b      	strh	r3, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8000eaa:	8b3b      	ldrh	r3, [r7, #24]
 8000eac:	893a      	ldrh	r2, [r7, #8]
 8000eae:	f7ff ffb6 	bl	8000e1e <u8g2_is_intersection_decision_tree>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <u8g2_IsIntersection+0x38>
    return 0; 
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e00a      	b.n	8000ed2 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	897a      	ldrh	r2, [r7, #10]
 8000ecc:	f7ff ffa7 	bl	8000e1e <u8g2_is_intersection_decision_tree>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b089      	sub	sp, #36	@ 0x24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	817b      	strh	r3, [r7, #10]
 8000eec:	460b      	mov	r3, r1
 8000eee:	813b      	strh	r3, [r7, #8]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8000ef4:	893b      	ldrh	r3, [r7, #8]
 8000ef6:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8000ef8:	7efb      	ldrb	r3, [r7, #27]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8000f04:	7e3a      	ldrb	r2, [r7, #24]
 8000f06:	7efb      	ldrb	r3, [r7, #27]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d801      	bhi.n	8000f24 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8000f20:	7e3b      	ldrb	r3, [r7, #24]
 8000f22:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	f023 0307 	bic.w	r3, r3, #7
 8000f3c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7c1b      	ldrb	r3, [r3, #16]
 8000f44:	461a      	mov	r2, r3
 8000f46:	8afb      	ldrh	r3, [r7, #22]
 8000f48:	fb13 f302 	smulbb	r3, r3, r2
 8000f4c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f52:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8000f54:	8afb      	ldrh	r3, [r7, #22]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	4413      	add	r3, r2
 8000f5a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8000f5c:	897b      	ldrh	r3, [r7, #10]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8000f64:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d117      	bne.n	8000f9c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	7ebb      	ldrb	r3, [r7, #26]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	7e7b      	ldrb	r3, [r7, #25]
 8000f80:	4053      	eors	r3, r2
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	701a      	strb	r2, [r3, #0]
	ptr++;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
	len--;
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e8      	bne.n	8000f6c <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8000f9a:	e038      	b.n	800100e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	7ebb      	ldrb	r3, [r7, #26]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	7e7b      	ldrb	r3, [r7, #25]
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8000fb8:	7efb      	ldrb	r3, [r7, #27]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8000fbe:	7efb      	ldrb	r3, [r7, #27]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	76fb      	strb	r3, [r7, #27]
      len--;
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8000fcc:	7efb      	ldrb	r3, [r7, #27]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d114      	bne.n	8000ffc <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d801      	bhi.n	8000fec <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d008      	beq.n	8001008 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	767b      	strb	r3, [r7, #25]
 8000ffa:	e005      	b.n	8001008 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8000ffc:	7ebb      	ldrb	r3, [r7, #26]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001002:	7e7b      	ldrb	r3, [r7, #25]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1c6      	bne.n	8000f9c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001038:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ffa9 	bl	800101a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fd85 	bl	8000bd8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010f2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	89fa      	ldrh	r2, [r7, #14]
 80010fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	7c1b      	ldrb	r3, [r3, #16]
 8001104:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001106:	89fb      	ldrh	r3, [r7, #14]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001118:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	89fa      	ldrh	r2, [r7, #14]
 8001124:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800112c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001136:	4413      	add	r3, r2
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	7c52      	ldrb	r2, [r2, #17]
 800113c:	4293      	cmp	r3, r2
 800113e:	dd07      	ble.n	8001150 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	7c5b      	ldrb	r3, [r3, #17]
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	4413      	add	r3, r2
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	8a9a      	ldrh	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	8ada      	ldrh	r2, [r3, #22]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af02      	add	r7, sp, #8
 80011a4:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fe5e 	bl	8000e84 <u8g2_IsIntersection>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80011d6:	e03b      	b.n	8001250 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d205      	bcs.n	80011fc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001208:	429a      	cmp	r2, r3
 800120a:	d905      	bls.n	8001218 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001224:	429a      	cmp	r2, r3
 8001226:	d205      	bcs.n	8001234 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001240:	429a      	cmp	r2, r3
 8001242:	d905      	bls.n	8001250 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff3c 	bl	80010de <u8g2_update_dimension_common>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff7b 	bl	800119e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	817b      	strh	r3, [r7, #10]
 80012c2:	460b      	mov	r3, r1
 80012c4:	813b      	strh	r3, [r7, #8]
 80012c6:	4613      	mov	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80012ca:	88f8      	ldrh	r0, [r7, #6]
 80012cc:	893a      	ldrh	r2, [r7, #8]
 80012ce:	8979      	ldrh	r1, [r7, #10]
 80012d0:	7e3b      	ldrb	r3, [r7, #24]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4603      	mov	r3, r0
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fcdc 	bl	8000c94 <u8g2_draw_hv_line_2dir>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	460b      	mov	r3, r1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	691c      	ldr	r4, [r3, #16]
 80012f6:	7afa      	ldrb	r2, [r7, #11]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2117      	movs	r1, #23
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	47a0      	blx	r4
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}

0800130a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001316:	1cfb      	adds	r3, r7, #3
 8001318:	461a      	mov	r2, r3
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe1 	bl	80012e4 <u8x8_byte_SendBytes>
 8001322:	4603      	mov	r3, r0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691c      	ldr	r4, [r3, #16]
 8001338:	2300      	movs	r3, #0
 800133a:	2200      	movs	r2, #0
 800133c:	2118      	movs	r1, #24
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	47a0      	blx	r4
 8001342:	4603      	mov	r3, r0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}

0800134c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691c      	ldr	r4, [r3, #16]
 8001358:	2300      	movs	r3, #0
 800135a:	2200      	movs	r2, #0
 800135c:	2119      	movs	r1, #25
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	47a0      	blx	r4
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}

0800136c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68dc      	ldr	r4, [r3, #12]
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	2300      	movs	r3, #0
 8001380:	2115      	movs	r1, #21
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	47a0      	blx	r4
 8001386:	4603      	mov	r3, r0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68dc      	ldr	r4, [r3, #12]
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	2300      	movs	r3, #0
 80013a4:	2116      	movs	r1, #22
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	47a0      	blx	r4
 80013aa:	4603      	mov	r3, r0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}

080013b4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	460b      	mov	r3, r1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	68dc      	ldr	r4, [r3, #12]
 80013c6:	7afa      	ldrb	r2, [r7, #11]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2117      	movs	r1, #23
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	47a0      	blx	r4
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68dc      	ldr	r4, [r3, #12]
 80013e6:	2300      	movs	r3, #0
 80013e8:	2200      	movs	r2, #0
 80013ea:	2118      	movs	r1, #24
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	47a0      	blx	r4
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}

080013fa <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80013fa:	b590      	push	{r4, r7, lr}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68dc      	ldr	r4, [r3, #12]
 8001406:	2300      	movs	r3, #0
 8001408:	2200      	movs	r2, #0
 800140a:	2119      	movs	r1, #25
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	47a0      	blx	r4
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}

0800141a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	73fb      	strb	r3, [r7, #15]
    data++;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2bfe      	cmp	r3, #254	@ 0xfe
 8001434:	d031      	beq.n	800149a <u8x8_cad_SendSequence+0x80>
 8001436:	2bfe      	cmp	r3, #254	@ 0xfe
 8001438:	dc3d      	bgt.n	80014b6 <u8x8_cad_SendSequence+0x9c>
 800143a:	2b19      	cmp	r3, #25
 800143c:	dc3b      	bgt.n	80014b6 <u8x8_cad_SendSequence+0x9c>
 800143e:	2b18      	cmp	r3, #24
 8001440:	da23      	bge.n	800148a <u8x8_cad_SendSequence+0x70>
 8001442:	2b16      	cmp	r3, #22
 8001444:	dc02      	bgt.n	800144c <u8x8_cad_SendSequence+0x32>
 8001446:	2b15      	cmp	r3, #21
 8001448:	da03      	bge.n	8001452 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800144a:	e034      	b.n	80014b6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800144c:	2b17      	cmp	r3, #23
 800144e:	d00e      	beq.n	800146e <u8x8_cad_SendSequence+0x54>
	return;
 8001450:	e031      	b.n	80014b6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68dc      	ldr	r4, [r3, #12]
 800145c:	7bba      	ldrb	r2, [r7, #14]
 800145e:	7bf9      	ldrb	r1, [r7, #15]
 8001460:	2300      	movs	r3, #0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	47a0      	blx	r4
	  data++;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	603b      	str	r3, [r7, #0]
	  break;
 800146c:	e022      	b.n	80014b4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001474:	f107 030e 	add.w	r3, r7, #14
 8001478:	461a      	mov	r2, r3
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff99 	bl	80013b4 <u8x8_cad_SendData>
	  data++;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	603b      	str	r3, [r7, #0]
	  break;
 8001488:	e014      	b.n	80014b4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68dc      	ldr	r4, [r3, #12]
 800148e:	7bf9      	ldrb	r1, [r7, #15]
 8001490:	2300      	movs	r3, #0
 8001492:	2200      	movs	r2, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	47a0      	blx	r4
	  break;
 8001498:	e00c      	b.n	80014b4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2129      	movs	r1, #41	@ 0x29
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fa2d 	bl	8001906 <u8x8_gpio_call>
	  data++;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	603b      	str	r3, [r7, #0]
	  break;
 80014b2:	bf00      	nop
    cmd = *data;
 80014b4:	e7b6      	b.n	8001424 <u8x8_cad_SendSequence+0xa>
	return;
 80014b6:	bf00      	nop
    }
  }
}
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}

080014be <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80014be:	b590      	push	{r4, r7, lr}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	460b      	mov	r3, r1
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff ff2d 	bl	800132c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80014d2:	2140      	movs	r1, #64	@ 0x40
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff ff18 	bl	800130a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	691c      	ldr	r4, [r3, #16]
 80014de:	7afa      	ldrb	r2, [r7, #11]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2117      	movs	r1, #23
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff ff2f 	bl	800134c <u8x8_byte_EndTransfer>
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
	...

080014f8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	72fb      	strb	r3, [r7, #11]
 8001506:	4613      	mov	r3, r2
 8001508:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	3b14      	subs	r3, #20
 800150e:	2b05      	cmp	r3, #5
 8001510:	d86e      	bhi.n	80015f0 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	080015af 	.word	0x080015af
 800151c:	08001531 	.word	0x08001531
 8001520:	0800155f 	.word	0x0800155f
 8001524:	0800156b 	.word	0x0800156b
 8001528:	080015d3 	.word	0x080015d3
 800152c:	080015db 	.word	0x080015db
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8001530:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <u8x8_cad_ssd13xx_fast_i2c+0x46>
    	  u8x8_byte_EndTransfer(u8x8);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ff07 	bl	800134c <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fef4 	bl	800132c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8001544:	2100      	movs	r1, #0
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fedf 	bl	800130a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	4619      	mov	r1, r3
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff feda 	bl	800130a <u8x8_byte_SendByte>
      in_transfer = 1;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800155c:	e04a      	b.n	80015f4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800155e:	7abb      	ldrb	r3, [r7, #10]
 8001560:	4619      	mov	r1, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fed1 	bl	800130a <u8x8_byte_SendByte>
      break;      
 8001568:	e044      	b.n	80015f4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff feea 	bl	800134c <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800157c:	e00a      	b.n	8001594 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	2118      	movs	r1, #24
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff ff9b 	bl	80014be <u8x8_i2c_data_transfer>
	arg_int-=24;
 8001588:	7abb      	ldrb	r3, [r7, #10]
 800158a:	3b18      	subs	r3, #24
 800158c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3318      	adds	r3, #24
 8001592:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8001594:	7abb      	ldrb	r3, [r7, #10]
 8001596:	2b18      	cmp	r3, #24
 8001598:	d8f1      	bhi.n	800157e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4619      	mov	r1, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff ff8c 	bl	80014be <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
      break;
 80015ac:	e022      	b.n	80015f4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015b4:	2bff      	cmp	r3, #255	@ 0xff
 80015b6:	d103      	bne.n	80015c0 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2278      	movs	r2, #120	@ 0x78
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	691c      	ldr	r4, [r3, #16]
 80015c4:	7aba      	ldrb	r2, [r7, #10]
 80015c6:	7af9      	ldrb	r1, [r7, #11]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	47a0      	blx	r4
 80015ce:	4603      	mov	r3, r0
 80015d0:	e011      	b.n	80015f6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
      break;
 80015d8:	e00c      	b.n	80015f4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff feb2 	bl	800134c <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
      break;
 80015ee:	e001      	b.n	80015f4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000358 	.word	0x20000358

08001604 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	72fb      	strb	r3, [r7, #11]
 8001612:	4613      	mov	r3, r2
 8001614:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	3b0a      	subs	r3, #10
 800161a:	2b05      	cmp	r3, #5
 800161c:	f200 8090 	bhi.w	8001740 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8001620:	a201      	add	r2, pc, #4	@ (adr r2, 8001628 <u8x8_d_ssd1306_128x32_generic+0x24>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001641 	.word	0x08001641
 800162c:	08001651 	.word	0x08001651
 8001630:	08001741 	.word	0x08001741
 8001634:	0800166b 	.word	0x0800166b
 8001638:	0800169d 	.word	0x0800169d
 800163c:	080016bd 	.word	0x080016bd
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f8c3 	bl	80017cc <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8001646:	4942      	ldr	r1, [pc, #264]	@ (8001750 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fee6 	bl	800141a <u8x8_cad_SendSequence>
      break;
 800164e:	e079      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001650:	7abb      	ldrb	r3, [r7, #10]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8001656:	493f      	ldr	r1, [pc, #252]	@ (8001754 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fede 	bl	800141a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 800165e:	e071      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8001660:	493d      	ldr	r1, [pc, #244]	@ (8001758 <u8x8_d_ssd1306_128x32_generic+0x154>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fed9 	bl	800141a <u8x8_cad_SendSequence>
      break;
 8001668:	e06c      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800166a:	7abb      	ldrb	r3, [r7, #10]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10a      	bne.n	8001686 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8001670:	493a      	ldr	r1, [pc, #232]	@ (800175c <u8x8_d_ssd1306_128x32_generic+0x158>)
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fed1 	bl	800141a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	7c9a      	ldrb	r2, [r3, #18]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001684:	e05e      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8001686:	4936      	ldr	r1, [pc, #216]	@ (8001760 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fec6 	bl	800141a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	7cda      	ldrb	r2, [r3, #19]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800169a:	e053      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fe9c 	bl	80013da <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80016a2:	2181      	movs	r1, #129	@ 0x81
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff fe61 	bl	800136c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80016aa:	7abb      	ldrb	r3, [r7, #10]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fe6e 	bl	8001390 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fea0 	bl	80013fa <u8x8_cad_EndTransfer>
      break;
 80016ba:	e043      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fe8c 	bl	80013da <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	795b      	ldrb	r3, [r3, #5]
 80016c6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	4413      	add	r3, r2
 80016d8:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff fe3f 	bl	800136c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fe37 	bl	800136c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	799b      	ldrb	r3, [r3, #6]
 8001702:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fe2e 	bl	800136c <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800171c:	7dbb      	ldrb	r3, [r7, #22]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4619      	mov	r1, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fe44 	bl	80013b4 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800172c:	7abb      	ldrb	r3, [r7, #10]
 800172e:	3b01      	subs	r3, #1
 8001730:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1eb      	bne.n	8001710 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fe5e 	bl	80013fa <u8x8_cad_EndTransfer>
      break;
 800173e:	e001      	b.n	8001744 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08003998 	.word	0x08003998
 8001754:	080039d0 	.word	0x080039d0
 8001758:	080039d8 	.word	0x080039d8
 800175c:	080039e0 	.word	0x080039e0
 8001760:	080039e8 	.word	0x080039e8

08001764 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	72fb      	strb	r3, [r7, #11]
 8001772:	4613      	mov	r3, r2
 8001774:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d105      	bne.n	8001788 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 800177c:	4908      	ldr	r1, [pc, #32]	@ (80017a0 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f810 	bl	80017a4 <u8x8_d_helper_display_setup_memory>
      return 1;
 8001784:	2301      	movs	r3, #1
 8001786:	e006      	b.n	8001796 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8001788:	7aba      	ldrb	r2, [r7, #10]
 800178a:	7af9      	ldrb	r1, [r7, #11]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ff38 	bl	8001604 <u8x8_d_ssd1306_128x32_generic>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	080039f0 	.word	0x080039f0

080017a4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	7c9a      	ldrb	r2, [r3, #18]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695c      	ldr	r4, [r3, #20]
 80017d8:	2300      	movs	r3, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	2128      	movs	r1, #40	@ 0x28
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68dc      	ldr	r4, [r3, #12]
 80017e6:	2300      	movs	r3, #0
 80017e8:	2200      	movs	r2, #0
 80017ea:	2114      	movs	r1, #20
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	214b      	movs	r1, #75	@ 0x4b
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f886 	bl	8001906 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	461a      	mov	r2, r3
 8001802:	2129      	movs	r1, #41	@ 0x29
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f87e 	bl	8001906 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	214b      	movs	r1, #75	@ 0x4b
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f879 	bl	8001906 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	2129      	movs	r1, #41	@ 0x29
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f871 	bl	8001906 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	214b      	movs	r1, #75	@ 0x4b
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f86c 	bl	8001906 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	461a      	mov	r2, r3
 8001836:	2129      	movs	r1, #41	@ 0x29
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f864 	bl	8001906 <u8x8_gpio_call>
}    
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}

08001846 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001846:	b590      	push	{r4, r7, lr}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	461a      	mov	r2, r3
 8001854:	4603      	mov	r3, r0
 8001856:	70fb      	strb	r3, [r7, #3]
 8001858:	460b      	mov	r3, r1
 800185a:	70bb      	strb	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689c      	ldr	r4, [r3, #8]
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	2201      	movs	r2, #1
 800187a:	210f      	movs	r1, #15
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	47a0      	blx	r4
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}

0800188a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800188a:	b590      	push	{r4, r7, lr}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689c      	ldr	r4, [r3, #8]
 8001896:	2300      	movs	r3, #0
 8001898:	2200      	movs	r2, #0
 800189a:	2109      	movs	r1, #9
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	47a0      	blx	r4
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689c      	ldr	r4, [r3, #8]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	210a      	movs	r1, #10
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}

080018c6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80018c6:	b590      	push	{r4, r7, lr}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689c      	ldr	r4, [r3, #8]
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	2300      	movs	r3, #0
 80018da:	210b      	movs	r1, #11
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	47a0      	blx	r4
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689c      	ldr	r4, [r3, #8]
 80018f4:	2300      	movs	r3, #0
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	47a0      	blx	r4
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}

08001906 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695c      	ldr	r4, [r3, #20]
 800191a:	78ba      	ldrb	r2, [r7, #2]
 800191c:	78f9      	ldrb	r1, [r7, #3]
 800191e:	2300      	movs	r3, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	47a0      	blx	r4
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	72fb      	strb	r3, [r7, #11]
 800193a:	4613      	mov	r3, r2
 800193c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <u8x8_SetupDefaults+0x58>)
 800195e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <u8x8_SetupDefaults+0x58>)
 8001964:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <u8x8_SetupDefaults+0x58>)
 800196a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <u8x8_SetupDefaults+0x58>)
 8001970:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	22ff      	movs	r2, #255	@ 0xff
 8001994:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	0800192d 	.word	0x0800192d

080019a8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff ffc8 	bl	800194c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff ff58 	bl	800188a <u8x8_SetupMemory>
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <u8x8_byte_hw_i2c>:
extern I2C_HandleTypeDef hi2c3;

static uint8_t u8g2Buffer[10] = {0};
static uint8_t u8g2BufferCounter = 0;

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	72fb      	strb	r3, [r7, #11]
 80019f2:	4613      	mov	r3, r2
 80019f4:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	3b14      	subs	r3, #20
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d843      	bhi.n	8001a86 <u8x8_byte_hw_i2c+0xa2>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <u8x8_byte_hw_i2c+0x20>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a87 	.word	0x08001a87
 8001a08:	08001a87 	.word	0x08001a87
 8001a0c:	08001a87 	.word	0x08001a87
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	08001a55 	.word	0x08001a55
 8001a18:	08001a5d 	.word	0x08001a5d
 8001a1c:	08001a87 	.word	0x08001a87
 8001a20:	08001a87 	.word	0x08001a87
 8001a24:	08001a87 	.word	0x08001a87
 8001a28:	08001a87 	.word	0x08001a87
 8001a2c:	08001a87 	.word	0x08001a87
 8001a30:	08001a87 	.word	0x08001a87
 8001a34:	08001a87 	.word	0x08001a87
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SEND:
        	u8g2Buffer[u8g2BufferCounter] = *((uint8_t*)arg_ptr);
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <u8x8_byte_hw_i2c+0xac>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <u8x8_byte_hw_i2c+0xb0>)
 8001a44:	5499      	strb	r1, [r3, r2]
        	++u8g2BufferCounter;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <u8x8_byte_hw_i2c+0xac>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <u8x8_byte_hw_i2c+0xac>)
 8001a50:	701a      	strb	r2, [r3, #0]
//        	HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, (0x3C << 1), 0x00, I2C_MEMADD_SIZE_8BIT, (uint8_t*)arg_ptr, arg_int, HAL_MAX_DELAY);
        	break;
 8001a52:	e018      	b.n	8001a86 <u8x8_byte_hw_i2c+0xa2>
        case U8X8_MSG_BYTE_SET_DC:

        	break;
        case U8X8_MSG_BYTE_START_TRANSFER:
        	u8g2BufferCounter = 0;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <u8x8_byte_hw_i2c+0xac>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
        	break;
 8001a5a:	e014      	b.n	8001a86 <u8x8_byte_hw_i2c+0xa2>
        case U8X8_MSG_BYTE_END_TRANSFER:
        	HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(&hi2c3, (0x3C << 1), (uint8_t*)u8g2Buffer, u8g2BufferCounter, HAL_MAX_DELAY);
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <u8x8_byte_hw_i2c+0xac>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <u8x8_byte_hw_i2c+0xb0>)
 8001a6c:	2178      	movs	r1, #120	@ 0x78
 8001a6e:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <u8x8_byte_hw_i2c+0xb4>)
 8001a70:	f000 fc92 	bl	8002398 <HAL_I2C_Master_Transmit>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]
//          	HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, (0x3C << 1), 0x00, I2C_MEMADD_SIZE_8BIT, &(u8g2Buffer[1]), 1, HAL_MAX_DELAY);
//          	if (2 < u8g2BufferCounter) {
//          		result = HAL_I2C_Mem_Write(&hi2c3, (0x3C << 1), 0x40, I2C_MEMADD_SIZE_8BIT, &(u8g2Buffer[2]), 1, HAL_MAX_DELAY);
//          	}

          	return  HAL_OK == result;
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	e000      	b.n	8001a88 <u8x8_byte_hw_i2c+0xa4>
    }

    return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000366 	.word	0x20000366
 8001a94:	2000035c 	.word	0x2000035c
 8001a98:	20000028 	.word	0x20000028

08001a9c <u8x8_gpio_and_delay_stm32>:
    }

    return 1;
}

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	72fb      	strb	r3, [r7, #11]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ab2:	dc0d      	bgt.n	8001ad0 <u8x8_gpio_and_delay_stm32+0x34>
 8001ab4:	2b2b      	cmp	r3, #43	@ 0x2b
 8001ab6:	da08      	bge.n	8001aca <u8x8_gpio_and_delay_stm32+0x2e>
 8001ab8:	2b28      	cmp	r3, #40	@ 0x28
 8001aba:	d008      	beq.n	8001ace <u8x8_gpio_and_delay_stm32+0x32>
 8001abc:	2b29      	cmp	r3, #41	@ 0x29
 8001abe:	d107      	bne.n	8001ad0 <u8x8_gpio_and_delay_stm32+0x34>
    	case U8X8_MSG_GPIO_AND_DELAY_INIT:
    		break;
        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
 8001ac0:	7abb      	ldrb	r3, [r7, #10]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f87c 	bl	8001bc0 <HAL_Delay>
            break;
 8001ac8:	e002      	b.n	8001ad0 <u8x8_gpio_and_delay_stm32+0x34>
        case U8X8_MSG_DELAY_NANO:
        case U8X8_MSG_DELAY_100NANO:
            __NOP();
 8001aca:	bf00      	nop
            break;
 8001acc:	e000      	b.n	8001ad0 <u8x8_gpio_and_delay_stm32+0x34>
    		break;
 8001ace:	bf00      	nop
    }

    return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f931 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 f808 	bl	8001b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7fe feb6 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x54>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x58>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f93b 	bl	8001dba <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00e      	b.n	8001b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d80a      	bhi.n	8001b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b54:	2200      	movs	r2, #0
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b5c:	f000 f911 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b60:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_InitTick+0x5c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x20>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_IncTick+0x24>)
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000368 	.word	0x20000368

08001ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_GetTick+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000368 	.word	0x20000368

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff ffee 	bl	8001ba8 <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffde 	bl	8001ba8 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d4c:	f7ff ff8e 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff47 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff5c 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff8e 	bl	8001cc0 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5d 	bl	8001c6c <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffb0 	bl	8001d28 <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e159      	b.n	80020a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8148 	bne.w	800209e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a2 	beq.w	800209e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b57      	ldr	r3, [pc, #348]	@ (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	4a56      	ldr	r2, [pc, #344]	@ (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6a:	4b54      	ldr	r3, [pc, #336]	@ (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a49      	ldr	r2, [pc, #292]	@ (80020c4 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x202>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a48      	ldr	r2, [pc, #288]	@ (80020c8 <HAL_GPIO_Init+0x2f4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x1fe>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a47      	ldr	r2, [pc, #284]	@ (80020cc <HAL_GPIO_Init+0x2f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a46      	ldr	r2, [pc, #280]	@ (80020d0 <HAL_GPIO_Init+0x2fc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x1f6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a45      	ldr	r2, [pc, #276]	@ (80020d4 <HAL_GPIO_Init+0x300>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x1f2>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4935      	ldr	r1, [pc, #212]	@ (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201a:	4a2f      	ldr	r2, [pc, #188]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002044:	4a24      	ldr	r2, [pc, #144]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204a:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206e:	4a1a      	ldr	r2, [pc, #104]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002098:	4a0f      	ldr	r2, [pc, #60]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f aea2 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40013c00 	.word	0x40013c00

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e12b      	b.n	800237a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fa8c 	bl	8000654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002174:	f001 f8da 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8002178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a81      	ldr	r2, [pc, #516]	@ (8002384 <HAL_I2C_Init+0x274>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d807      	bhi.n	8002194 <HAL_I2C_Init+0x84>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a80      	ldr	r2, [pc, #512]	@ (8002388 <HAL_I2C_Init+0x278>)
 8002188:	4293      	cmp	r3, r2
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e006      	b.n	80021a2 <HAL_I2C_Init+0x92>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a7d      	ldr	r2, [pc, #500]	@ (800238c <HAL_I2C_Init+0x27c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0e7      	b.n	800237a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a78      	ldr	r2, [pc, #480]	@ (8002390 <HAL_I2C_Init+0x280>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002384 <HAL_I2C_Init+0x274>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d802      	bhi.n	80021e4 <HAL_I2C_Init+0xd4>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3301      	adds	r3, #1
 80021e2:	e009      	b.n	80021f8 <HAL_I2C_Init+0xe8>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	4a69      	ldr	r2, [pc, #420]	@ (8002394 <HAL_I2C_Init+0x284>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	3301      	adds	r3, #1
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800220a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	495c      	ldr	r1, [pc, #368]	@ (8002384 <HAL_I2C_Init+0x274>)
 8002214:	428b      	cmp	r3, r1
 8002216:	d819      	bhi.n	800224c <HAL_I2C_Init+0x13c>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e59      	subs	r1, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fbb1 f3f3 	udiv	r3, r1, r3
 8002226:	1c59      	adds	r1, r3, #1
 8002228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_I2C_Init+0x138>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1e59      	subs	r1, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002246:	e051      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 8002248:	2304      	movs	r3, #4
 800224a:	e04f      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <HAL_I2C_Init+0x168>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e58      	subs	r0, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	440b      	add	r3, r1
 8002262:	fbb0 f3f3 	udiv	r3, r0, r3
 8002266:	3301      	adds	r3, #1
 8002268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e012      	b.n	800229e <HAL_I2C_Init+0x18e>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	0099      	lsls	r1, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Init+0x196>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e022      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10e      	bne.n	80022cc <HAL_I2C_Init+0x1bc>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1e58      	subs	r0, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	440b      	add	r3, r1
 80022bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ca:	e00f      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	6809      	ldr	r1, [r1, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800231a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6911      	ldr	r1, [r2, #16]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68d2      	ldr	r2, [r2, #12]
 8002326:	4311      	orrs	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	000186a0 	.word	0x000186a0
 8002388:	001e847f 	.word	0x001e847f
 800238c:	003d08ff 	.word	0x003d08ff
 8002390:	431bde83 	.word	0x431bde83
 8002394:	10624dd3 	.word	0x10624dd3

08002398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	817b      	strh	r3, [r7, #10]
 80023a8:	4613      	mov	r3, r2
 80023aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fbfc 	bl	8001ba8 <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 80e0 	bne.w	8002580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2319      	movs	r3, #25
 80023c6:	2201      	movs	r2, #1
 80023c8:	4970      	ldr	r1, [pc, #448]	@ (800258c <HAL_I2C_Master_Transmit+0x1f4>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f964 	bl	8002698 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0d3      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0x50>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0cc      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d007      	beq.n	800240e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_I2C_Master_Transmit+0x1f8>)
 800244e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f89c 	bl	8002594 <I2C_MasterRequestWrite>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e08d      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800247c:	e066      	b.n	800254c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fa22 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	2b04      	cmp	r3, #4
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06b      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d11b      	bne.n	8002520 <HAL_I2C_Master_Transmit+0x188>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d017      	beq.n	8002520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	6a39      	ldr	r1, [r7, #32]
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fa19 	bl	800295c <I2C_WaitOnBTFFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	2b04      	cmp	r3, #4
 8002536:	d107      	bne.n	8002548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e01a      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d194      	bne.n	800247e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	00100002 	.word	0x00100002
 8002590:	ffff0000 	.word	0xffff0000

08002594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d006      	beq.n	80025be <I2C_MasterRequestWrite+0x2a>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d003      	beq.n	80025be <I2C_MasterRequestWrite+0x2a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e00b      	b.n	80025e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d107      	bne.n	80025e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f84f 	bl	8002698 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260e:	d103      	bne.n	8002618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e035      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002624:	d108      	bne.n	8002638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	e01b      	b.n	8002670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	11db      	asrs	r3, r3, #7
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0306 	and.w	r3, r3, #6
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f063 030f 	orn	r3, r3, #15
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <I2C_MasterRequestWrite+0xfc>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f898 	bl	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e010      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4907      	ldr	r1, [pc, #28]	@ (8002694 <I2C_MasterRequestWrite+0x100>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f888 	bl	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	00010008 	.word	0x00010008
 8002694:	00010002 	.word	0x00010002

08002698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a8:	e048      	b.n	800273c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026b0:	d044      	beq.n	800273c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7ff fa79 	bl	8001ba8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d139      	bne.n	800273c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10d      	bne.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	43da      	mvns	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4013      	ands	r3, r2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	e00c      	b.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	429a      	cmp	r2, r3
 800270c:	d116      	bne.n	800273c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e023      	b.n	8002784 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	0c1b      	lsrs	r3, r3, #16
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10d      	bne.n	8002762 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	e00c      	b.n	800277c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	43da      	mvns	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	429a      	cmp	r2, r3
 8002780:	d093      	beq.n	80026aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279a:	e071      	b.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027aa:	d123      	bne.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e067      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027fa:	d041      	beq.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	f7ff f9d4 	bl	8001ba8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d136      	bne.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10c      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e00b      	b.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	43da      	mvns	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4013      	ands	r3, r2
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e021      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10c      	bne.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e00b      	b.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f af6d 	bne.w	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d8:	e034      	b.n	8002944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f886 	bl	80029ec <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f0:	d028      	beq.n	8002944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff f959 	bl	8001ba8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11d      	bne.n	8002944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b80      	cmp	r3, #128	@ 0x80
 8002914:	d016      	beq.n	8002944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294e:	2b80      	cmp	r3, #128	@ 0x80
 8002950:	d1c3      	bne.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002968:	e034      	b.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f83e 	bl	80029ec <I2C_IsAcknowledgeFailed>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e034      	b.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002980:	d028      	beq.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff f911 	bl	8001ba8 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11d      	bne.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d016      	beq.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e007      	b.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d1c3      	bne.n	800296a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a02:	d11b      	bne.n	8002a3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e267      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6a:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4b85      	ldr	r3, [pc, #532]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b82      	ldr	r3, [pc, #520]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b7e      	ldr	r3, [pc, #504]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e242      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b76      	ldr	r3, [pc, #472]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b70      	ldr	r3, [pc, #448]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6f      	ldr	r2, [pc, #444]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6c      	ldr	r2, [pc, #432]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b69      	ldr	r3, [pc, #420]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff f850 	bl	8001ba8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff f84c 	bl	8001ba8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e207      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff f83c 	bl	8001ba8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff f838 	bl	8001ba8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1f3      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b62:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1c7      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4937      	ldr	r1, [pc, #220]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fff1 	bl	8001ba8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe ffed 	bl	8001ba8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1a8      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4925      	ldr	r1, [pc, #148]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe ffd0 	bl	8001ba8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe ffcc 	bl	8001ba8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e187      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d036      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe ffb0 	bl	8001ba8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe ffac 	bl	8001ba8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e167      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
 8002c6a:	e01b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe ff99 	bl	8001ba8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	e00e      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7fe ff95 	bl	8001ba8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d907      	bls.n	8002c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e150      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	42470000 	.word	0x42470000
 8002c94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b88      	ldr	r3, [pc, #544]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ea      	bne.n	8002c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8097 	beq.w	8002de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b81      	ldr	r3, [pc, #516]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a7c      	ldr	r2, [pc, #496]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b77      	ldr	r3, [pc, #476]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b74      	ldr	r3, [pc, #464]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ff55 	bl	8001ba8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe ff51 	bl	8001ba8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e10c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ea>
 8002d28:	4b64      	ldr	r3, [pc, #400]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a63      	ldr	r2, [pc, #396]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d34:	e01c      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x30c>
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	4a5e      	ldr	r2, [pc, #376]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d58:	4b58      	ldr	r3, [pc, #352]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d64:	4b55      	ldr	r3, [pc, #340]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	4a54      	ldr	r2, [pc, #336]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe ff16 	bl	8001ba8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe ff12 	bl	8001ba8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0cb      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	4b49      	ldr	r3, [pc, #292]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ee      	beq.n	8002d80 <HAL_RCC_OscConfig+0x334>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe ff00 	bl	8001ba8 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe fefc 	bl	8001ba8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0b5      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a38      	ldr	r2, [pc, #224]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a1 	beq.w	8002f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dea:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d05c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d141      	bne.n	8002e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b31      	ldr	r3, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fed0 	bl	8001ba8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fecc 	bl	8001ba8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e087      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	491b      	ldr	r1, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fea5 	bl	8001ba8 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fea1 	bl	8001ba8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e05c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x416>
 8002e80:	e054      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fe8e 	bl	8001ba8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fe8a 	bl	8001ba8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e045      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x444>
 8002eae:	e03d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e038      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d028      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d121      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d11a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0cc      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b65      	ldr	r3, [pc, #404]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a58      	ldr	r2, [pc, #352]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a52      	ldr	r2, [pc, #328]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d044      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d119      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e067      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b37      	ldr	r3, [pc, #220]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4934      	ldr	r1, [pc, #208]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7fe fdbc 	bl	8001ba8 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fe fdb8 	bl	8001ba8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d20c      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	@ (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fd1c 	bl	8001b20 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	08003974 	.word	0x08003974
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b094      	sub	sp, #80	@ 0x50
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003120:	4b79      	ldr	r3, [pc, #484]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d00d      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x40>
 800312c:	2b08      	cmp	r3, #8
 800312e:	f200 80e1 	bhi.w	80032f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x34>
 8003136:	2b04      	cmp	r3, #4
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x3a>
 800313a:	e0db      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b73      	ldr	r3, [pc, #460]	@ (800330c <HAL_RCC_GetSysClockFreq+0x204>)
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003140:	e0db      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b73      	ldr	r3, [pc, #460]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x208>)
 8003144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003146:	e0d8      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003152:	4b6d      	ldr	r3, [pc, #436]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b6a      	ldr	r3, [pc, #424]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	2200      	movs	r2, #0
 8003166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003168:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800316a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	633b      	str	r3, [r7, #48]	@ 0x30
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	@ 0x34
 8003176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	f04f 0000 	mov.w	r0, #0
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	0159      	lsls	r1, r3, #5
 8003188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318c:	0150      	lsls	r0, r2, #5
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4621      	mov	r1, r4
 8003194:	1a51      	subs	r1, r2, r1
 8003196:	6139      	str	r1, [r7, #16]
 8003198:	4629      	mov	r1, r5
 800319a:	eb63 0301 	sbc.w	r3, r3, r1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ac:	4659      	mov	r1, fp
 80031ae:	018b      	lsls	r3, r1, #6
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031b6:	4651      	mov	r1, sl
 80031b8:	018a      	lsls	r2, r1, #6
 80031ba:	4651      	mov	r1, sl
 80031bc:	ebb2 0801 	subs.w	r8, r2, r1
 80031c0:	4659      	mov	r1, fp
 80031c2:	eb63 0901 	sbc.w	r9, r3, r1
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031da:	4690      	mov	r8, r2
 80031dc:	4699      	mov	r9, r3
 80031de:	4623      	mov	r3, r4
 80031e0:	eb18 0303 	adds.w	r3, r8, r3
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	462b      	mov	r3, r5
 80031e8:	eb49 0303 	adc.w	r3, r9, r3
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fa:	4629      	mov	r1, r5
 80031fc:	024b      	lsls	r3, r1, #9
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003204:	4621      	mov	r1, r4
 8003206:	024a      	lsls	r2, r1, #9
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003218:	f7fc ffdc 	bl	80001d4 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003224:	e058      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	2200      	movs	r2, #0
 800322e:	4618      	mov	r0, r3
 8003230:	4611      	mov	r1, r2
 8003232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
 800323c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	0159      	lsls	r1, r3, #5
 800324e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003252:	0150      	lsls	r0, r2, #5
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4641      	mov	r1, r8
 800325a:	ebb2 0a01 	subs.w	sl, r2, r1
 800325e:	4649      	mov	r1, r9
 8003260:	eb63 0b01 	sbc.w	fp, r3, r1
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003278:	ebb2 040a 	subs.w	r4, r2, sl
 800327c:	eb63 050b 	sbc.w	r5, r3, fp
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	00eb      	lsls	r3, r5, #3
 800328a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	4614      	mov	r4, r2
 8003292:	461d      	mov	r5, r3
 8003294:	4643      	mov	r3, r8
 8003296:	18e3      	adds	r3, r4, r3
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	464b      	mov	r3, r9
 800329c:	eb45 0303 	adc.w	r3, r5, r3
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ae:	4629      	mov	r1, r5
 80032b0:	028b      	lsls	r3, r1, #10
 80032b2:	4621      	mov	r1, r4
 80032b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b8:	4621      	mov	r1, r4
 80032ba:	028a      	lsls	r2, r1, #10
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c2:	2200      	movs	r2, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	61fa      	str	r2, [r7, #28]
 80032c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032cc:	f7fc ff82 	bl	80001d4 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x200>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCC_GetSysClockFreq+0x204>)
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3750      	adds	r7, #80	@ 0x50
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	00f42400 	.word	0x00f42400
 8003310:	007a1200 	.word	0x007a1200

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff0 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	@ (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	08003984 	.word	0x08003984

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffdc 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0b5b      	lsrs	r3, r3, #13
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	08003984 	.word	0x08003984

0800337c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fb00 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	@ 0x24
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f82b 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c0      	sub	sp, #256	@ 0x100
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	ea40 0301 	orr.w	r3, r0, r1
 8003444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003474:	f021 010c 	bic.w	r1, r1, #12
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003482:	430b      	orrs	r3, r1
 8003484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	6999      	ldr	r1, [r3, #24]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	ea40 0301 	orr.w	r3, r0, r1
 80034a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8f      	ldr	r3, [pc, #572]	@ (80036e8 <UART_SetConfig+0x2cc>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <UART_SetConfig+0xa0>
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8d      	ldr	r3, [pc, #564]	@ (80036ec <UART_SetConfig+0x2d0>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d104      	bne.n	80034c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7ff ff4a 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 80034c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034c4:	e003      	b.n	80034ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7ff ff31 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 80034ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d8:	f040 810c 	bne.w	80036f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034f6:	415b      	adcs	r3, r3
 80034f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034fe:	4621      	mov	r1, r4
 8003500:	eb12 0801 	adds.w	r8, r2, r1
 8003504:	4629      	mov	r1, r5
 8003506:	eb43 0901 	adc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800352c:	462b      	mov	r3, r5
 800352e:	eb49 0303 	adc.w	r3, r9, r3
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003542:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800354a:	460b      	mov	r3, r1
 800354c:	18db      	adds	r3, r3, r3
 800354e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003550:	4613      	mov	r3, r2
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	657b      	str	r3, [r7, #84]	@ 0x54
 8003558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800355c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003560:	f7fc fe38 	bl	80001d4 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b61      	ldr	r3, [pc, #388]	@ (80036f0 <UART_SetConfig+0x2d4>)
 800356a:	fba3 2302 	umull	r2, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	011c      	lsls	r4, r3, #4
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800357c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800358c:	415b      	adcs	r3, r3
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003594:	4641      	mov	r1, r8
 8003596:	eb12 0a01 	adds.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0b01 	adc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b4:	4692      	mov	sl, r2
 80035b6:	469b      	mov	fp, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	eb1a 0303 	adds.w	r3, sl, r3
 80035be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb4b 0303 	adc.w	r3, fp, r3
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035f6:	f7fc fded 	bl	80001d4 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <UART_SetConfig+0x2d4>)
 8003602:	fba3 2301 	umull	r2, r3, r3, r1
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2264      	movs	r2, #100	@ 0x64
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	1acb      	subs	r3, r1, r3
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003616:	4b36      	ldr	r3, [pc, #216]	@ (80036f0 <UART_SetConfig+0x2d4>)
 8003618:	fba3 2302 	umull	r2, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003624:	441c      	add	r4, r3
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003630:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003640:	415b      	adcs	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003648:	4641      	mov	r1, r8
 800364a:	1851      	adds	r1, r2, r1
 800364c:	6339      	str	r1, [r7, #48]	@ 0x30
 800364e:	4649      	mov	r1, r9
 8003650:	414b      	adcs	r3, r1
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003660:	4659      	mov	r1, fp
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4651      	mov	r1, sl
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4642      	mov	r2, r8
 8003676:	189b      	adds	r3, r3, r2
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800367c:	464b      	mov	r3, r9
 800367e:	460a      	mov	r2, r1
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003694:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800369c:	460b      	mov	r3, r1
 800369e:	18db      	adds	r3, r3, r3
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a2:	4613      	mov	r3, r2
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036b2:	f7fc fd8f 	bl	80001d4 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	@ 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3332      	adds	r3, #50	@ 0x32
 80036ce:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <UART_SetConfig+0x2d4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4422      	add	r2, r4
 80036e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e4:	e106      	b.n	80038f4 <UART_SetConfig+0x4d8>
 80036e6:	bf00      	nop
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	1891      	adds	r1, r2, r2
 800370c:	6239      	str	r1, [r7, #32]
 800370e:	415b      	adcs	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003716:	4641      	mov	r1, r8
 8003718:	1854      	adds	r4, r2, r1
 800371a:	4649      	mov	r1, r9
 800371c:	eb43 0501 	adc.w	r5, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	00eb      	lsls	r3, r5, #3
 800372a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372e:	00e2      	lsls	r2, r4, #3
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	4643      	mov	r3, r8
 8003736:	18e3      	adds	r3, r4, r3
 8003738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800373c:	464b      	mov	r3, r9
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003752:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003762:	4629      	mov	r1, r5
 8003764:	008b      	lsls	r3, r1, #2
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376c:	4621      	mov	r1, r4
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003774:	f7fc fd2e 	bl	80001d4 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b60      	ldr	r3, [pc, #384]	@ (8003900 <UART_SetConfig+0x4e4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003790:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	61b9      	str	r1, [r7, #24]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a8:	4641      	mov	r1, r8
 80037aa:	1851      	adds	r1, r2, r1
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	4649      	mov	r1, r9
 80037b0:	414b      	adcs	r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	00cb      	lsls	r3, r1, #3
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ca:	4651      	mov	r1, sl
 80037cc:	00ca      	lsls	r2, r1, #3
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4642      	mov	r2, r8
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037dc:	464b      	mov	r3, r9
 80037de:	460a      	mov	r2, r1
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003812:	f7fc fcdf 	bl	80001d4 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4611      	mov	r1, r2
 800381c:	4b38      	ldr	r3, [pc, #224]	@ (8003900 <UART_SetConfig+0x4e4>)
 800381e:	fba3 2301 	umull	r2, r3, r3, r1
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2264      	movs	r2, #100	@ 0x64
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	1acb      	subs	r3, r1, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	@ 0x32
 8003830:	4a33      	ldr	r2, [pc, #204]	@ (8003900 <UART_SetConfig+0x4e4>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	673b      	str	r3, [r7, #112]	@ 0x70
 8003846:	677a      	str	r2, [r7, #116]	@ 0x74
 8003848:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	415b      	adcs	r3, r3
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800388e:	464b      	mov	r3, r9
 8003890:	460a      	mov	r2, r1
 8003892:	eb42 0303 	adc.w	r3, r2, r3
 8003896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038b0:	4649      	mov	r1, r9
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	4641      	mov	r1, r8
 80038b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ba:	4641      	mov	r1, r8
 80038bc:	008a      	lsls	r2, r1, #2
 80038be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038c2:	f7fc fc87 	bl	80001d4 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <UART_SetConfig+0x4e4>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	@ 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	3332      	adds	r3, #50	@ 0x32
 80038de:	4a08      	ldr	r2, [pc, #32]	@ (8003900 <UART_SetConfig+0x4e4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 020f 	and.w	r2, r3, #15
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4422      	add	r2, r4
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038fa:	46bd      	mov	sp, r7
 80038fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003900:	51eb851f 	.word	0x51eb851f

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	@ (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	@ (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	@ (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	@ (8003958 <__libc_init_array+0x44>)
 8003928:	f000 f818 	bl	800395c <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	08003a10 	.word	0x08003a10
 8003950:	08003a10 	.word	0x08003a10
 8003954:	08003a10 	.word	0x08003a10
 8003958:	08003a14 	.word	0x08003a14

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
