
GUI401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  08006864  08006864  00007864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ac  080089ac  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b4  080089b4  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080089b4  080089b4  000099b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080089c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000005c  08008a20  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08008a20  0000a564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00059266  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000563c  00000000  00000000  000632f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b50  00000000  00000000  00068930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002c6c  00000000  00000000  0006c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b068  00000000  00000000  0006f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022da5  00000000  00000000  0008a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae3ec  00000000  00000000  000acef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b2e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000106e0  00000000  00000000  0015b328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0016ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800684c 	.word	0x0800684c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800684c 	.word	0x0800684c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_Z4maxiii>:
 *      Author: lex
 */

#include "CustomAuxiliary.h"

	int maxi(int x, int y) { return x < y ? y : x; };
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	da01      	bge.n	80005c2 <_Z4maxiii+0x16>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	e000      	b.n	80005c4 <_Z4maxiii+0x18>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_Z4miniii>:
	int mini(int x, int y) { return x < y ? x : y; };
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	da01      	bge.n	80005e6 <_Z4miniii+0x16>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e000      	b.n	80005e8 <_Z4miniii+0x18>
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_Z6boundiiii>:
	int boundi(int minValue, int x, int maxValue) { return mini(maxi(minValue, x), maxValue); };
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffd2 	bl	80005ac <_Z4maxiii>
 8000608:	4603      	mov	r3, r0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffdf 	bl	80005d0 <_Z4miniii>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN12VideoChannelC1Ev>:

extern const uint16_t SM137R_Channel_channelTable[9][5];
extern const uint16_t channelFreqTable[];

struct VideoChannel {
	VideoChannel() {};
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	801a      	strh	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	805a      	strh	r2, [r3, #2]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	711a      	strb	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	715a      	strb	r2, [r3, #5]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	719a      	strb	r2, [r3, #6]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <_ZN12VideoChannelC1Etthhh>:
	VideoChannel(uint16_t frequency, uint16_t rssi,  uint8_t lifetime, uint8_t receiver, uint8_t cyclesPresense): frequency(frequency), rssi(rssi), lifetime(lifetime), receiver(receiver), cyclesPresense(cyclesPresense) {};
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	4608      	mov	r0, r1
 800065a:	4611      	mov	r1, r2
 800065c:	461a      	mov	r2, r3
 800065e:	4603      	mov	r3, r0
 8000660:	817b      	strh	r3, [r7, #10]
 8000662:	460b      	mov	r3, r1
 8000664:	813b      	strh	r3, [r7, #8]
 8000666:	4613      	mov	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	897a      	ldrh	r2, [r7, #10]
 800066e:	801a      	strh	r2, [r3, #0]
 8000670:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	805a      	strh	r2, [r3, #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	711a      	strb	r2, [r3, #4]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	7e3a      	ldrb	r2, [r7, #24]
 8000682:	715a      	strb	r2, [r3, #5]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	7f3a      	ldrb	r2, [r7, #28]
 8000688:	719a      	strb	r2, [r3, #6]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZL21compareCnannelsByRSSIPKvS0_>:
#include <stdlib.h>
#include <string.h>

#define kChannelLinesCount 2

static int compareCnannelsByRSSI(const void *a, const void *b) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    return ((*(VideoChannel*)a).rssi - (*(VideoChannel*)b).rssi);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006a8:	461a      	mov	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006b0:	1ad3      	subs	r3, r2, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <_ZN18MainViewControllerC1ER11u8g2_struct>:

MainViewController::MainViewController(u8g2_t& u8g2): u8g2(u8g2) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b09a      	sub	sp, #104	@ 0x68
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fac5 	bl	8000c5c <_ZN14ViewControllerC1Ev>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3304      	adds	r3, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f9f0 	bl	8005abc <_ZN13EventRecieverC1Ev>
 80006dc:	4a5c      	ldr	r2, [pc, #368]	@ (8000850 <_ZN18MainViewControllerC1ER11u8g2_struct+0x190>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000854 <_ZN18MainViewControllerC1ER11u8g2_struct+0x194>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	731a      	strb	r2, [r3, #12]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	739a      	strb	r2, [r3, #14]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	220a      	movs	r2, #10
 80006fe:	73da      	strb	r2, [r3, #15]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	741a      	strb	r2, [r3, #16]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3312      	adds	r3, #18
 800070a:	2409      	movs	r4, #9
 800070c:	461d      	mov	r5, r3
 800070e:	e004      	b.n	800071a <_ZN18MainViewControllerC1ER11u8g2_struct+0x5a>
 8000710:	4628      	mov	r0, r5
 8000712:	f7ff ff83 	bl	800061c <_ZN12VideoChannelC1Ev>
 8000716:	3c01      	subs	r4, #1
 8000718:	3508      	adds	r5, #8
 800071a:	2c00      	cmp	r4, #0
 800071c:	daf8      	bge.n	8000710 <_ZN18MainViewControllerC1ER11u8g2_struct+0x50>
				VideoChannel(5079, 5, 1, 1, 1),
				VideoChannel(4995, -7, 1, 1, 1),
				VideoChannel(5959, 8, 1, 1, 1),
				VideoChannel(6001, 19, 1, 1, 1),
				VideoChannel(6183, 10, 1, 1, 1),
	};
 800071e:	f107 040c 	add.w	r4, r7, #12
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2301      	movs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000730:	f241 61e9 	movw	r1, #5865	@ 0x16e9
 8000734:	4620      	mov	r0, r4
 8000736:	f7ff ff8b 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800073a:	3408      	adds	r4, #8
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	2202      	movs	r2, #2
 8000748:	f241 61f8 	movw	r1, #5880	@ 0x16f8
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ff7f 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 8000752:	3408      	adds	r4, #8
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000762:	f241 618b 	movw	r1, #5771	@ 0x168b
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff ff72 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800076c:	3408      	adds	r4, #8
 800076e:	2301      	movs	r3, #1
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	2301      	movs	r3, #1
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2204      	movs	r2, #4
 800077a:	f241 613f 	movw	r1, #5695	@ 0x163f
 800077e:	4620      	mov	r0, r4
 8000780:	f7ff ff66 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 8000784:	3408      	adds	r4, #8
 8000786:	2301      	movs	r3, #1
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	2206      	movs	r2, #6
 8000792:	f241 5125 	movw	r1, #5413	@ 0x1525
 8000796:	4620      	mov	r0, r4
 8000798:	f7ff ff5a 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800079c:	3408      	adds	r4, #8
 800079e:	2301      	movs	r3, #1
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	2205      	movs	r2, #5
 80007aa:	f241 31d7 	movw	r1, #5079	@ 0x13d7
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff ff4e 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007b4:	3408      	adds	r4, #8
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	f64f 72f9 	movw	r2, #65529	@ 0xfff9
 80007c4:	f241 3183 	movw	r1, #4995	@ 0x1383
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff ff41 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007ce:	3408      	adds	r4, #8
 80007d0:	2301      	movs	r3, #1
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2208      	movs	r2, #8
 80007dc:	f241 7147 	movw	r1, #5959	@ 0x1747
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff ff35 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007e6:	3408      	adds	r4, #8
 80007e8:	2301      	movs	r3, #1
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2213      	movs	r2, #19
 80007f4:	f241 7171 	movw	r1, #6001	@ 0x1771
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff29 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007fe:	f104 0008 	add.w	r0, r4, #8
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2301      	movs	r3, #1
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	220a      	movs	r2, #10
 800080e:	f641 0127 	movw	r1, #6183	@ 0x1827
 8000812:	f7ff ff1d 	bl	8000650 <_ZN12VideoChannelC1Etthhh>

	size_t n = sizeof(unsortedChannels) / sizeof(unsortedChannels[0]);
 8000816:	230a      	movs	r3, #10
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
	qsort(unsortedChannels, n, sizeof(VideoChannel), compareCnannelsByRSSI);
 800081a:	f107 000c 	add.w	r0, r7, #12
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <_ZN18MainViewControllerC1ER11u8g2_struct+0x198>)
 8000820:	2208      	movs	r2, #8
 8000822:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000824:	f005 fa0f 	bl	8005c46 <qsort>
	memcpy(channels, unsortedChannels, mini(sizeof(unsortedChannels), sizeof(channels)));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f103 0412 	add.w	r4, r3, #18
 800082e:	2150      	movs	r1, #80	@ 0x50
 8000830:	2050      	movs	r0, #80	@ 0x50
 8000832:	f7ff fecd 	bl	80005d0 <_Z4miniii>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4620      	mov	r0, r4
 8000842:	f005 fc91 	bl	8006168 <memcpy>
};
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	3760      	adds	r7, #96	@ 0x60
 800084c:	46bd      	mov	sp, r7
 800084e:	bdb0      	pop	{r4, r5, r7, pc}
 8000850:	08006e14 	.word	0x08006e14
 8000854:	08006e28 	.word	0x08006e28
 8000858:	08000699 	.word	0x08000699

0800085c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>:

 void MainViewController::handleEvent(EventSender* eventSender, UserEvent userEvent) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4639      	mov	r1, r7
 8000868:	e881 000c 	stmia.w	r1, {r2, r3}
	 if (userEvent.state == UserEventState::Long) {
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d113      	bne.n	800089a <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3e>
		 if (userEvent.type == UserEventType::Left) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d106      	bne.n	8000886 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x2a>
			 soundEnabled = false;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2200      	movs	r2, #0
 800087c:	735a      	strb	r2, [r3, #13]
			 isUpdated = false;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	731a      	strb	r2, [r3, #12]
	 	 		 }

	 	 	 	 isUpdated = false;
	 	 	 }
	 	 }
 }
 8000884:	e060      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 else if (userEvent.type == UserEventType::Right) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d15d      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 		 soundEnabled = true;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2201      	movs	r2, #1
 8000890:	735a      	strb	r2, [r3, #13]
	 	 	 isUpdated = false;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	731a      	strb	r2, [r3, #12]
 }
 8000898:	e056      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 else if (userEvent.state == UserEventState::Up) {
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d153      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 if (userEvent.type == UserEventType::Up) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d121      	bne.n	80008ea <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x8e>
	 	 		 selectedItem = boundi(0, selectedItem - 1, channelCount - 1);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	7c1b      	ldrb	r3, [r3, #16]
 80008aa:	1e59      	subs	r1, r3, #1
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	7bdb      	ldrb	r3, [r3, #15]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	461a      	mov	r2, r3
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe9d 	bl	80005f4 <_Z6boundiiii>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	741a      	strb	r2, [r3, #16]
	 	 		 if (selectedItem < currentOffset) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7c1a      	ldrb	r2, [r3, #16]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	7b9b      	ldrb	r3, [r3, #14]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d209      	bcs.n	80008e2 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x86>
	 	 			currentOffset = maxi(0, selectedItem);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	7c1b      	ldrb	r3, [r3, #16]
 80008d2:	4619      	mov	r1, r3
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fe69 	bl	80005ac <_Z4maxiii>
 80008da:	4603      	mov	r3, r0
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2200      	movs	r2, #0
 80008e6:	731a      	strb	r2, [r3, #12]
 }
 80008e8:	e02e      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 else if (userEvent.type == UserEventType::Down) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d12b      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 		 selectedItem = boundi(0, selectedItem + 1, channelCount - 1);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	7c1b      	ldrb	r3, [r3, #16]
 80008f4:	1c59      	adds	r1, r3, #1
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	7bdb      	ldrb	r3, [r3, #15]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	461a      	mov	r2, r3
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fe78 	bl	80005f4 <_Z6boundiiii>
 8000904:	4603      	mov	r3, r0
 8000906:	b2da      	uxtb	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	741a      	strb	r2, [r3, #16]
	 	 		 if ((currentOffset + kChannelLinesCount - 1) < selectedItem) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	7b9b      	ldrb	r3, [r3, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	7c12      	ldrb	r2, [r2, #16]
 8000916:	4293      	cmp	r3, r2
 8000918:	da13      	bge.n	8000942 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xe6>
	 	 			 currentOffset = boundi(0, selectedItem - kChannelLinesCount + 1, maxi(0, channelCount - kChannelLinesCount + 1));
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	7c1b      	ldrb	r3, [r3, #16]
 800091e:	1e5c      	subs	r4, r3, #1
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	7bdb      	ldrb	r3, [r3, #15]
 8000924:	3b01      	subs	r3, #1
 8000926:	4619      	mov	r1, r3
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fe3f 	bl	80005ac <_Z4maxiii>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	4621      	mov	r1, r4
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe5d 	bl	80005f4 <_Z6boundiiii>
 800093a:	4603      	mov	r3, r0
 800093c:	b2da      	uxtb	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	731a      	strb	r2, [r3, #12]
 }
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <_ZThn4_N18MainViewController11handleEventEP11EventSender9UserEvent>:

private:
	u8g2_t& u8g2;
	bool isUpdated = false;

	void handleEvent(EventSender* eventSender, UserEvent event);
 8000950:	f1a0 0004 	sub.w	r0, r0, #4
 8000954:	f7ff bf82 	b.w	800085c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>

08000958 <_ZN18MainViewController6updateEv>:

 void MainViewController::update() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
	 if (isUpdated) { return; };
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7b1b      	ldrb	r3, [r3, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <_ZN18MainViewController6updateEv+0x48>
	 isUpdated = true;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	731a      	strb	r2, [r3, #12]

	 u8g2_ClearBuffer(&u8g2);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f962 	bl	8001c3c <u8g2_ClearBuffer>
	 this->drawMainScreen(&u8g2, 50, soundEnabled, false, false, true);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6899      	ldr	r1, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7b5b      	ldrb	r3, [r3, #13]
 8000980:	2201      	movs	r2, #1
 8000982:	9202      	str	r2, [sp, #8]
 8000984:	2200      	movs	r2, #0
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	2232      	movs	r2, #50	@ 0x32
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f80a 	bl	80009a8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>
	 u8g2_SendBuffer(&u8g2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4618      	mov	r0, r3
 800099a:	f001 f9c2 	bl	8001d22 <u8g2_SendBuffer>
 800099e:	e000      	b.n	80009a2 <_ZN18MainViewController6updateEv+0x4a>
	 if (isUpdated) { return; };
 80009a0:	bf00      	nop
 }
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>:

 void MainViewController::drawMainScreen(u8g2_t *u8g2, int batteryLevel, bool soundEnabled, bool isScanning, bool alertState, bool dBmMode) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	@ 0x58
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	70fb      	strb	r3, [r7, #3]
   const uint8_t listStartY = 19;
 80009b6:	2313      	movs	r3, #19
 80009b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
   const uint8_t itemHeight = 8;
 80009bc:	2308      	movs	r3, #8
 80009be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
   uint8_t y = listStartY;
 80009c2:	2313      	movs	r3, #19
 80009c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


   u8g2_SetDrawColor(u8g2, 1);
 80009c8:	2101      	movs	r1, #1
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	f002 f8a6 	bl	8002b1c <u8g2_SetDrawColor>
   drawBatteryIndicator(u8g2, 108, 0, batteryLevel);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2200      	movs	r2, #0
 80009d6:	216c      	movs	r1, #108	@ 0x6c
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f002 ffc3 	bl	8003964 <drawBatteryIndicator>
   drawSoundIcon(u8g2, 88, 0, soundEnabled);
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	2200      	movs	r2, #0
 80009e2:	2158      	movs	r1, #88	@ 0x58
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f003 f8a9 	bl	8003b3c <drawSoundIcon>
   u8g2_SetFont(u8g2, u8g2_font_6x12_t_cyrillic);
 80009ea:	497d      	ldr	r1, [pc, #500]	@ (8000be0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x238>)
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f001 ff81 	bl	80028f4 <u8g2_SetFont>

   if (isScanning) {
 80009f2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d01a      	beq.n	8000a30 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x88>
     u8g2_SetDrawColor(u8g2, 1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f002 f88d 	bl	8002b1c <u8g2_SetDrawColor>
     u8g2_DrawBox(u8g2, 0, y - itemHeight-2, 128, itemHeight+1);
 8000a02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b0a      	subs	r3, #10
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	2309      	movs	r3, #9
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	2100      	movs	r1, #0
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f001 f87e 	bl	8001b16 <u8g2_DrawBox>
     u8g2_SetDrawColor(u8g2, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	f002 f87d 	bl	8002b1c <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Сканування...");
 8000a22:	4b70      	ldr	r3, [pc, #448]	@ (8000be4 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x23c>)
 8000a24:	2211      	movs	r2, #17
 8000a26:	2101      	movs	r1, #1
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f001 fec1 	bl	80027b0 <u8g2_DrawUTF8>
 8000a2e:	e009      	b.n	8000a44 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x9c>
   } else {
     u8g2_SetDrawColor(u8g2, 1);
 8000a30:	2101      	movs	r1, #1
 8000a32:	68b8      	ldr	r0, [r7, #8]
 8000a34:	f002 f872 	bl	8002b1c <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Обраний канал:");
 8000a38:	4b6b      	ldr	r3, [pc, #428]	@ (8000be8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x240>)
 8000a3a:	2211      	movs	r2, #17
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	f001 feb6 	bl	80027b0 <u8g2_DrawUTF8>
   }

   y = y - 1;
 8000a44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	7b9b      	ldrb	r3, [r3, #14]
 8000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a54:	e0aa      	b.n	8000bac <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x204>
     if(channels[i].frequency > 0) {
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4413      	add	r3, r2
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 809f 	beq.w	8000ba6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       y += itemHeight;
 8000a68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
       char channelName[24] = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
       getChannelName(channels[i].frequency, channels[i].receiver, channelName);
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a88:	3302      	adds	r3, #2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	8858      	ldrh	r0, [r3, #2]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a94:	3302      	adds	r3, #2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	79db      	ldrb	r3, [r3, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f005 f85a 	bl	8005b5c <_Z14getChannelNametiPc>
       int rssi = channels[i].rssi; //convertRSSIToDBm(channels[i].rssi, batteryVoltage, channels[i].receiver);
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aac:	3302      	adds	r3, #2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ab6:	643b      	str	r3, [r7, #64]	@ 0x40
       if (selectedItem == i) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	7c1b      	ldrb	r3, [r3, #16]
 8000abc:	461a      	mov	r2, r3
 8000abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d114      	bne.n	8000aee <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x146>
    	   u8g2_SetDrawColor(u8g2, 1);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	68b8      	ldr	r0, [r7, #8]
 8000ac8:	f002 f828 	bl	8002b1c <u8g2_SetDrawColor>
    	   u8g2_DrawBox(u8g2, 1, y - itemHeight, 128, itemHeight);
 8000acc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2380      	movs	r3, #128	@ 0x80
 8000adc:	2101      	movs	r1, #1
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	f001 f819 	bl	8001b16 <u8g2_DrawBox>
    	   u8g2_SetDrawColor(u8g2, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f002 f818 	bl	8002b1c <u8g2_SetDrawColor>
 8000aec:	e003      	b.n	8000af6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x14e>
       } else {
    	   u8g2_SetDrawColor(u8g2, 1);
 8000aee:	2101      	movs	r1, #1
 8000af0:	68b8      	ldr	r0, [r7, #8]
 8000af2:	f002 f813 	bl	8002b1c <u8g2_SetDrawColor>
       }

       char printBuffer[24] = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
       if(dBmMode){
 8000b08:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d01c      	beq.n	8000b4a <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1a2>
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s S:%ddBm", channels[i].frequency, channelName, rssi);
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b14:	3302      	adds	r3, #2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4413      	add	r3, r2
 8000b1a:	885b      	ldrh	r3, [r3, #2]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f107 0010 	add.w	r0, r7, #16
 8000b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x244>)
 8000b30:	2118      	movs	r1, #24
 8000b32:	f005 fa79 	bl	8006028 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 8000b36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2100      	movs	r1, #0
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f001 fe1a 	bl	800277c <u8g2_DrawStr>
 8000b48:	e02d      	b.n	8000ba6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       } else {
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s", channels[i].frequency, channelName);
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b4e:	3302      	adds	r3, #2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f107 0010 	add.w	r0, r7, #16
 8000b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4613      	mov	r3, r2
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x248>)
 8000b66:	2118      	movs	r1, #24
 8000b68:	f005 fa5e 	bl	8006028 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 8000b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f001 fdff 	bl	800277c <u8g2_DrawStr>
    	   drawSignalStrengthIndicator(u8g2, 64, y - itemHeight, rssi, (selectedItem == i + 1) ? true : false);
 8000b7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b82:	f1a3 0208 	sub.w	r2, r3, #8
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	7c1b      	ldrb	r3, [r3, #16]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4299      	cmp	r1, r3
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b9e:	2140      	movs	r1, #64	@ 0x40
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f002 ff3b 	bl	8003a1c <drawSignalStrengthIndicator>
   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 8000ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ba8:	3301      	adds	r3, #1
 8000baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	7bdb      	ldrb	r3, [r3, #15]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	da06      	bge.n	8000bc6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x21e>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7b9b      	ldrb	r3, [r3, #14]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f77f af48 	ble.w	8000a56 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0xae>
       }
     }
   }

   if (alertState) {
 8000bc6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x230>
 	  drawAlertIcon(u8g2, 0, 51);
 8000bce:	2233      	movs	r2, #51	@ 0x33
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f002 ffe4 	bl	8003ba0 <drawAlertIcon>
   }
 }
 8000bd8:	bf00      	nop
 8000bda:	3750      	adds	r7, #80	@ 0x50
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08007684 	.word	0x08007684
 8000be4:	08006864 	.word	0x08006864
 8000be8:	0800687c 	.word	0x0800687c
 8000bec:	08006898 	.word	0x08006898
 8000bf0:	080068a8 	.word	0x080068a8

08000bf4 <_ZN18MainViewControllerD1Ev>:
class MainViewController: public ViewController, public EventReciever {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <_ZN18MainViewControllerD1Ev+0x30>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <_ZN18MainViewControllerD1Ev+0x34>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 ff65 	bl	8005adc <_ZN13EventRecieverD1Ev>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f831 	bl	8000c7c <_ZN14ViewControllerD1Ev>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08006e14 	.word	0x08006e14
 8000c28:	08006e28 	.word	0x08006e28

08000c2c <_ZThn4_N18MainViewControllerD1Ev>:
 8000c2c:	f1a0 0004 	sub.w	r0, r0, #4
 8000c30:	e7e0      	b.n	8000bf4 <_ZN18MainViewControllerD1Ev>
 8000c32:	bf00      	nop

08000c34 <_ZN18MainViewControllerD0Ev>:
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffd9 	bl	8000bf4 <_ZN18MainViewControllerD1Ev>
 8000c42:	2164      	movs	r1, #100	@ 0x64
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f004 ffc1 	bl	8005bcc <_ZdlPvj>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_ZThn4_N18MainViewControllerD0Ev>:
 8000c54:	f1a0 0004 	sub.w	r0, r0, #4
 8000c58:	e7ec      	b.n	8000c34 <_ZN18MainViewControllerD0Ev>
	...

08000c5c <_ZN14ViewControllerC1Ev>:
 *      Author: lex
 */

#include "ViewController.h"

ViewController::ViewController() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <_ZN14ViewControllerC1Ev+0x1c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	08006e3c 	.word	0x08006e3c

08000c7c <_ZN14ViewControllerD1Ev>:

ViewController::~ViewController() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <_ZN14ViewControllerD1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	08006e3c 	.word	0x08006e3c

08000c9c <_ZN14ViewControllerD0Ev>:
ViewController::~ViewController() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
}
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe9 	bl	8000c7c <_ZN14ViewControllerD1Ev>
 8000caa:	2104      	movs	r1, #4
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f004 ff8d 	bl	8005bcc <_ZdlPvj>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b44      	ldr	r3, [pc, #272]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a43      	ldr	r2, [pc, #268]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b41      	ldr	r3, [pc, #260]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a35      	ldr	r2, [pc, #212]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <MX_GPIO_Init+0x12c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4829      	ldr	r0, [pc, #164]	@ (8000dec <MX_GPIO_Init+0x130>)
 8000d48:	f003 fa8c 	bl	8004264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4823      	ldr	r0, [pc, #140]	@ (8000df0 <MX_GPIO_Init+0x134>)
 8000d64:	f003 f8e2 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BUTTON_PIN_Pin DOWN_BUTTON_PIN_Pin UP_BUTTON_PIN_Pin LEFT_BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN_Pin|DOWN_BUTTON_PIN_Pin|UP_BUTTON_PIN_Pin|LEFT_BUTTON_PIN_Pin;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d6c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481c      	ldr	r0, [pc, #112]	@ (8000df0 <MX_GPIO_Init+0x134>)
 8000d7e:	f003 f8d5 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_GPIO_Init+0x130>)
 8000d9a:	f003 f8c7 	bl	8003f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2006      	movs	r0, #6
 8000da4:	f003 f88b 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000da8:	2006      	movs	r0, #6
 8000daa:	f003 f8a4 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2007      	movs	r0, #7
 8000db4:	f003 f883 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000db8:	2007      	movs	r0, #7
 8000dba:	f003 f89c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f003 f87b 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f003 f894 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2009      	movs	r0, #9
 8000dd4:	f003 f873 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000dd8:	2009      	movs	r0, #9
 8000dda:	f003 f88c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020800 	.word	0x40020800

08000df4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000dfa:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <MX_I2C3_Init+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e00:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <MX_I2C3_Init+0x58>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_I2C3_Init+0x50>)
 8000e32:	f003 fa49 	bl	80042c8 <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 f93e 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000078 	.word	0x20000078
 8000e48:	40005c00 	.word	0x40005c00
 8000e4c:	00061a80 	.word	0x00061a80

08000e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <HAL_I2C_MspInit+0xc0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d14a      	bne.n	8000f08 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f003 f830 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000edc:	2309      	movs	r3, #9
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <HAL_I2C_MspInit+0xcc>)
 8000ee8:	f003 f820 	bl	8003f2c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000ef6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40005c00 	.word	0x40005c00
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400

08000f20 <_Z9u8g2_Initv>:
    1,
    2,
	3
};

void u8g2_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay_stm32);
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <_Z9u8g2_Initv+0x38>)
 8000f26:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <_Z9u8g2_Initv+0x3c>)
 8000f28:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <_Z9u8g2_Initv+0x40>)
 8000f2a:	480e      	ldr	r0, [pc, #56]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f2c:	f000 ff18 	bl	8001d60 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
    u8g2_InitDisplay(&u8g2);
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f32:	f002 fbf7 	bl	8003724 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000f36:	2100      	movs	r1, #0
 8000f38:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f3a:	f002 fc02 	bl	8003742 <u8x8_SetPowerSave>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8000f3e:	490a      	ldr	r1, [pc, #40]	@ (8000f68 <_Z9u8g2_Initv+0x48>)
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f42:	f001 fcd7 	bl	80028f4 <u8g2_SetFont>

    u8g2_ClearBuffer(&u8g2);
 8000f46:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f48:	f000 fe78 	bl	8001c3c <u8g2_ClearBuffer>
    u8g2_SendBuffer(&u8g2);
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <_Z9u8g2_Initv+0x44>)
 8000f4e:	f000 fee8 	bl	8001d22 <u8g2_SendBuffer>
//    u8g2_SendBuffer(&u8g2);

//    ssd1306_SetCursor(5, 5);
//    ssd1306_WriteString("qwerty", Font_16x26, White);
//    ssd1306_UpdateScreen();
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08003925 	.word	0x08003925
 8000f5c:	08003861 	.word	0x08003861
 8000f60:	080088d8 	.word	0x080088d8
 8000f64:	200000cc 	.word	0x200000cc
 8000f68:	08006ea0 	.word	0x08006ea0

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09a      	sub	sp, #104	@ 0x68
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f002 fe33 	bl	8003bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f81b 	bl	8000fb0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f7ff fe9f 	bl	8000cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 f97d 	bl	800127c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000f82:	f7ff ff37 	bl	8000df4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  u8g2_Init();
 8000f86:	f7ff ffcb 	bl	8000f20 <_Z9u8g2_Initv>
//  u8g2_SendBuffer(&u8g2);

//  ssd1306_Line(10, 5, 108, 5, White);
//  ssd1306_UpdateScreen();

  MainViewController mainViewController = MainViewController(u8g2);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <main+0x3c>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb96 	bl	80006c0 <_ZN18MainViewControllerC1ER11u8g2_struct>
  userActionPanel.eventReciever = &mainViewController;
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <main+0x40>)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	3304      	adds	r3, #4
 8000f9a:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainViewController.update();
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fcda 	bl	8000958 <_ZN18MainViewController6updateEv>
 8000fa4:	e7fa      	b.n	8000f9c <main+0x30>
 8000fa6:	bf00      	nop
 8000fa8:	200000cc 	.word	0x200000cc
 8000fac:	20000160 	.word	0x20000160

08000fb0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 f88e 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <_Z18SystemClock_Configv+0xe4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8001094 <_Z18SystemClock_Configv+0xe4>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <_Z18SystemClock_Configv+0xe4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <_Z18SystemClock_Configv+0xe8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ffc:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <_Z18SystemClock_Configv+0xe8>)
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <_Z18SystemClock_Configv+0xe8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001024:	2310      	movs	r3, #16
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001028:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102e:	2304      	movs	r3, #4
 8001030:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001032:	2307      	movs	r3, #7
 8001034:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fde2 	bl	8004c04 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001050:	f000 f834 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2302      	movs	r3, #2
 800105a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f004 f83f 	bl	80050f4 <HAL_RCC_ClockConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001086:	f000 f819 	bl	80010bc <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	@ 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	userActionPanel.handleInterrupt(GPIO_Pin);
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80010ac:	f000 fa32 	bl	8001514 <_ZN15UserActionPanel15handleInterruptEt>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000160 	.word	0x20000160

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <Error_Handler+0x8>

080010c8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80010ce:	f000 f9ab 	bl	8001428 <_ZN15UserActionPanelC1Ev>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000160 	.word	0x20000160

080010dc <_Z41__static_initialization_and_destruction_1v>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <_Z41__static_initialization_and_destruction_1v+0x10>)
 80010e2:	f000 f9ef 	bl	80014c4 <_ZN15UserActionPanelD1Ev>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000160 	.word	0x20000160

080010f0 <_GLOBAL__sub_I_u8g2>:
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	f7ff ffe8 	bl	80010c8 <_Z41__static_initialization_and_destruction_0v>
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_GLOBAL__sub_D_u8g2>:
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	f7ff ffed 	bl	80010dc <_Z41__static_initialization_and_destruction_1v>
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_MspInit+0x4c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_MspInit+0x4c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <NMI_Handler+0x4>

0800115c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <MemManage_Handler+0x4>

0800116c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <UsageFault_Handler+0x4>

0800117c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f002 fd69 	bl	8003c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_BUTTON_PIN_Pin);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f003 f86e 	bl	8004298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_PIN_Pin);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f003 f867 	bl	8004298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}

080011ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_PIN_Pin);
 80011d2:	2004      	movs	r0, #4
 80011d4:	f003 f860 	bl	8004298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_BUTTON_PIN_Pin);
 80011e0:	2008      	movs	r0, #8
 80011e2:	f003 f859 	bl	8004298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <_sbrk+0x5c>)
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <_sbrk+0x60>)
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <_sbrk+0x64>)
 800120a:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <_sbrk+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	429a      	cmp	r2, r3
 800121a:	d207      	bcs.n	800122c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800121c:	f004 ff78 	bl	8006110 <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	220c      	movs	r2, #12
 8001224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800122a:	e009      	b.n	8001240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <_sbrk+0x64>)
 800123c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20018000 	.word	0x20018000
 800124c:	00000400 	.word	0x00000400
 8001250:	200001ac 	.word	0x200001ac
 8001254:	20000568 	.word	0x20000568

08001258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <MX_USART2_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f004 f93e 	bl	8005534 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f7ff fefd 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001b0 	.word	0x200001b0
 80012cc:	40004400 	.word	0x40004400

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_UART_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_UART_MspInit+0x88>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <HAL_UART_MspInit+0x88>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_UART_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800133a:	2307      	movs	r3, #7
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_UART_MspInit+0x8c>)
 8001346:	f002 fdf1 	bl	8003f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004400 	.word	0x40004400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001364:	f7ff ff78 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800138e:	f004 fec5 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fdeb 	bl	8000f6c <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013a4:	080089c4 	.word	0x080089c4
  ldr r2, =_sbss
 80013a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013ac:	20000564 	.word	0x20000564

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>

080013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>:
enum class UserEventState { Down, Up, Long };
enum class UserEventType { Down, Up, Left, Right, Enter };

class UserEvent: public Event {
public:
	UserEvent(UserEventState state, UserEventType type): state(state), type(type) { };
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_ZN10UserButtonC1EtP12GPIO_TypeDef>:
	virtual void onButtonLong(UserButton* sender) = 0;
};

class UserButton {
public:
	UserButton(uint16_t pin, GPIO_TypeDef* port): pin(pin), port(port) {}
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	817b      	strh	r3, [r7, #10]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	897a      	ldrh	r2, [r7, #10]
 80013ea:	801a      	strh	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <_ZN18UserButtonDelegateC1Ev>:
class UserButtonDelegate {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <_ZN18UserButtonDelegateC1Ev+0x1c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	08006e94 	.word	0x08006e94

08001428 <_ZN15UserActionPanelC1Ev>:

#include "UserActionPanel.h"
#include "UserEvent.h"


UserActionPanel::UserActionPanel() {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fb62 	bl	8005afc <_ZN11EventSenderC1Ev>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3308      	adds	r3, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffe3 	bl	8001408 <_ZN18UserButtonDelegateC1Ev>
 8001442:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <_ZN15UserActionPanelC1Ev+0x90>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <_ZN15UserActionPanelC1Ev+0x94>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	330c      	adds	r3, #12
 8001452:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <_ZN15UserActionPanelC1Ev+0x98>)
 8001454:	2104      	movs	r1, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffbe 	bl	80013d8 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	331c      	adds	r3, #28
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <_ZN15UserActionPanelC1Ev+0x98>)
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffb7 	bl	80013d8 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	332c      	adds	r3, #44	@ 0x2c
 800146e:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_ZN15UserActionPanelC1Ev+0x98>)
 8001470:	2108      	movs	r1, #8
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffb0 	bl	80013d8 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	333c      	adds	r3, #60	@ 0x3c
 800147c:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <_ZN15UserActionPanelC1Ev+0x98>)
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ffa9 	bl	80013d8 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
	upButton.delegate = this;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f103 0208 	add.w	r2, r3, #8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
	downButton.delegate = this;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	621a      	str	r2, [r3, #32]
	leftButton.delegate = this;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f103 0208 	add.w	r2, r3, #8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
	rightButton.delegate = this;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0208 	add.w	r2, r3, #8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08006e64 	.word	0x08006e64
 80014bc:	08006e80 	.word	0x08006e80
 80014c0:	40020800 	.word	0x40020800

080014c4 <_ZN15UserActionPanelD1Ev>:

UserActionPanel::~UserActionPanel() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <_ZN15UserActionPanelD1Ev+0x28>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <_ZN15UserActionPanelD1Ev+0x2c>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated destructor stub
}
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb1e 	bl	8005b1c <_ZN11EventSenderD1Ev>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	08006e64 	.word	0x08006e64
 80014f0:	08006e80 	.word	0x08006e80

080014f4 <_ZN15UserActionPanelD0Ev>:
UserActionPanel::~UserActionPanel() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
}
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffe1 	bl	80014c4 <_ZN15UserActionPanelD1Ev>
 8001502:	214c      	movs	r1, #76	@ 0x4c
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f004 fb61 	bl	8005bcc <_ZdlPvj>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN15UserActionPanel15handleInterruptEt>:

void UserActionPanel::handleInterrupt(uint16_t pin) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
	switch (pin) {
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	3b01      	subs	r3, #1
 8001524:	2b07      	cmp	r3, #7
 8001526:	d82b      	bhi.n	8001580 <_ZN15UserActionPanel15handleInterruptEt+0x6c>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <_ZN15UserActionPanel15handleInterruptEt+0x1c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001575 	.word	0x08001575
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001581 	.word	0x08001581
 800153c:	08001551 	.word	0x08001551
 8001540:	08001581 	.word	0x08001581
 8001544:	08001581 	.word	0x08001581
 8001548:	08001581 	.word	0x08001581
 800154c:	08001569 	.word	0x08001569
		case UP_BUTTON_PIN_Pin: upButton.handleInterrupt(); break;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	330c      	adds	r3, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f9b1 	bl	80018bc <_ZN10UserButton15handleInterruptEv>
 800155a:	e012      	b.n	8001582 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case DOWN_BUTTON_PIN_Pin: downButton.handleInterrupt(); break;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	331c      	adds	r3, #28
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f9ab 	bl	80018bc <_ZN10UserButton15handleInterruptEv>
 8001566:	e00c      	b.n	8001582 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case LEFT_BUTTON_PIN_Pin: leftButton.handleInterrupt(); break;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	332c      	adds	r3, #44	@ 0x2c
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f9a5 	bl	80018bc <_ZN10UserButton15handleInterruptEv>
 8001572:	e006      	b.n	8001582 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case RIGHT_BUTTON_PIN_Pin: rightButton.handleInterrupt(); break;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	333c      	adds	r3, #60	@ 0x3c
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f99f 	bl	80018bc <_ZN10UserButton15handleInterruptEv>
 800157e:	e000      	b.n	8001582 <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    default: break;
 8001580:	bf00      	nop
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop

0800158c <_ZN15UserActionPanel12onButtonDownEP10UserButton>:

void UserActionPanel::onButtonDown(UserButton* sender) {
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b08b      	sub	sp, #44	@ 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d073      	beq.n	8001684 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d071      	beq.n	8001688 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xfc>

	switch (sender->pin) {
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	d86e      	bhi.n	800168c <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x100>
 80015ae:	a201      	add	r2, pc, #4	@ (adr r2, 80015b4 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x28>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	08001659 	.word	0x08001659
 80015b8:	08001601 	.word	0x08001601
 80015bc:	0800168d 	.word	0x0800168d
 80015c0:	080015d5 	.word	0x080015d5
 80015c4:	0800168d 	.word	0x0800168d
 80015c8:	0800168d 	.word	0x0800168d
 80015cc:	0800168d 	.word	0x0800168d
 80015d0:	0800162d 	.word	0x0800162d
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Up)); break;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685d      	ldr	r5, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3308      	adds	r3, #8
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	687e      	ldr	r6, [r7, #4]
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2201      	movs	r2, #1
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fee0 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	cb0c      	ldmia	r3, {r2, r3}
 80015f8:	4631      	mov	r1, r6
 80015fa:	4628      	mov	r0, r5
 80015fc:	47a0      	blx	r4
 80015fe:	e046      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Down)); break;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685d      	ldr	r5, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3308      	adds	r3, #8
 800160c:	681c      	ldr	r4, [r3, #0]
 800160e:	687e      	ldr	r6, [r7, #4]
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff feca 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	cb0c      	ldmia	r3, {r2, r3}
 8001624:	4631      	mov	r1, r6
 8001626:	4628      	mov	r0, r5
 8001628:	47a0      	blx	r4
 800162a:	e030      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Left)); break;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685d      	ldr	r5, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3308      	adds	r3, #8
 8001638:	681c      	ldr	r4, [r3, #0]
 800163a:	687e      	ldr	r6, [r7, #4]
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	2202      	movs	r2, #2
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff feb4 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	cb0c      	ldmia	r3, {r2, r3}
 8001650:	4631      	mov	r1, r6
 8001652:	4628      	mov	r0, r5
 8001654:	47a0      	blx	r4
 8001656:	e01a      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Right)); break;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685d      	ldr	r5, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3308      	adds	r3, #8
 8001664:	681c      	ldr	r4, [r3, #0]
 8001666:	687e      	ldr	r6, [r7, #4]
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2203      	movs	r2, #3
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe9e 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	cb0c      	ldmia	r3, {r2, r3}
 800167c:	4631      	mov	r1, r6
 800167e:	4628      	mov	r0, r5
 8001680:	47a0      	blx	r4
 8001682:	e004      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!sender) { return; };
 8001684:	bf00      	nop
 8001686:	e002      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		default: break;
 800168c:	bf00      	nop
	}
}
 800168e:	372c      	adds	r7, #44	@ 0x2c
 8001690:	46bd      	mov	sp, r7
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001694 <_ZThn8_N15UserActionPanel12onButtonDownEP10UserButton>:
	UserButton upButton = UserButton(UP_BUTTON_PIN_Pin, UP_BUTTON_PIN_GPIO_Port);
	UserButton downButton = UserButton(DOWN_BUTTON_PIN_Pin, DOWN_BUTTON_PIN_GPIO_Port);
	UserButton leftButton = UserButton(LEFT_BUTTON_PIN_Pin, LEFT_BUTTON_PIN_GPIO_Port);
	UserButton rightButton = UserButton(RIGHT_BUTTON_PIN_Pin, RIGHT_BUTTON_PIN_GPIO_Port);

	virtual void onButtonDown(UserButton* sender);
 8001694:	f1a0 0008 	sub.w	r0, r0, #8
 8001698:	f7ff bf78 	b.w	800158c <_ZN15UserActionPanel12onButtonDownEP10UserButton>

0800169c <_ZN15UserActionPanel10onButtonUpEP10UserButton>:

void UserActionPanel::onButtonUp(UserButton* sender) {
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b08b      	sub	sp, #44	@ 0x2c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d073      	beq.n	8001794 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d071      	beq.n	8001798 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xfc>

	switch (sender->pin) {
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d86e      	bhi.n	800179c <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x100>
 80016be:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x28>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	08001769 	.word	0x08001769
 80016c8:	08001711 	.word	0x08001711
 80016cc:	0800179d 	.word	0x0800179d
 80016d0:	080016e5 	.word	0x080016e5
 80016d4:	0800179d 	.word	0x0800179d
 80016d8:	0800179d 	.word	0x0800179d
 80016dc:	0800179d 	.word	0x0800179d
 80016e0:	0800173d 	.word	0x0800173d
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Up)); break;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685d      	ldr	r5, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3308      	adds	r3, #8
 80016f0:	681c      	ldr	r4, [r3, #0]
 80016f2:	687e      	ldr	r6, [r7, #4]
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	2201      	movs	r2, #1
 80016fa:	2101      	movs	r1, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe58 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	cb0c      	ldmia	r3, {r2, r3}
 8001708:	4631      	mov	r1, r6
 800170a:	4628      	mov	r0, r5
 800170c:	47a0      	blx	r4
 800170e:	e046      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Down)); break;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685d      	ldr	r5, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3308      	adds	r3, #8
 800171c:	681c      	ldr	r4, [r3, #0]
 800171e:	687e      	ldr	r6, [r7, #4]
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe42 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	cb0c      	ldmia	r3, {r2, r3}
 8001734:	4631      	mov	r1, r6
 8001736:	4628      	mov	r0, r5
 8001738:	47a0      	blx	r4
 800173a:	e030      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Left)); break;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685d      	ldr	r5, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3308      	adds	r3, #8
 8001748:	681c      	ldr	r4, [r3, #0]
 800174a:	687e      	ldr	r6, [r7, #4]
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	2202      	movs	r2, #2
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fe2c 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	cb0c      	ldmia	r3, {r2, r3}
 8001760:	4631      	mov	r1, r6
 8001762:	4628      	mov	r0, r5
 8001764:	47a0      	blx	r4
 8001766:	e01a      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Right)); break;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685d      	ldr	r5, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3308      	adds	r3, #8
 8001774:	681c      	ldr	r4, [r3, #0]
 8001776:	687e      	ldr	r6, [r7, #4]
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	2203      	movs	r2, #3
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fe16 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	cb0c      	ldmia	r3, {r2, r3}
 800178c:	4631      	mov	r1, r6
 800178e:	4628      	mov	r0, r5
 8001790:	47a0      	blx	r4
 8001792:	e004      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!sender) { return; };
 8001794:	bf00      	nop
 8001796:	e002      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001798:	bf00      	nop
 800179a:	e000      	b.n	800179e <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		default: break;
 800179c:	bf00      	nop
	}
}
 800179e:	372c      	adds	r7, #44	@ 0x2c
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017a4 <_ZThn8_N15UserActionPanel10onButtonUpEP10UserButton>:
	virtual void onButtonUp(UserButton* sender);
 80017a4:	f1a0 0008 	sub.w	r0, r0, #8
 80017a8:	f7ff bf78 	b.w	800169c <_ZN15UserActionPanel10onButtonUpEP10UserButton>

080017ac <_ZN15UserActionPanel12onButtonLongEP10UserButton>:

void UserActionPanel::onButtonLong(UserButton* sender) {
 80017ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ae:	b08b      	sub	sp, #44	@ 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d073      	beq.n	80018a4 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d071      	beq.n	80018a8 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xfc>

	switch (sender->pin) {
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d86e      	bhi.n	80018ac <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x100>
 80017ce:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x28>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	08001879 	.word	0x08001879
 80017d8:	08001821 	.word	0x08001821
 80017dc:	080018ad 	.word	0x080018ad
 80017e0:	080017f5 	.word	0x080017f5
 80017e4:	080018ad 	.word	0x080018ad
 80017e8:	080018ad 	.word	0x080018ad
 80017ec:	080018ad 	.word	0x080018ad
 80017f0:	0800184d 	.word	0x0800184d
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Up)); break;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685d      	ldr	r5, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3308      	adds	r3, #8
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	687e      	ldr	r6, [r7, #4]
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	2201      	movs	r2, #1
 800180a:	2102      	movs	r1, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fdd0 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	cb0c      	ldmia	r3, {r2, r3}
 8001818:	4631      	mov	r1, r6
 800181a:	4628      	mov	r0, r5
 800181c:	47a0      	blx	r4
 800181e:	e046      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Down)); break;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685d      	ldr	r5, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3308      	adds	r3, #8
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	687e      	ldr	r6, [r7, #4]
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	2102      	movs	r1, #2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fdba 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	cb0c      	ldmia	r3, {r2, r3}
 8001844:	4631      	mov	r1, r6
 8001846:	4628      	mov	r0, r5
 8001848:	47a0      	blx	r4
 800184a:	e030      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Left)); break;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685d      	ldr	r5, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3308      	adds	r3, #8
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	2202      	movs	r2, #2
 8001862:	2102      	movs	r1, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fda4 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	cb0c      	ldmia	r3, {r2, r3}
 8001870:	4631      	mov	r1, r6
 8001872:	4628      	mov	r0, r5
 8001874:	47a0      	blx	r4
 8001876:	e01a      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Right)); break;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685d      	ldr	r5, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3308      	adds	r3, #8
 8001884:	681c      	ldr	r4, [r3, #0]
 8001886:	687e      	ldr	r6, [r7, #4]
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	2203      	movs	r2, #3
 800188e:	2102      	movs	r1, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd8e 	bl	80013b2 <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	cb0c      	ldmia	r3, {r2, r3}
 800189c:	4631      	mov	r1, r6
 800189e:	4628      	mov	r0, r5
 80018a0:	47a0      	blx	r4
 80018a2:	e004      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!sender) { return; };
 80018a4:	bf00      	nop
 80018a6:	e002      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!eventReciever) { return; };
 80018a8:	bf00      	nop
 80018aa:	e000      	b.n	80018ae <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		default: break;
 80018ac:	bf00      	nop
	}
}
 80018ae:	372c      	adds	r7, #44	@ 0x2c
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018b4 <_ZThn8_N15UserActionPanel12onButtonLongEP10UserButton>:
	virtual void onButtonLong(UserButton* sender);
 80018b4:	f1a0 0008 	sub.w	r0, r0, #8
 80018b8:	f7ff bf78 	b.w	80017ac <_ZN15UserActionPanel12onButtonLongEP10UserButton>

080018bc <_ZN10UserButton15handleInterruptEv>:
#include <UserEvent.h>

#define DEBOUNCE_TIME_MS 50
#define LONG_PRESS_TIME_MS 1000  // (1 секунда)

void UserButton::handleInterrupt() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if (!delegate) { return; };
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d04d      	beq.n	8001968 <_ZN10UserButton15handleInterruptEv+0xac>

	uint32_t currentTime = HAL_GetTick();
 80018cc:	f002 f9ec 	bl	8003ca8 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]
	if ((currentTime - lastActionTime) < DEBOUNCE_TIME_MS) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b31      	cmp	r3, #49	@ 0x31
 80018dc:	d803      	bhi.n	80018e6 <_ZN10UserButton15handleInterruptEv+0x2a>
		lastActionTime = currentTime;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	609a      	str	r2, [r3, #8]
		return;
 80018e4:	e041      	b.n	800196a <_ZN10UserButton15handleInterruptEv+0xae>
	}

	bool isPressed = HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f002 fc9f 	bl	8004234 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	72fb      	strb	r3, [r7, #11]
	if (isPressed) {
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <_ZN10UserButton15handleInterruptEv+0x60>
		delegate->onButtonDown(this);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4610      	mov	r0, r2
 8001918:	4798      	blx	r3
 800191a:	e021      	b.n	8001960 <_ZN10UserButton15handleInterruptEv+0xa4>
	}
	else {
		bool isLong = LONG_PRESS_TIME_MS < (currentTime - lastActionTime);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001928:	bf8c      	ite	hi
 800192a:	2301      	movhi	r3, #1
 800192c:	2300      	movls	r3, #0
 800192e:	72bb      	strb	r3, [r7, #10]
		if (isLong) {
 8001930:	7abb      	ldrb	r3, [r7, #10]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <_ZN10UserButton15handleInterruptEv+0x90>
			delegate->onButtonLong(this);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3308      	adds	r3, #8
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4610      	mov	r0, r2
 8001948:	4798      	blx	r3
 800194a:	e009      	b.n	8001960 <_ZN10UserButton15handleInterruptEv+0xa4>
		}
		else {
			delegate->onButtonUp(this);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4610      	mov	r0, r2
 800195e:	4798      	blx	r3
		}
	}

	lastActionTime = currentTime;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	e000      	b.n	800196a <_ZN10UserButton15handleInterruptEv+0xae>
	if (!delegate) { return; };
 8001968:	bf00      	nop
}
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	817b      	strh	r3, [r7, #10]
 8001982:	460b      	mov	r3, r1
 8001984:	813b      	strh	r3, [r7, #8]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001990:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001992:	7cfb      	ldrb	r3, [r7, #19]
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80019a0:	897a      	ldrh	r2, [r7, #10]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4413      	add	r3, r2
 80019a6:	b298      	uxth	r0, r3
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	893a      	ldrh	r2, [r7, #8]
 80019b0:	8979      	ldrh	r1, [r7, #10]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f001 f8fa 	bl	8002bb0 <u8g2_IsIntersection>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d062      	beq.n	8001a88 <u8g2_DrawHXBMP+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 80019c6:	e057      	b.n	8001a78 <u8g2_DrawHXBMP+0x108>
  {
    uint8_t current_bit = u8x8_pgm_read(b) & mask;
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	4013      	ands	r3, r2
 80019d0:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 80019d6:	e013      	b.n	8001a00 <u8g2_DrawHXBMP+0x90>
    {
        run_length++;
 80019d8:	8abb      	ldrh	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	82bb      	strh	r3, [r7, #20]
        x++;
 80019de:	897b      	ldrh	r3, [r7, #10]
 80019e0:	3301      	adds	r3, #1
 80019e2:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <u8g2_DrawHXBMP+0x8a>
        {
            mask = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
            b++;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	3301      	adds	r3, #1
 80019f8:	623b      	str	r3, [r7, #32]
        }
        len--;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <u8g2_DrawHXBMP+0xba>
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <u8g2_DrawHXBMP+0xac>
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	4013      	ands	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0de      	beq.n	80019d8 <u8g2_DrawHXBMP+0x68>
 8001a1a:	e006      	b.n	8001a2a <u8g2_DrawHXBMP+0xba>
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	4013      	ands	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1d6      	bne.n	80019d8 <u8g2_DrawHXBMP+0x68>
    }
    if (current_bit)
 8001a2a:	7c7b      	ldrb	r3, [r7, #17]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00f      	beq.n	8001a50 <u8g2_DrawHXBMP+0xe0>
    {
        u8g2->draw_color = color;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	7cfa      	ldrb	r2, [r7, #19]
 8001a34:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8001a38:	897a      	ldrh	r2, [r7, #10]
 8001a3a:	8abb      	ldrh	r3, [r7, #20]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	8abb      	ldrh	r3, [r7, #20]
 8001a42:	893a      	ldrh	r2, [r7, #8]
 8001a44:	2000      	movs	r0, #0
 8001a46:	9000      	str	r0, [sp, #0]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 ffdc 	bl	8002a06 <u8g2_DrawHVLine>
 8001a4e:	e013      	b.n	8001a78 <u8g2_DrawHXBMP+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <u8g2_DrawHXBMP+0x108>
    {
        u8g2->draw_color = ncolor;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	7cba      	ldrb	r2, [r7, #18]
 8001a5e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8001a62:	897a      	ldrh	r2, [r7, #10]
 8001a64:	8abb      	ldrh	r3, [r7, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	8abb      	ldrh	r3, [r7, #20]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	2000      	movs	r0, #0
 8001a70:	9000      	str	r0, [sp, #0]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 ffc7 	bl	8002a06 <u8g2_DrawHVLine>
  while(len > 0)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1a4      	bne.n	80019c8 <u8g2_DrawHXBMP+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	7cfa      	ldrb	r2, [r7, #19]
 8001a82:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001a86:	e000      	b.n	8001a8a <u8g2_DrawHXBMP+0x11a>
    return;
 8001a88:	bf00      	nop
}
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	813b      	strh	r3, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001aae:	8afb      	ldrh	r3, [r7, #22]
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001aba:	897a      	ldrh	r2, [r7, #10]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	893a      	ldrh	r2, [r7, #8]
 8001ac4:	8c3b      	ldrh	r3, [r7, #32]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	893a      	ldrh	r2, [r7, #8]
 8001acc:	8979      	ldrh	r1, [r7, #10]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f001 f86c 	bl	8002bb0 <u8g2_IsIntersection>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d017      	beq.n	8001b0e <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001ade:	e012      	b.n	8001b06 <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001ae0:	88f8      	ldrh	r0, [r7, #6]
 8001ae2:	893a      	ldrh	r2, [r7, #8]
 8001ae4:	8979      	ldrh	r1, [r7, #10]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7ff ff3f 	bl	8001970 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001af2:	8afb      	ldrh	r3, [r7, #22]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	4413      	add	r3, r2
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001afa:	893b      	ldrh	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	813b      	strh	r3, [r7, #8]
    h--;
 8001b00:	8c3b      	ldrh	r3, [r7, #32]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001b06:	8c3b      	ldrh	r3, [r7, #32]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e9      	bne.n	8001ae0 <u8g2_DrawXBMP+0x50>
 8001b0c:	e000      	b.n	8001b10 <u8g2_DrawXBMP+0x80>
    return;
 8001b0e:	bf00      	nop
  }
}
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af02      	add	r7, sp, #8
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	817b      	strh	r3, [r7, #10]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	813b      	strh	r3, [r7, #8]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001b30:	897a      	ldrh	r2, [r7, #10]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4413      	add	r3, r2
 8001b36:	b298      	uxth	r0, r3
 8001b38:	893a      	ldrh	r2, [r7, #8]
 8001b3a:	8b3b      	ldrh	r3, [r7, #24]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4603      	mov	r3, r0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f001 f831 	bl	8002bb0 <u8g2_IsIntersection>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d012      	beq.n	8001b7a <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001b54:	e00d      	b.n	8001b72 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	893a      	ldrh	r2, [r7, #8]
 8001b5a:	8979      	ldrh	r1, [r7, #10]
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 ff50 	bl	8002a06 <u8g2_DrawHVLine>
    y++;    
 8001b66:	893b      	ldrh	r3, [r7, #8]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	813b      	strh	r3, [r7, #8]
    h--;
 8001b6c:	8b3b      	ldrh	r3, [r7, #24]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001b72:	8b3b      	ldrh	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ee      	bne.n	8001b56 <u8g2_DrawBox+0x40>
 8001b78:	e000      	b.n	8001b7c <u8g2_DrawBox+0x66>
    return;
 8001b7a:	bf00      	nop
  }
}
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b088      	sub	sp, #32
 8001b86:	af02      	add	r7, sp, #8
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	817b      	strh	r3, [r7, #10]
 8001b94:	460b      	mov	r3, r1
 8001b96:	813b      	strh	r3, [r7, #8]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ba0:	897a      	ldrh	r2, [r7, #10]
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b298      	uxth	r0, r3
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	8c3b      	ldrh	r3, [r7, #32]
 8001bac:	4413      	add	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	893a      	ldrh	r2, [r7, #8]
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fff9 	bl	8002bb0 <u8g2_IsIntersection>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d037      	beq.n	8001c34 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	893a      	ldrh	r2, [r7, #8]
 8001bc8:	8979      	ldrh	r1, [r7, #10]
 8001bca:	2000      	movs	r0, #0
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 ff19 	bl	8002a06 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001bd4:	8c3b      	ldrh	r3, [r7, #32]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d92d      	bls.n	8001c36 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001bda:	8c3b      	ldrh	r3, [r7, #32]
 8001bdc:	3b02      	subs	r3, #2
 8001bde:	843b      	strh	r3, [r7, #32]
    y++;
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	3301      	adds	r3, #1
 8001be4:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001be6:	8c3b      	ldrh	r3, [r7, #32]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01a      	beq.n	8001c22 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001bec:	8c3b      	ldrh	r3, [r7, #32]
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	8979      	ldrh	r1, [r7, #10]
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	9000      	str	r0, [sp, #0]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 ff05 	bl	8002a06 <u8g2_DrawHVLine>
      x+=w;
 8001bfc:	897a      	ldrh	r2, [r7, #10]
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	4413      	add	r3, r2
 8001c02:	817b      	strh	r3, [r7, #10]
      x--;
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001c0a:	8c3b      	ldrh	r3, [r7, #32]
 8001c0c:	893a      	ldrh	r2, [r7, #8]
 8001c0e:	8979      	ldrh	r1, [r7, #10]
 8001c10:	2001      	movs	r0, #1
 8001c12:	9000      	str	r0, [sp, #0]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fef6 	bl	8002a06 <u8g2_DrawHVLine>
      y+=h;
 8001c1a:	893a      	ldrh	r2, [r7, #8]
 8001c1c:	8c3b      	ldrh	r3, [r7, #32]
 8001c1e:	4413      	add	r3, r2
 8001c20:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	893a      	ldrh	r2, [r7, #8]
 8001c26:	8af9      	ldrh	r1, [r7, #22]
 8001c28:	2000      	movs	r0, #0
 8001c2a:	9000      	str	r0, [sp, #0]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 feea 	bl	8002a06 <u8g2_DrawHVLine>
 8001c32:	e000      	b.n	8001c36 <u8g2_DrawFrame+0xb4>
    return;
 8001c34:	bf00      	nop
  }
}
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	7c1b      	ldrb	r3, [r3, #16]
 8001c4a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fa38 	bl	80060e0 <memset>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
 8001c84:	4613      	mov	r3, r2
 8001c86:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	7c1b      	ldrb	r3, [r3, #16]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c98:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	89ba      	ldrh	r2, [r7, #12]
 8001ca0:	fb12 f303 	smulbb	r3, r2, r3
 8001ca4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001ca6:	89bb      	ldrh	r3, [r7, #12]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001cac:	89bb      	ldrh	r3, [r7, #12]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001cb4:	7bf9      	ldrb	r1, [r7, #15]
 8001cb6:	78ba      	ldrb	r2, [r7, #2]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 fcfe 	bl	80036c2 <u8x8_DrawTile>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ce0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ce8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	7c5b      	ldrb	r3, [r3, #17]
 8001cf0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001cf2:	7bba      	ldrb	r2, [r7, #14]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffbd 	bl	8001c78 <u8g2_send_tile_row>
    src_row++;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	3301      	adds	r3, #1
 8001d08:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d203      	bcs.n	8001d1a <u8g2_send_buffer+0x4c>
 8001d12:	7bba      	ldrb	r2, [r7, #14]
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3eb      	bcc.n	8001cf2 <u8g2_send_buffer+0x24>
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffcf 	bl	8001cce <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f001 fd17 	bl	8003764 <u8x8_RefreshDisplay>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	701a      	strb	r2, [r3, #0]
  return buf;
 8001d4e:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	200001f8 	.word	0x200001f8

08001d60 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8001d76:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f001 fd53 	bl	8003824 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 8001d7e:	f107 0313 	add.w	r3, r7, #19
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffdc 	bl	8001d40 <u8g2_m_16_4_f>
 8001d88:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001d8a:	7cfa      	ldrb	r2, [r7, #19]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fff5 	bl	8002d84 <u8g2_SetupBuffer>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08003375 	.word	0x08003375
 8001da8:	080035e1 	.word	0x080035e1
 8001dac:	08002c07 	.word	0x08002c07

08001db0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	81fb      	strh	r3, [r7, #14]
    font++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3301      	adds	r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	4413      	add	r3, r2
 8001e04:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001e06:	89fb      	ldrh	r3, [r7, #14]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff ffc5 	bl	8001db0 <u8g2_font_get_byte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001e2e:	2101      	movs	r1, #1
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f7ff ffbd 	bl	8001db0 <u8g2_font_get_byte>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001e3e:	2102      	movs	r1, #2
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff ffb5 	bl	8001db0 <u8g2_font_get_byte>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001e4e:	2103      	movs	r1, #3
 8001e50:	6838      	ldr	r0, [r7, #0]
 8001e52:	f7ff ffad 	bl	8001db0 <u8g2_font_get_byte>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001e5e:	2104      	movs	r1, #4
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f7ff ffa5 	bl	8001db0 <u8g2_font_get_byte>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001e6e:	2105      	movs	r1, #5
 8001e70:	6838      	ldr	r0, [r7, #0]
 8001e72:	f7ff ff9d 	bl	8001db0 <u8g2_font_get_byte>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001e7e:	2106      	movs	r1, #6
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7ff ff95 	bl	8001db0 <u8g2_font_get_byte>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001e8e:	2107      	movs	r1, #7
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7ff ff8d 	bl	8001db0 <u8g2_font_get_byte>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	6838      	ldr	r0, [r7, #0]
 8001ea2:	f7ff ff85 	bl	8001db0 <u8g2_font_get_byte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001eae:	2109      	movs	r1, #9
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7ff ff7d 	bl	8001db0 <u8g2_font_get_byte>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b25a      	sxtb	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001ebe:	210a      	movs	r1, #10
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7ff ff75 	bl	8001db0 <u8g2_font_get_byte>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001ece:	210b      	movs	r1, #11
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f7ff ff6d 	bl	8001db0 <u8g2_font_get_byte>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b25a      	sxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001ede:	210c      	movs	r1, #12
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	f7ff ff65 	bl	8001db0 <u8g2_font_get_byte>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001eee:	210d      	movs	r1, #13
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f7ff ff5d 	bl	8001db0 <u8g2_font_get_byte>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001efe:	210e      	movs	r1, #14
 8001f00:	6838      	ldr	r0, [r7, #0]
 8001f02:	f7ff ff55 	bl	8001db0 <u8g2_font_get_byte>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001f0e:	210f      	movs	r1, #15
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f7ff ff4d 	bl	8001db0 <u8g2_font_get_byte>
 8001f16:	4603      	mov	r3, r0
 8001f18:	b25a      	sxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001f1e:	2110      	movs	r1, #16
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f7ff ff45 	bl	8001db0 <u8g2_font_get_byte>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001f2e:	2111      	movs	r1, #17
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f7ff ff4f 	bl	8001dd4 <u8g2_font_get_word>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001f3e:	2113      	movs	r1, #19
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	f7ff ff47 	bl	8001dd4 <u8g2_font_get_word>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001f4e:	2115      	movs	r1, #21
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f7ff ff3f 	bl	8001dd4 <u8g2_font_get_word>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	82da      	strh	r2, [r3, #22]
#endif
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	fa42 f303 	asr.w	r3, r2, r3
 8001f88:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001f8a:	7b7b      	ldrb	r3, [r7, #13]
 8001f8c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001f8e:	7bba      	ldrb	r2, [r7, #14]
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	4413      	add	r3, r2
 8001f94:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	2b07      	cmp	r3, #7
 8001f9a:	d91a      	bls.n	8001fd2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001fa0:	7b3a      	ldrb	r2, [r7, #12]
 8001fa2:	7b7b      	ldrb	r3, [r7, #13]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	7b3b      	ldrb	r3, [r7, #12]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	b25a      	sxtb	r2, r3
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7bba      	ldrb	r2, [r7, #14]
 8001fec:	731a      	strb	r2, [r3, #12]
  return val;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffaa 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	3b01      	subs	r3, #1
 800201e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002020:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
  return v;
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8002042:	b490      	push	{r4, r7}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4604      	mov	r4, r0
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4623      	mov	r3, r4
 8002052:	80fb      	strh	r3, [r7, #6]
 8002054:	4603      	mov	r3, r0
 8002056:	717b      	strb	r3, [r7, #5]
 8002058:	460b      	mov	r3, r1
 800205a:	713b      	strb	r3, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d014      	beq.n	8002090 <u8g2_add_vector_y+0x4e>
 8002066:	2b02      	cmp	r3, #2
 8002068:	dc19      	bgt.n	800209e <u8g2_add_vector_y+0x5c>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <u8g2_add_vector_y+0x32>
 800206e:	2b01      	cmp	r3, #1
 8002070:	d007      	beq.n	8002082 <u8g2_add_vector_y+0x40>
 8002072:	e014      	b.n	800209e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8002074:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002078:	b29a      	uxth	r2, r3
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4413      	add	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
      break;
 8002080:	e014      	b.n	80020ac <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8002082:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002086:	b29a      	uxth	r2, r3
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	4413      	add	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
      break;
 800208e:	e00d      	b.n	80020ac <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002090:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	80fb      	strh	r3, [r7, #6]
      break;
 800209c:	e006      	b.n	80020ac <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800209e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	80fb      	strh	r3, [r7, #6]
      break;      
 80020aa:	bf00      	nop
  }
  return dy;
 80020ac:	88fb      	ldrh	r3, [r7, #6]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc90      	pop	{r4, r7}
 80020b6:	4770      	bx	lr

080020b8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80020b8:	b490      	push	{r4, r7}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	80fb      	strh	r3, [r7, #6]
 80020ca:	4603      	mov	r3, r0
 80020cc:	717b      	strb	r3, [r7, #5]
 80020ce:	460b      	mov	r3, r1
 80020d0:	713b      	strb	r3, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d014      	beq.n	8002106 <u8g2_add_vector_x+0x4e>
 80020dc:	2b02      	cmp	r3, #2
 80020de:	dc19      	bgt.n	8002114 <u8g2_add_vector_x+0x5c>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <u8g2_add_vector_x+0x32>
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d007      	beq.n	80020f8 <u8g2_add_vector_x+0x40>
 80020e8:	e014      	b.n	8002114 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80020ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	4413      	add	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
      break;
 80020f6:	e014      	b.n	8002122 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80020f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	80fb      	strh	r3, [r7, #6]
      break;
 8002104:	e00d      	b.n	8002122 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8002106:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800210a:	b29b      	uxth	r3, r3
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	80fb      	strh	r3, [r7, #6]
      break;
 8002112:	e006      	b.n	8002122 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8002114:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002118:	b29a      	uxth	r2, r3
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4413      	add	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
      break;      
 8002120:	bf00      	nop
  }
  return dx;
 8002122:	88fb      	ldrh	r3, [r7, #6]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bc90      	pop	{r4, r7}
 800212c:	4770      	bx	lr

0800212e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af02      	add	r7, sp, #8
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	4613      	mov	r3, r2
 800213c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	@ 0x60
 8002142:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800214e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002156:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800215e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	7d7b      	ldrb	r3, [r7, #21]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800216c:	7dfa      	ldrb	r2, [r7, #23]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	429a      	cmp	r2, r3
 8002172:	d201      	bcs.n	8002178 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	88db      	ldrh	r3, [r3, #6]
 8002182:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002184:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002188:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	7c1b      	ldrb	r3, [r3, #16]
 8002190:	89b8      	ldrh	r0, [r7, #12]
 8002192:	f7ff ff91 	bl	80020b8 <u8g2_add_vector_x>
 8002196:	4603      	mov	r3, r0
 8002198:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800219a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800219e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	7c1b      	ldrb	r3, [r3, #16]
 80021a6:	8978      	ldrh	r0, [r7, #10]
 80021a8:	f7ff ff4b 	bl	8002042 <u8g2_add_vector_y>
 80021ac:	4603      	mov	r3, r0
 80021ae:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80021b0:	78bb      	ldrb	r3, [r7, #2]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	7b9a      	ldrb	r2, [r3, #14]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80021c0:	7dbb      	ldrb	r3, [r7, #22]
 80021c2:	b298      	uxth	r0, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	7c1b      	ldrb	r3, [r3, #16]
 80021c8:	897a      	ldrh	r2, [r7, #10]
 80021ca:	89b9      	ldrh	r1, [r7, #12]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	4603      	mov	r3, r0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fc18 	bl	8002a06 <u8g2_DrawHVLine>
 80021d6:	e013      	b.n	8002200 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	7b5b      	ldrb	r3, [r3, #13]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10f      	bne.n	8002200 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	7bda      	ldrb	r2, [r3, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80021ea:	7dbb      	ldrb	r3, [r7, #22]
 80021ec:	b298      	uxth	r0, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	7c1b      	ldrb	r3, [r3, #16]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	89b9      	ldrh	r1, [r7, #12]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	4603      	mov	r3, r0
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fc03 	bl	8002a06 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002200:	7dfa      	ldrb	r2, [r7, #23]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	429a      	cmp	r2, r3
 8002206:	d309      	bcc.n	800221c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002208:	7dfa      	ldrb	r2, [r7, #23]
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	757b      	strb	r3, [r7, #21]
    ly++;
 8002214:	7d3b      	ldrb	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800221a:	e79d      	b.n	8002158 <u8g2_font_decode_len+0x2a>
      break;
 800221c:	bf00      	nop
  }
  lx += cnt;
 800221e:	7d7a      	ldrb	r2, [r7, #21]
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	4413      	add	r3, r2
 8002224:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8002226:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800222e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	725a      	strb	r2, [r3, #9]
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3360      	adds	r3, #96	@ 0x60
 800224c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002260:	4619      	mov	r1, r3
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff fe7f 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 8002268:	4603      	mov	r3, r0
 800226a:	b25a      	sxtb	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002276:	4619      	mov	r1, r3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fe74 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 800227e:	4603      	mov	r3, r0
 8002280:	b25a      	sxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	7b9b      	ldrb	r3, [r3, #14]
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	73da      	strb	r2, [r3, #15]
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3360      	adds	r3, #96	@ 0x60
 80022ba:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffbd 	bl	800223e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80022ca:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80022d2:	4619      	mov	r1, r3
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f7ff fe91 	bl	8001ffc <u8g2_font_decode_get_signed_bits>
 80022da:	4603      	mov	r3, r0
 80022dc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80022e4:	4619      	mov	r1, r3
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff fe88 	bl	8001ffc <u8g2_font_decode_get_signed_bits>
 80022ec:	4603      	mov	r3, r0
 80022ee:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80022f6:	4619      	mov	r1, r3
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff fe7f 	bl	8001ffc <u8g2_font_decode_get_signed_bits>
 80022fe:	4603      	mov	r3, r0
 8002300:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f340 80d7 	ble.w	80024bc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	8898      	ldrh	r0, [r3, #4]
 8002312:	7cfa      	ldrb	r2, [r7, #19]
 8002314:	7c7b      	ldrb	r3, [r7, #17]
 8002316:	4413      	add	r3, r2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	425b      	negs	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	b25a      	sxtb	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	7c1b      	ldrb	r3, [r3, #16]
 8002324:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002328:	f7ff fec6 	bl	80020b8 <u8g2_add_vector_x>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	88d8      	ldrh	r0, [r3, #6]
 8002338:	7cfa      	ldrb	r2, [r7, #19]
 800233a:	7c7b      	ldrb	r3, [r7, #17]
 800233c:	4413      	add	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	425b      	negs	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	b25a      	sxtb	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	7c1b      	ldrb	r3, [r3, #16]
 800234a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800234e:	f7ff fe78 	bl	8002042 <u8g2_add_vector_y>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8002366:	8bfb      	ldrh	r3, [r7, #30]
 8002368:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800236a:	8b7b      	ldrh	r3, [r7, #26]
 800236c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	7c1b      	ldrb	r3, [r3, #16]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d85a      	bhi.n	800242c <u8g2_font_decode_glyph+0x180>
 8002376:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <u8g2_font_decode_glyph+0xd0>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	080023a9 	.word	0x080023a9
 8002384:	080023d1 	.word	0x080023d1
 8002388:	08002405 	.word	0x08002405
      {
	case 0:
	    x1 += decode->glyph_width;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002392:	b29a      	uxth	r2, r3
 8002394:	8bbb      	ldrh	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800239a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	8b3b      	ldrh	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	833b      	strh	r3, [r7, #24]
	    break;
 80023a6:	e041      	b.n	800242c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80023a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8bfa      	ldrh	r2, [r7, #30]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80023b4:	8bfb      	ldrh	r3, [r7, #30]
 80023b6:	3301      	adds	r3, #1
 80023b8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80023ba:	8bbb      	ldrh	r3, [r7, #28]
 80023bc:	3301      	adds	r3, #1
 80023be:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	8b3b      	ldrh	r3, [r7, #24]
 80023ca:	4413      	add	r3, r2
 80023cc:	833b      	strh	r3, [r7, #24]
	    break;
 80023ce:	e02d      	b.n	800242c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	8bfa      	ldrh	r2, [r7, #30]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80023de:	8bfb      	ldrh	r3, [r7, #30]
 80023e0:	3301      	adds	r3, #1
 80023e2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80023e4:	8bbb      	ldrh	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80023ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8b7a      	ldrh	r2, [r7, #26]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	3301      	adds	r3, #1
 80023fa:	837b      	strh	r3, [r7, #26]
	    y1++;
 80023fc:	8b3b      	ldrh	r3, [r7, #24]
 80023fe:	3301      	adds	r3, #1
 8002400:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002402:	e013      	b.n	800242c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8002404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002408:	b29a      	uxth	r2, r3
 800240a:	8bbb      	ldrh	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002416:	b29b      	uxth	r3, r3
 8002418:	8b7a      	ldrh	r2, [r7, #26]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800241e:	8b7b      	ldrh	r3, [r7, #26]
 8002420:	3301      	adds	r3, #1
 8002422:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002424:	8b3b      	ldrh	r3, [r7, #24]
 8002426:	3301      	adds	r3, #1
 8002428:	833b      	strh	r3, [r7, #24]
	    break;	  
 800242a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800242c:	8bb8      	ldrh	r0, [r7, #28]
 800242e:	8b7a      	ldrh	r2, [r7, #26]
 8002430:	8bf9      	ldrh	r1, [r7, #30]
 8002432:	8b3b      	ldrh	r3, [r7, #24]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4603      	mov	r3, r0
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fbb9 	bl	8002bb0 <u8g2_IsIntersection>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <u8g2_font_decode_glyph+0x19e>
	return d;
 8002444:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002448:	e03a      	b.n	80024c0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800245c:	4619      	mov	r1, r3
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff fd81 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800246e:	4619      	mov	r1, r3
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7ff fd78 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 8002476:	4603      	mov	r3, r0
 8002478:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2200      	movs	r2, #0
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe54 	bl	800212e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	2201      	movs	r2, #1
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fe4e 	bl	800212e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002492:	2101      	movs	r1, #1
 8002494:	6978      	ldr	r0, [r7, #20]
 8002496:	f7ff fd66 	bl	8001f66 <u8g2_font_decode_get_unsigned_bits>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ec      	bne.n	800247a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80024a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dd00      	ble.n	80024b0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80024ae:	e7d2      	b.n	8002456 <u8g2_font_decode_glyph+0x1aa>
	break;
 80024b0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	7b9a      	ldrb	r2, [r3, #14]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 80024bc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3317      	adds	r3, #23
 80024de:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	2bff      	cmp	r3, #255	@ 0xff
 80024e4:	d82a      	bhi.n	800253c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	2b60      	cmp	r3, #96	@ 0x60
 80024ea:	d907      	bls.n	80024fc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80024f2:	461a      	mov	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	2b40      	cmp	r3, #64	@ 0x40
 8002500:	d906      	bls.n	8002510 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8002508:	461a      	mov	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04e      	beq.n	80025b8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	4293      	cmp	r3, r2
 8002524:	d102      	bne.n	800252c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3302      	adds	r3, #2
 800252a:	e049      	b.n	80025c0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800253a:	e7e9      	b.n	8002510 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8002542:	461a      	mov	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800254e:	2100      	movs	r1, #0
 8002550:	6938      	ldr	r0, [r7, #16]
 8002552:	f7ff fc3f 	bl	8001dd4 <u8g2_font_get_word>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002560:	2102      	movs	r1, #2
 8002562:	6938      	ldr	r0, [r7, #16]
 8002564:	f7ff fc36 	bl	8001dd4 <u8g2_font_get_word>
 8002568:	4603      	mov	r3, r0
 800256a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	3304      	adds	r3, #4
 8002570:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002572:	89fa      	ldrh	r2, [r7, #14]
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	429a      	cmp	r2, r3
 8002578:	d3e9      	bcc.n	800254e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	4313      	orrs	r3, r2
 8002592:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800259a:	89fa      	ldrh	r2, [r7, #14]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d102      	bne.n	80025a8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3303      	adds	r3, #3
 80025a6:	e00b      	b.n	80025c0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3302      	adds	r3, #2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80025b6:	e7e0      	b.n	800257a <u8g2_font_get_glyph_data+0xb2>
	break;
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <u8g2_font_get_glyph_data+0xf6>
	break;
 80025bc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	897a      	ldrh	r2, [r7, #10]
 80025ea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	893a      	ldrh	r2, [r7, #8]
 80025f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4619      	mov	r1, r3
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff ff64 	bl	80024c8 <u8g2_font_get_glyph_data>
 8002600:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002608:	6939      	ldr	r1, [r7, #16]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff fe4e 	bl	80022ac <u8g2_font_decode_glyph>
 8002610:	4603      	mov	r3, r0
 8002612:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8002614:	8afb      	ldrh	r3, [r7, #22]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002640:	2b03      	cmp	r3, #3
 8002642:	d833      	bhi.n	80026ac <u8g2_DrawGlyph+0x8c>
 8002644:	a201      	add	r2, pc, #4	@ (adr r2, 800264c <u8g2_DrawGlyph+0x2c>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002671 	.word	0x08002671
 8002654:	08002685 	.word	0x08002685
 8002658:	08002699 	.word	0x08002699
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	4798      	blx	r3
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	893b      	ldrh	r3, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	813b      	strh	r3, [r7, #8]
      break;
 800266e:	e01d      	b.n	80026ac <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	4798      	blx	r3
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	817b      	strh	r3, [r7, #10]
      break;
 8002682:	e013      	b.n	80026ac <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	4798      	blx	r3
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	813b      	strh	r3, [r7, #8]
      break;
 8002696:	e009      	b.n	80026ac <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	4798      	blx	r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	4413      	add	r3, r2
 80026a8:	817b      	strh	r3, [r7, #10]
      break;
 80026aa:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	893a      	ldrh	r2, [r7, #8]
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff ff88 	bl	80025c8 <u8g2_font_draw_glyph>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop

080026c4 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	4613      	mov	r3, r2
 80026d4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc9a 	bl	8003010 <u8x8_utf8_init>
  sum = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	4611      	mov	r1, r2
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	4798      	blx	r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80026f2:	8abb      	ldrh	r3, [r7, #20]
 80026f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d038      	beq.n	800276e <u8g2_draw_string+0xaa>
      break;
    str++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002702:	8abb      	ldrh	r3, [r7, #20]
 8002704:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002708:	4293      	cmp	r3, r2
 800270a:	d0e9      	beq.n	80026e0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800270c:	8abb      	ldrh	r3, [r7, #20]
 800270e:	893a      	ldrh	r2, [r7, #8]
 8002710:	8979      	ldrh	r1, [r7, #10]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ff84 	bl	8002620 <u8g2_DrawGlyph>
 8002718:	4603      	mov	r3, r0
 800271a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002722:	2b03      	cmp	r3, #3
 8002724:	d81e      	bhi.n	8002764 <u8g2_draw_string+0xa0>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <u8g2_draw_string+0x68>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002747 	.word	0x08002747
 8002734:	08002751 	.word	0x08002751
 8002738:	0800275b 	.word	0x0800275b
      {
	case 0:
	  x += delta;
 800273c:	897a      	ldrh	r2, [r7, #10]
 800273e:	8a7b      	ldrh	r3, [r7, #18]
 8002740:	4413      	add	r3, r2
 8002742:	817b      	strh	r3, [r7, #10]
	  break;
 8002744:	e00e      	b.n	8002764 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002746:	893a      	ldrh	r2, [r7, #8]
 8002748:	8a7b      	ldrh	r3, [r7, #18]
 800274a:	4413      	add	r3, r2
 800274c:	813b      	strh	r3, [r7, #8]
	  break;
 800274e:	e009      	b.n	8002764 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002750:	897a      	ldrh	r2, [r7, #10]
 8002752:	8a7b      	ldrh	r3, [r7, #18]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	817b      	strh	r3, [r7, #10]
	  break;
 8002758:	e004      	b.n	8002764 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800275a:	893a      	ldrh	r2, [r7, #8]
 800275c:	8a7b      	ldrh	r3, [r7, #18]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	813b      	strh	r3, [r7, #8]
	  break;
 8002762:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002764:	8afa      	ldrh	r2, [r7, #22]
 8002766:	8a7b      	ldrh	r3, [r7, #18]
 8002768:	4413      	add	r3, r2
 800276a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800276c:	e7b8      	b.n	80026e0 <u8g2_draw_string+0x1c>
      break;
 800276e:	bf00      	nop
    }
  }
  return sum;
 8002770:	8afb      	ldrh	r3, [r7, #22]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop

0800277c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	817b      	strh	r3, [r7, #10]
 800278a:	4613      	mov	r3, r2
 800278c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a06      	ldr	r2, [pc, #24]	@ (80027ac <u8g2_DrawStr+0x30>)
 8002792:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002794:	893a      	ldrh	r2, [r7, #8]
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff92 	bl	80026c4 <u8g2_draw_string>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800302d 	.word	0x0800302d

080027b0 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	4613      	mov	r3, r2
 80027c0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <u8g2_DrawUTF8+0x30>)
 80027c6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff ff78 	bl	80026c4 <u8g2_draw_string>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	0800305b 	.word	0x0800305b

080027e4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05d      	beq.n	80028b0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04d      	beq.n	80028b2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11c      	bne.n	800285a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 800282c:	429a      	cmp	r2, r3
 800282e:	da05      	bge.n	800283c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002848:	429a      	cmp	r2, r3
 800284a:	dd32      	ble.n	80028b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002858:	e02b      	b.n	80028b2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002868:	4619      	mov	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002870:	440b      	add	r3, r1
 8002872:	429a      	cmp	r2, r3
 8002874:	da0d      	bge.n	8002892 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800287c:	b2da      	uxtb	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4413      	add	r3, r2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	b25a      	sxtb	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800289e:	429a      	cmp	r2, r3
 80028a0:	dd07      	ble.n	80028b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80028ae:	e000      	b.n	80028b2 <u8g2_UpdateRefHeight+0xce>
    return;
 80028b0:	bf00      	nop
  }  
}
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return 0;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <u8g2_SetFontPosBaseline+0x1c>)
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	080028bd 	.word	0x080028bd

080028f4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d00b      	beq.n	8002920 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3374      	adds	r3, #116	@ 0x74
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa7d 	bl	8001e14 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff62 	bl	80027e4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	460b      	mov	r3, r1
 8002938:	80fb      	strh	r3, [r7, #6]
 800293a:	4613      	mov	r3, r2
 800293c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002944:	8afb      	ldrh	r3, [r7, #22]
 8002946:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	8abb      	ldrh	r3, [r7, #20]
 800294e:	4413      	add	r3, r2
 8002950:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002952:	8afa      	ldrh	r2, [r7, #22]
 8002954:	8abb      	ldrh	r3, [r7, #20]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90b      	bls.n	8002972 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800295a:	8afa      	ldrh	r2, [r7, #22]
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	d205      	bcs.n	800296e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002962:	88bb      	ldrh	r3, [r7, #4]
 8002964:	82bb      	strh	r3, [r7, #20]
      b--;
 8002966:	8abb      	ldrh	r3, [r7, #20]
 8002968:	3b01      	subs	r3, #1
 800296a:	82bb      	strh	r3, [r7, #20]
 800296c:	e001      	b.n	8002972 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002972:	8afa      	ldrh	r2, [r7, #22]
 8002974:	88bb      	ldrh	r3, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d301      	bcc.n	800297e <u8g2_clip_intersection2+0x56>
    return 0;
 800297a:	2300      	movs	r3, #0
 800297c:	e01c      	b.n	80029b8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800297e:	8aba      	ldrh	r2, [r7, #20]
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	429a      	cmp	r2, r3
 8002984:	d801      	bhi.n	800298a <u8g2_clip_intersection2+0x62>
    return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e016      	b.n	80029b8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800298a:	8afa      	ldrh	r2, [r7, #22]
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	429a      	cmp	r2, r3
 8002990:	d201      	bcs.n	8002996 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002996:	8aba      	ldrh	r2, [r7, #20]
 8002998:	88bb      	ldrh	r3, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d901      	bls.n	80029a2 <u8g2_clip_intersection2+0x7a>
    b = d;
 800299e:	88bb      	ldrh	r3, [r7, #4]
 80029a0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8afa      	ldrh	r2, [r7, #22]
 80029a6:	801a      	strh	r2, [r3, #0]
  b -= a;
 80029a8:	8aba      	ldrh	r2, [r7, #20]
 80029aa:	8afb      	ldrh	r3, [r7, #22]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	8aba      	ldrh	r2, [r7, #20]
 80029b4:	801a      	strh	r2, [r3, #0]
  return 1;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e2:	893a      	ldrh	r2, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	893a      	ldrh	r2, [r7, #8]
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4603      	mov	r3, r0
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	47a0      	blx	r4
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}

08002a06 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a06:	b590      	push	{r4, r7, lr}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af02      	add	r7, sp, #8
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	4608      	mov	r0, r1
 8002a10:	4611      	mov	r1, r2
 8002a12:	461a      	mov	r2, r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	817b      	strh	r3, [r7, #10]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	813b      	strh	r3, [r7, #8]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d075      	beq.n	8002b16 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d072      	beq.n	8002b16 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d91a      	bls.n	8002a6c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d109      	bne.n	8002a52 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002a3e:	897a      	ldrh	r2, [r7, #10]
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	817b      	strh	r3, [r7, #10]
	  x++;
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	817b      	strh	r3, [r7, #10]
 8002a50:	e00c      	b.n	8002a6c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d108      	bne.n	8002a6c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002a5a:	893a      	ldrh	r2, [r7, #8]
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	813b      	strh	r3, [r7, #8]
	  y++;
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002a78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11a      	bne.n	8002ab6 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d83b      	bhi.n	8002b04 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002a92:	893b      	ldrh	r3, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d937      	bls.n	8002b08 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002aa4:	1db9      	adds	r1, r7, #6
 8002aa6:	f107 000a 	add.w	r0, r7, #10
 8002aaa:	f7ff ff3d 	bl	8002928 <u8g2_clip_intersection2>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11a      	bne.n	8002aea <u8g2_DrawHVLine+0xe4>
	  return;
 8002ab4:	e02f      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002abc:	897b      	ldrh	r3, [r7, #10]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d824      	bhi.n	8002b0c <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002ac8:	897b      	ldrh	r3, [r7, #10]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d920      	bls.n	8002b10 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002ada:	1db9      	adds	r1, r7, #6
 8002adc:	f107 0008 	add.w	r0, r7, #8
 8002ae0:	f7ff ff22 	bl	8002928 <u8g2_clip_intersection2>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d014      	beq.n	8002b14 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	689c      	ldr	r4, [r3, #8]
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	893a      	ldrh	r2, [r7, #8]
 8002af4:	88f8      	ldrh	r0, [r7, #6]
 8002af6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4603      	mov	r3, r0
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	47a0      	blx	r4
 8002b02:	e008      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
	  return;
 8002b04:	bf00      	nop
 8002b06:	e006      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
	  return;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
	  return;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
	  return;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <u8g2_DrawHVLine+0x110>
	  return;
 8002b14:	bf00      	nop
    }
}
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d903      	bls.n	8002b3e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002b4a:	b490      	push	{r4, r7}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4604      	mov	r4, r0
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	461a      	mov	r2, r3
 8002b58:	4623      	mov	r3, r4
 8002b5a:	80fb      	strh	r3, [r7, #6]
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	80bb      	strh	r3, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	88bb      	ldrh	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d20d      	bcs.n	8002b8c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002b70:	883a      	ldrh	r2, [r7, #0]
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d901      	bls.n	8002b7c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e014      	b.n	8002ba6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	883b      	ldrh	r3, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d901      	bls.n	8002b88 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e00e      	b.n	8002ba6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e00c      	b.n	8002ba6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002b8c:	883a      	ldrh	r2, [r7, #0]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d907      	bls.n	8002ba4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002b94:	887a      	ldrh	r2, [r7, #2]
 8002b96:	883b      	ldrh	r3, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d901      	bls.n	8002ba0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e002      	b.n	8002ba6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002ba4:	2300      	movs	r3, #0
    }
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc90      	pop	{r4, r7}
 8002bae:	4770      	bx	lr

08002bb0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	893a      	ldrh	r2, [r7, #8]
 8002bda:	f7ff ffb6 	bl	8002b4a <u8g2_is_intersection_decision_tree>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <u8g2_IsIntersection+0x38>
    return 0; 
 8002be4:	2300      	movs	r3, #0
 8002be6:	e00a      	b.n	8002bfe <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	897a      	ldrh	r2, [r7, #10]
 8002bf8:	f7ff ffa7 	bl	8002b4a <u8g2_is_intersection_decision_tree>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b089      	sub	sp, #36	@ 0x24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	4608      	mov	r0, r1
 8002c10:	4611      	mov	r1, r2
 8002c12:	461a      	mov	r2, r3
 8002c14:	4603      	mov	r3, r0
 8002c16:	817b      	strh	r3, [r7, #10]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	813b      	strh	r3, [r7, #8]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002c24:	7efb      	ldrb	r3, [r7, #27]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002c30:	7e3a      	ldrb	r2, [r7, #24]
 8002c32:	7efb      	ldrb	r3, [r7, #27]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d801      	bhi.n	8002c50 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002c4c:	7e3b      	ldrb	r3, [r7, #24]
 8002c4e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002c5a:	7e3b      	ldrb	r3, [r7, #24]
 8002c5c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002c5e:	893b      	ldrh	r3, [r7, #8]
 8002c60:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002c62:	8afb      	ldrh	r3, [r7, #22]
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	7c1b      	ldrb	r3, [r3, #16]
 8002c70:	461a      	mov	r2, r3
 8002c72:	8afb      	ldrh	r3, [r7, #22]
 8002c74:	fb13 f302 	smulbb	r3, r3, r2
 8002c78:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002c80:	8afb      	ldrh	r3, [r7, #22]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002c90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d117      	bne.n	8002cc8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	7ebb      	ldrb	r3, [r7, #26]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	7e7b      	ldrb	r3, [r7, #25]
 8002cac:	4053      	eors	r3, r2
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
	len--;
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e8      	bne.n	8002c98 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002cc6:	e038      	b.n	8002d3a <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	7ebb      	ldrb	r3, [r7, #26]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	7e7b      	ldrb	r3, [r7, #25]
 8002cdc:	4053      	eors	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002ce4:	7efb      	ldrb	r3, [r7, #27]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002cea:	7efb      	ldrb	r3, [r7, #27]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	76fb      	strb	r3, [r7, #27]
      len--;
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002cf8:	7efb      	ldrb	r3, [r7, #27]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d114      	bne.n	8002d28 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002d02:	461a      	mov	r2, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d801      	bhi.n	8002d18 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d008      	beq.n	8002d34 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	767b      	strb	r3, [r7, #25]
 8002d26:	e005      	b.n	8002d34 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002d28:	7ebb      	ldrb	r3, [r7, #26]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002d2e:	7e7b      	ldrb	r3, [r7, #25]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1c6      	bne.n	8002cc8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffa9 	bl	8002d46 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fd6d 	bl	80028d4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e1e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e20:	89fb      	ldrh	r3, [r7, #14]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	89fa      	ldrh	r2, [r7, #14]
 8002e2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	7c1b      	ldrb	r3, [r3, #16]
 8002e30:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002e32:	89fb      	ldrh	r3, [r7, #14]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	89fa      	ldrh	r2, [r7, #14]
 8002e3c:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002e44:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	89fa      	ldrh	r2, [r7, #14]
 8002e50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e58:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002e62:	4413      	add	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	7c52      	ldrb	r2, [r2, #17]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	dd07      	ble.n	8002e7c <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	7c5b      	ldrb	r3, [r3, #17]
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	8a9a      	ldrh	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	8ada      	ldrh	r2, [r3, #22]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4603      	mov	r3, r0
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fe5e 	bl	8002bb0 <u8g2_IsIntersection>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002f02:	e03b      	b.n	8002f7c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d205      	bcs.n	8002f28 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d905      	bls.n	8002f44 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d205      	bcs.n	8002f60 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d905      	bls.n	8002f7c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff3c 	bl	8002e0a <u8g2_update_dimension_common>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff7b 	bl	8002eca <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	813b      	strh	r3, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002ff6:	88f8      	ldrh	r0, [r7, #6]
 8002ff8:	893a      	ldrh	r2, [r7, #8]
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	7e3b      	ldrb	r3, [r7, #24]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	4603      	mov	r3, r0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fcde 	bl	80029c4 <u8g2_draw_hv_line_2dir>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <u8x8_ascii_next+0x18>
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	2b0a      	cmp	r3, #10
 8003042:	d102      	bne.n	800304a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003048:	e001      	b.n	800304e <u8x8_ascii_next+0x22>
  return b;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	b29b      	uxth	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <u8x8_utf8_next+0x18>
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	2b0a      	cmp	r3, #10
 8003070:	d102      	bne.n	8003078 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003076:	e06e      	b.n	8003156 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800307e:	2b00      	cmp	r3, #0
 8003080:	d145      	bne.n	800310e <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	2bfb      	cmp	r3, #251	@ 0xfb
 8003086:	d908      	bls.n	800309a <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2205      	movs	r2, #5
 800308c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 1;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	70fb      	strb	r3, [r7, #3]
 8003098:	e032      	b.n	8003100 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	2bf7      	cmp	r3, #247	@ 0xf7
 800309e:	d908      	bls.n	80030b2 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 3;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	70fb      	strb	r3, [r7, #3]
 80030b0:	e026      	b.n	8003100 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	2bef      	cmp	r3, #239	@ 0xef
 80030b6:	d908      	bls.n	80030ca <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 7;      
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	70fb      	strb	r3, [r7, #3]
 80030c8:	e01a      	b.n	8003100 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	2bdf      	cmp	r3, #223	@ 0xdf
 80030ce:	d908      	bls.n	80030e2 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 15;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	70fb      	strb	r3, [r7, #3]
 80030e0:	e00e      	b.n	8003100 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2bbf      	cmp	r3, #191	@ 0xbf
 80030e6:	d908      	bls.n	80030fa <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 0x01f;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	e002      	b.n	8003100 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	e02a      	b.n	8003156 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003108:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800310c:	e023      	b.n	8003156 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003114:	3b01      	subs	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8c1b      	ldrh	r3, [r3, #32]
 8003122:	019b      	lsls	r3, r3, #6
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003130:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8c1a      	ldrh	r2, [r3, #32]
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 800314c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003150:	e001      	b.n	8003156 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8c1b      	ldrh	r3, [r3, #32]
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003162:	b590      	push	{r4, r7, lr}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	460b      	mov	r3, r1
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	691c      	ldr	r4, [r3, #16]
 8003174:	7afa      	ldrb	r2, [r7, #11]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2117      	movs	r1, #23
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	47a0      	blx	r4
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}

08003188 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003194:	1cfb      	adds	r3, r7, #3
 8003196:	461a      	mov	r2, r3
 8003198:	2101      	movs	r1, #1
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffe1 	bl	8003162 <u8x8_byte_SendBytes>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691c      	ldr	r4, [r3, #16]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2118      	movs	r1, #24
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	47a0      	blx	r4
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}

080031ca <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80031ca:	b590      	push	{r4, r7, lr}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691c      	ldr	r4, [r3, #16]
 80031d6:	2300      	movs	r3, #0
 80031d8:	2200      	movs	r2, #0
 80031da:	2119      	movs	r1, #25
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	47a0      	blx	r4
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}

080031ea <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80031ea:	b590      	push	{r4, r7, lr}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68dc      	ldr	r4, [r3, #12]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	2300      	movs	r3, #0
 80031fe:	2115      	movs	r1, #21
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	47a0      	blx	r4
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}

0800320e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800320e:	b590      	push	{r4, r7, lr}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68dc      	ldr	r4, [r3, #12]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	2300      	movs	r3, #0
 8003222:	2116      	movs	r1, #22
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	47a0      	blx	r4
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}

08003232 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	460b      	mov	r3, r1
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68dc      	ldr	r4, [r3, #12]
 8003244:	7afa      	ldrb	r2, [r7, #11]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2117      	movs	r1, #23
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	47a0      	blx	r4
 800324e:	4603      	mov	r3, r0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bd90      	pop	{r4, r7, pc}

08003258 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68dc      	ldr	r4, [r3, #12]
 8003264:	2300      	movs	r3, #0
 8003266:	2200      	movs	r2, #0
 8003268:	2118      	movs	r1, #24
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	47a0      	blx	r4
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68dc      	ldr	r4, [r3, #12]
 8003284:	2300      	movs	r3, #0
 8003286:	2200      	movs	r2, #0
 8003288:	2119      	movs	r1, #25
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	47a0      	blx	r4
 800328e:	4603      	mov	r3, r0
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}

08003298 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	73fb      	strb	r3, [r7, #15]
    data++;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	3301      	adds	r3, #1
 80032ac:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80032b2:	d031      	beq.n	8003318 <u8x8_cad_SendSequence+0x80>
 80032b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80032b6:	dc3d      	bgt.n	8003334 <u8x8_cad_SendSequence+0x9c>
 80032b8:	2b19      	cmp	r3, #25
 80032ba:	dc3b      	bgt.n	8003334 <u8x8_cad_SendSequence+0x9c>
 80032bc:	2b18      	cmp	r3, #24
 80032be:	da23      	bge.n	8003308 <u8x8_cad_SendSequence+0x70>
 80032c0:	2b16      	cmp	r3, #22
 80032c2:	dc02      	bgt.n	80032ca <u8x8_cad_SendSequence+0x32>
 80032c4:	2b15      	cmp	r3, #21
 80032c6:	da03      	bge.n	80032d0 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80032c8:	e034      	b.n	8003334 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80032ca:	2b17      	cmp	r3, #23
 80032cc:	d00e      	beq.n	80032ec <u8x8_cad_SendSequence+0x54>
	return;
 80032ce:	e031      	b.n	8003334 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68dc      	ldr	r4, [r3, #12]
 80032da:	7bba      	ldrb	r2, [r7, #14]
 80032dc:	7bf9      	ldrb	r1, [r7, #15]
 80032de:	2300      	movs	r3, #0
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	47a0      	blx	r4
	  data++;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	603b      	str	r3, [r7, #0]
	  break;
 80032ea:	e022      	b.n	8003332 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80032f2:	f107 030e 	add.w	r3, r7, #14
 80032f6:	461a      	mov	r2, r3
 80032f8:	2101      	movs	r1, #1
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff99 	bl	8003232 <u8x8_cad_SendData>
	  data++;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	603b      	str	r3, [r7, #0]
	  break;
 8003306:	e014      	b.n	8003332 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68dc      	ldr	r4, [r3, #12]
 800330c:	7bf9      	ldrb	r1, [r7, #15]
 800330e:	2300      	movs	r3, #0
 8003310:	2200      	movs	r2, #0
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	47a0      	blx	r4
	  break;
 8003316:	e00c      	b.n	8003332 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800331e:	7bbb      	ldrb	r3, [r7, #14]
 8003320:	461a      	mov	r2, r3
 8003322:	2129      	movs	r1, #41	@ 0x29
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa2c 	bl	8003782 <u8x8_gpio_call>
	  data++;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
	  break;
 8003330:	bf00      	nop
    cmd = *data;
 8003332:	e7b6      	b.n	80032a2 <u8x8_cad_SendSequence+0xa>
	return;
 8003334:	bf00      	nop
    }
  }
}
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff ff2d 	bl	80031aa <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8003350:	2140      	movs	r1, #64	@ 0x40
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff ff18 	bl	8003188 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691c      	ldr	r4, [r3, #16]
 800335c:	7afa      	ldrb	r2, [r7, #11]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2117      	movs	r1, #23
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff ff2f 	bl	80031ca <u8x8_byte_EndTransfer>
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bd90      	pop	{r4, r7, pc}

08003374 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	72fb      	strb	r3, [r7, #11]
 8003382:	4613      	mov	r3, r2
 8003384:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	3b14      	subs	r3, #20
 800338a:	2b05      	cmp	r3, #5
 800338c:	d86e      	bhi.n	800346c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	0800342b 	.word	0x0800342b
 8003398:	080033ad 	.word	0x080033ad
 800339c:	080033db 	.word	0x080033db
 80033a0:	080033e7 	.word	0x080033e7
 80033a4:	0800344f 	.word	0x0800344f
 80033a8:	08003457 	.word	0x08003457
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80033ac:	4b33      	ldr	r3, [pc, #204]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <u8x8_cad_ssd13xx_fast_i2c+0x46>
    	  u8x8_byte_EndTransfer(u8x8);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff ff08 	bl	80031ca <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff fef5 	bl	80031aa <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80033c0:	2100      	movs	r1, #0
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff fee0 	bl	8003188 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80033c8:	7abb      	ldrb	r3, [r7, #10]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff fedb 	bl	8003188 <u8x8_byte_SendByte>
      in_transfer = 1;
 80033d2:	4b2a      	ldr	r3, [pc, #168]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80033d8:	e04a      	b.n	8003470 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80033da:	7abb      	ldrb	r3, [r7, #10]
 80033dc:	4619      	mov	r1, r3
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fed2 	bl	8003188 <u8x8_byte_SendByte>
      break;      
 80033e4:	e044      	b.n	8003470 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80033e6:	4b25      	ldr	r3, [pc, #148]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff feeb 	bl	80031ca <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80033f8:	e00a      	b.n	8003410 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	2118      	movs	r1, #24
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ff9c 	bl	800333c <u8x8_i2c_data_transfer>
	arg_int-=24;
 8003404:	7abb      	ldrb	r3, [r7, #10]
 8003406:	3b18      	subs	r3, #24
 8003408:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003410:	7abb      	ldrb	r3, [r7, #10]
 8003412:	2b18      	cmp	r3, #24
 8003414:	d8f1      	bhi.n	80033fa <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8003416:	7abb      	ldrb	r3, [r7, #10]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4619      	mov	r1, r3
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff8d 	bl	800333c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8003422:	4b16      	ldr	r3, [pc, #88]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
      break;
 8003428:	e022      	b.n	8003470 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003430:	2bff      	cmp	r3, #255	@ 0xff
 8003432:	d103      	bne.n	800343c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    	  u8x8->i2c_address = 0x078;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2278      	movs	r2, #120	@ 0x78
 8003438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691c      	ldr	r4, [r3, #16]
 8003440:	7aba      	ldrb	r2, [r7, #10]
 8003442:	7af9      	ldrb	r1, [r7, #11]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	47a0      	blx	r4
 800344a:	4603      	mov	r3, r0
 800344c:	e011      	b.n	8003472 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800344e:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
      break;
 8003454:	e00c      	b.n	8003470 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff feb3 	bl	80031ca <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
      break;
 800346a:	e001      	b.n	8003470 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8003470:	2301      	movs	r3, #1
}
 8003472:	4618      	mov	r0, r3
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	bf00      	nop
 800347c:	200003f8 	.word	0x200003f8

08003480 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	72fb      	strb	r3, [r7, #11]
 800348e:	4613      	mov	r3, r2
 8003490:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	3b0a      	subs	r3, #10
 8003496:	2b05      	cmp	r3, #5
 8003498:	f200 8090 	bhi.w	80035bc <u8x8_d_ssd1306_128x32_generic+0x13c>
 800349c:	a201      	add	r2, pc, #4	@ (adr r2, 80034a4 <u8x8_d_ssd1306_128x32_generic+0x24>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034bd 	.word	0x080034bd
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080035bd 	.word	0x080035bd
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003539 	.word	0x08003539
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f8c3 	bl	8003648 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 80034c2:	4942      	ldr	r1, [pc, #264]	@ (80035cc <u8x8_d_ssd1306_128x32_generic+0x14c>)
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff fee7 	bl	8003298 <u8x8_cad_SendSequence>
      break;
 80034ca:	e079      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80034cc:	7abb      	ldrb	r3, [r7, #10]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 80034d2:	493f      	ldr	r1, [pc, #252]	@ (80035d0 <u8x8_d_ssd1306_128x32_generic+0x150>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fedf 	bl	8003298 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 80034da:	e071      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 80034dc:	493d      	ldr	r1, [pc, #244]	@ (80035d4 <u8x8_d_ssd1306_128x32_generic+0x154>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff feda 	bl	8003298 <u8x8_cad_SendSequence>
      break;
 80034e4:	e06c      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80034e6:	7abb      	ldrb	r3, [r7, #10]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 80034ec:	493a      	ldr	r1, [pc, #232]	@ (80035d8 <u8x8_d_ssd1306_128x32_generic+0x158>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fed2 	bl	8003298 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	7c9a      	ldrb	r2, [r3, #18]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003500:	e05e      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8003502:	4936      	ldr	r1, [pc, #216]	@ (80035dc <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fec7 	bl	8003298 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	7cda      	ldrb	r2, [r3, #19]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8003516:	e053      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fe9d 	bl	8003258 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800351e:	2181      	movs	r1, #129	@ 0x81
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fe62 	bl	80031ea <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003526:	7abb      	ldrb	r3, [r7, #10]
 8003528:	4619      	mov	r1, r3
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fe6f 	bl	800320e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fea1 	bl	8003278 <u8x8_cad_EndTransfer>
      break;
 8003536:	e043      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff fe8d 	bl	8003258 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	4413      	add	r3, r2
 8003554:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0310 	orr.w	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7ff fe40 	bl	80031ea <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff fe38 	bl	80031ea <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	799b      	ldrb	r3, [r3, #6]
 800357e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003582:	b2db      	uxtb	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fe2f 	bl	80031ea <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	791b      	ldrb	r3, [r3, #4]
 8003590:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003598:	7dbb      	ldrb	r3, [r7, #22]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4619      	mov	r1, r3
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff fe45 	bl	8003232 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80035a8:	7abb      	ldrb	r3, [r7, #10]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80035ae:	7abb      	ldrb	r3, [r7, #10]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1eb      	bne.n	800358c <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fe5f 	bl	8003278 <u8x8_cad_EndTransfer>
      break;
 80035ba:	e001      	b.n	80035c0 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	080088e4 	.word	0x080088e4
 80035d0:	0800891c 	.word	0x0800891c
 80035d4:	08008924 	.word	0x08008924
 80035d8:	0800892c 	.word	0x0800892c
 80035dc:	08008934 	.word	0x08008934

080035e0 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	72fb      	strb	r3, [r7, #11]
 80035ee:	4613      	mov	r3, r2
 80035f0:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	d105      	bne.n	8003604 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 80035f8:	4908      	ldr	r1, [pc, #32]	@ (800361c <u8x8_d_ssd1306_128x32_univision+0x3c>)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f810 	bl	8003620 <u8x8_d_helper_display_setup_memory>
      return 1;
 8003600:	2301      	movs	r3, #1
 8003602:	e006      	b.n	8003612 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8003604:	7aba      	ldrb	r2, [r7, #10]
 8003606:	7af9      	ldrb	r1, [r7, #11]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff ff38 	bl	8003480 <u8x8_d_ssd1306_128x32_generic>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	0800893c 	.word	0x0800893c

08003620 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	7c9a      	ldrb	r2, [r3, #18]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695c      	ldr	r4, [r3, #20]
 8003654:	2300      	movs	r3, #0
 8003656:	2200      	movs	r2, #0
 8003658:	2128      	movs	r1, #40	@ 0x28
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68dc      	ldr	r4, [r3, #12]
 8003662:	2300      	movs	r3, #0
 8003664:	2200      	movs	r2, #0
 8003666:	2114      	movs	r1, #20
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800366c:	2201      	movs	r2, #1
 800366e:	214b      	movs	r1, #75	@ 0x4b
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f886 	bl	8003782 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	791b      	ldrb	r3, [r3, #4]
 800367c:	461a      	mov	r2, r3
 800367e:	2129      	movs	r1, #41	@ 0x29
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f87e 	bl	8003782 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	214b      	movs	r1, #75	@ 0x4b
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f879 	bl	8003782 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	791b      	ldrb	r3, [r3, #4]
 8003696:	461a      	mov	r2, r3
 8003698:	2129      	movs	r1, #41	@ 0x29
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f871 	bl	8003782 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80036a0:	2201      	movs	r2, #1
 80036a2:	214b      	movs	r1, #75	@ 0x4b
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f86c 	bl	8003782 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	795b      	ldrb	r3, [r3, #5]
 80036b0:	461a      	mov	r2, r3
 80036b2:	2129      	movs	r1, #41	@ 0x29
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f864 	bl	8003782 <u8x8_gpio_call>
}    
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	4603      	mov	r3, r0
 80036d2:	70fb      	strb	r3, [r7, #3]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70bb      	strb	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689c      	ldr	r4, [r3, #8]
 80036f0:	f107 0308 	add.w	r3, r7, #8
 80036f4:	2201      	movs	r2, #1
 80036f6:	210f      	movs	r1, #15
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	47a0      	blx	r4
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}

08003706 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003706:	b590      	push	{r4, r7, lr}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689c      	ldr	r4, [r3, #8]
 8003712:	2300      	movs	r3, #0
 8003714:	2200      	movs	r2, #0
 8003716:	2109      	movs	r1, #9
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	47a0      	blx	r4
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689c      	ldr	r4, [r3, #8]
 8003730:	2300      	movs	r3, #0
 8003732:	2200      	movs	r2, #0
 8003734:	210a      	movs	r1, #10
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}

08003742 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003742:	b590      	push	{r4, r7, lr}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689c      	ldr	r4, [r3, #8]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	2300      	movs	r3, #0
 8003756:	210b      	movs	r1, #11
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	47a0      	blx	r4
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689c      	ldr	r4, [r3, #8]
 8003770:	2300      	movs	r3, #0
 8003772:	2200      	movs	r2, #0
 8003774:	2110      	movs	r1, #16
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	47a0      	blx	r4
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}

08003782 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003782:	b590      	push	{r4, r7, lr}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
 800378e:	4613      	mov	r3, r2
 8003790:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695c      	ldr	r4, [r3, #20]
 8003796:	78ba      	ldrb	r2, [r7, #2]
 8003798:	78f9      	ldrb	r1, [r7, #3]
 800379a:	2300      	movs	r3, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	47a0      	blx	r4
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd90      	pop	{r4, r7, pc}

080037a8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	72fb      	strb	r3, [r7, #11]
 80037b6:	4613      	mov	r3, r2
 80037b8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a11      	ldr	r2, [pc, #68]	@ (8003820 <u8x8_SetupDefaults+0x58>)
 80037da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a10      	ldr	r2, [pc, #64]	@ (8003820 <u8x8_SetupDefaults+0x58>)
 80037e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003820 <u8x8_SetupDefaults+0x58>)
 80037e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <u8x8_SetupDefaults+0x58>)
 80037ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	22ff      	movs	r2, #255	@ 0xff
 8003808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	22ff      	movs	r2, #255	@ 0xff
 8003810:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	080037a9 	.word	0x080037a9

08003824 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ffc8 	bl	80037c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ff58 	bl	8003706 <u8x8_SetupMemory>
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <u8x8_byte_hw_i2c>:
extern I2C_HandleTypeDef hi2c3;

static uint8_t u8g2Buffer[25] = {0};
static uint8_t u8g2BufferCounter = 0;

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	72fb      	strb	r3, [r7, #11]
 800386e:	4613      	mov	r3, r2
 8003870:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	3b14      	subs	r3, #20
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d845      	bhi.n	8003906 <u8x8_byte_hw_i2c+0xa6>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <u8x8_byte_hw_i2c+0x20>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	0800390b 	.word	0x0800390b
 8003884:	08003907 	.word	0x08003907
 8003888:	08003907 	.word	0x08003907
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038d9 	.word	0x080038d9
 8003894:	080038e1 	.word	0x080038e1
 8003898:	08003907 	.word	0x08003907
 800389c:	08003907 	.word	0x08003907
 80038a0:	08003907 	.word	0x08003907
 80038a4:	08003907 	.word	0x08003907
 80038a8:	08003907 	.word	0x08003907
 80038ac:	08003907 	.word	0x08003907
 80038b0:	0800390b 	.word	0x0800390b
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SEND:
        	memcpy(u8g2Buffer + u8g2BufferCounter, arg_ptr, arg_int);
 80038b4:	4b18      	ldr	r3, [pc, #96]	@ (8003918 <u8x8_byte_hw_i2c+0xb8>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b18      	ldr	r3, [pc, #96]	@ (800391c <u8x8_byte_hw_i2c+0xbc>)
 80038bc:	4413      	add	r3, r2
 80038be:	7aba      	ldrb	r2, [r7, #10]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 fc50 	bl	8006168 <memcpy>
        	u8g2BufferCounter += arg_int;
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <u8x8_byte_hw_i2c+0xb8>)
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	7abb      	ldrb	r3, [r7, #10]
 80038ce:	4413      	add	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <u8x8_byte_hw_i2c+0xb8>)
 80038d4:	701a      	strb	r2, [r3, #0]
        	break;
 80038d6:	e019      	b.n	800390c <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_SET_DC:

        	break;
        case U8X8_MSG_BYTE_START_TRANSFER:
        	u8g2BufferCounter = 0;
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <u8x8_byte_hw_i2c+0xb8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
        	break;
 80038de:	e015      	b.n	800390c <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_END_TRANSFER:
        	return  HAL_OK ==  HAL_I2C_Master_Transmit(&hi2c3, (0x3C << 1), (uint8_t*)u8g2Buffer, u8g2BufferCounter, HAL_MAX_DELAY);
 80038e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <u8x8_byte_hw_i2c+0xb8>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	4a0b      	ldr	r2, [pc, #44]	@ (800391c <u8x8_byte_hw_i2c+0xbc>)
 80038f0:	2178      	movs	r1, #120	@ 0x78
 80038f2:	480b      	ldr	r0, [pc, #44]	@ (8003920 <u8x8_byte_hw_i2c+0xc0>)
 80038f4:	f000 fe2c 	bl	8004550 <HAL_I2C_Master_Transmit>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e003      	b.n	800390e <u8x8_byte_hw_i2c+0xae>
        default:
        	return 0;
 8003906:	2300      	movs	r3, #0
 8003908:	e001      	b.n	800390e <u8x8_byte_hw_i2c+0xae>
            break;
 800390a:	bf00      	nop
    }

    return 1;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000415 	.word	0x20000415
 800391c:	200003fc 	.word	0x200003fc
 8003920:	20000078 	.word	0x20000078

08003924 <u8x8_gpio_and_delay_stm32>:
    }

    return 1;
}

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	72fb      	strb	r3, [r7, #11]
 8003932:	4613      	mov	r3, r2
 8003934:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	2b2c      	cmp	r3, #44	@ 0x2c
 800393a:	dc0d      	bgt.n	8003958 <u8x8_gpio_and_delay_stm32+0x34>
 800393c:	2b2b      	cmp	r3, #43	@ 0x2b
 800393e:	da08      	bge.n	8003952 <u8x8_gpio_and_delay_stm32+0x2e>
 8003940:	2b28      	cmp	r3, #40	@ 0x28
 8003942:	d008      	beq.n	8003956 <u8x8_gpio_and_delay_stm32+0x32>
 8003944:	2b29      	cmp	r3, #41	@ 0x29
 8003946:	d107      	bne.n	8003958 <u8x8_gpio_and_delay_stm32+0x34>
    	case U8X8_MSG_GPIO_AND_DELAY_INIT:
    		break;
        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
 8003948:	7abb      	ldrb	r3, [r7, #10]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9b8 	bl	8003cc0 <HAL_Delay>
            break;
 8003950:	e002      	b.n	8003958 <u8x8_gpio_and_delay_stm32+0x34>
        case U8X8_MSG_DELAY_NANO:
        case U8X8_MSG_DELAY_100NANO:
            __NOP();
 8003952:	bf00      	nop
            break;
 8003954:	e000      	b.n	8003958 <u8x8_gpio_and_delay_stm32+0x34>
    		break;
 8003956:	bf00      	nop
    }

    return 1;
 8003958:	2301      	movs	r3, #1
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <drawBatteryIndicator>:
 */

#include "ui_controls.h"
#include "resources.h"

void drawBatteryIndicator(u8g2_t *u8g2, int x, int y, uint8_t level) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	70fb      	strb	r3, [r7, #3]
    u8g2_DrawFrame(u8g2, x, y, 16, 8);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	b299      	uxth	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	b29a      	uxth	r2, r3
 800397a:	2308      	movs	r3, #8
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2310      	movs	r3, #16
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7fe f8fe 	bl	8001b82 <u8g2_DrawFrame>
    u8g2_DrawBox(u8g2, x + 16, y + 2, 2, 4);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	b29b      	uxth	r3, r3
 800398a:	3310      	adds	r3, #16
 800398c:	b299      	uxth	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	b29b      	uxth	r3, r3
 8003992:	3302      	adds	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	2304      	movs	r3, #4
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2302      	movs	r3, #2
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7fe f8ba 	bl	8001b16 <u8g2_DrawBox>
    int fillWidth = (level * 14) / 100;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4a0e      	ldr	r2, [pc, #56]	@ (80039e8 <drawBatteryIndicator+0x84>)
 80039ae:	fb82 1203 	smull	r1, r2, r2, r3
 80039b2:	1152      	asrs	r2, r2, #5
 80039b4:	17db      	asrs	r3, r3, #31
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    if (fillWidth > 0) u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dd0e      	ble.n	80039de <drawBatteryIndicator+0x7a>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	b299      	uxth	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2006      	movs	r0, #6
 80039d6:	9000      	str	r0, [sp, #0]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7fe f89c 	bl	8001b16 <u8g2_DrawBox>
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	51eb851f 	.word	0x51eb851f

080039ec <constrain>:

int constrain(int x, int a, int b) {
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
    return (x < a) ? ((a < b) ? a : b) : x;
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	da05      	bge.n	8003a0c <constrain+0x20>
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bfa8      	it	ge
 8003a08:	4613      	movge	r3, r2
 8003a0a:	e000      	b.n	8003a0e <constrain+0x22>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <drawSignalStrengthIndicator>:

void drawSignalStrengthIndicator(u8g2_t *u8g2, int x, int y, int dBm, bool isInverted) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	@ 0x30
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]

    dBm = constrain(dBm, -80, 5);
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 8003a30:	6838      	ldr	r0, [r7, #0]
 8003a32:	f7ff ffdb 	bl	80039ec <constrain>
 8003a36:	6038      	str	r0, [r7, #0]

    int signalRange = 85;
 8003a38:	2355      	movs	r3, #85	@ 0x55
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    int shiftedDBm = dBm + 80;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	3350      	adds	r3, #80	@ 0x50
 8003a40:	623b      	str	r3, [r7, #32]
    int fillPercentage = (shiftedDBm * 100) / signalRange;
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	2264      	movs	r2, #100	@ 0x64
 8003a46:	fb03 f202 	mul.w	r2, r3, r2
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a50:	61fb      	str	r3, [r7, #28]


    int fillWidth = (fillPercentage * 60) / 100;
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <drawSignalStrengthIndicator+0x11c>)
 8003a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a62:	1152      	asrs	r2, r2, #5
 8003a64:	17db      	asrs	r3, r3, #31
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	61bb      	str	r3, [r7, #24]
    fillWidth = constrain(fillWidth, 0, 60);
 8003a6a:	223c      	movs	r2, #60	@ 0x3c
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f7ff ffbc 	bl	80039ec <constrain>
 8003a74:	61b8      	str	r0, [r7, #24]


    uint8_t currentColor = u8g2_GetDrawColor(u8g2);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003a7c:	75fb      	strb	r3, [r7, #23]

    if (fillWidth > 0) {
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dd50      	ble.n	8003b26 <drawSignalStrengthIndicator+0x10a>
        if (isInverted) {
 8003a84:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02f      	beq.n	8003aec <drawSignalStrengthIndicator+0xd0>

            u8g2_SetDrawColor(u8g2, 0);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff f844 	bl	8002b1c <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	b299      	uxth	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2340      	movs	r3, #64	@ 0x40
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7fe f86d 	bl	8001b82 <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, 60, 6);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	2306      	movs	r3, #6
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	233c      	movs	r3, #60	@ 0x3c
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7fe f829 	bl	8001b16 <u8g2_DrawBox>
            u8g2_SetDrawColor(u8g2, 1);
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff f828 	bl	8002b1c <u8g2_SetDrawColor>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2006      	movs	r0, #6
 8003ae2:	9000      	str	r0, [sp, #0]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7fe f816 	bl	8001b16 <u8g2_DrawBox>
 8003aea:	e01c      	b.n	8003b26 <drawSignalStrengthIndicator+0x10a>
        } else {

            u8g2_SetDrawColor(u8g2, 1);
 8003aec:	2101      	movs	r1, #1
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff f814 	bl	8002b1c <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	b299      	uxth	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	2308      	movs	r3, #8
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2340      	movs	r3, #64	@ 0x40
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7fe f83d 	bl	8001b82 <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2006      	movs	r0, #6
 8003b1e:	9000      	str	r0, [sp, #0]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7fd fff8 	bl	8001b16 <u8g2_DrawBox>
        }
    }


    u8g2_SetDrawColor(u8g2, currentColor);
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7fe fff6 	bl	8002b1c <u8g2_SetDrawColor>
}
 8003b30:	bf00      	nop
 8003b32:	3728      	adds	r7, #40	@ 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	51eb851f 	.word	0x51eb851f

08003b3c <drawSoundIcon>:

void drawSoundIcon(u8g2_t *u8g2, uint8_t x, uint8_t y, bool enabled) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	70fb      	strb	r3, [r7, #3]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	70bb      	strb	r3, [r7, #2]
 8003b52:	4613      	mov	r3, r2
 8003b54:	707b      	strb	r3, [r7, #1]
    if (enabled) {
 8003b56:	787b      	ldrb	r3, [r7, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00c      	beq.n	8003b76 <drawSoundIcon+0x3a>
        u8g2_DrawXBMP(u8g2, x, y, sound_off_image_width, sound_off_image_height, sound_off_image_bits);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	b299      	uxth	r1, r3
 8003b60:	78bb      	ldrb	r3, [r7, #2]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <drawSoundIcon+0x5c>)
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2308      	movs	r3, #8
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd ff8e 	bl	8001a90 <u8g2_DrawXBMP>
    } else {
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
    }
}
 8003b74:	e00b      	b.n	8003b8e <drawSoundIcon+0x52>
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	78bb      	ldrb	r3, [r7, #2]
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <drawSoundIcon+0x60>)
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2308      	movs	r3, #8
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2310      	movs	r3, #16
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd ff81 	bl	8001a90 <u8g2_DrawXBMP>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08006c40 	.word	0x08006c40
 8003b9c:	08006c30 	.word	0x08006c30

08003ba0 <drawAlertIcon>:

void drawAlertIcon(u8g2_t *u8g2, uint8_t x, uint8_t y) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
 8003bac:	4613      	mov	r3, r2
 8003bae:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(u8g2, 0);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe ffb2 	bl	8002b1c <u8g2_SetDrawColor>
    u8g2_DrawXBMP(u8g2, x, y, alert_width, alert_height, alert_bits);
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	78bb      	ldrb	r3, [r7, #2]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <drawAlertIcon+0x38>)
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	230e      	movs	r3, #14
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd ff60 	bl	8001a90 <u8g2_DrawXBMP>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	08006b50 	.word	0x08006b50

08003bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c1c <HAL_Init+0x40>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <HAL_Init+0x40>)
 8003be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_Init+0x40>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <HAL_Init+0x40>)
 8003bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a07      	ldr	r2, [pc, #28]	@ (8003c1c <HAL_Init+0x40>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c04:	2003      	movs	r0, #3
 8003c06:	f000 f94f 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f000 f808 	bl	8003c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c10:	f7fd fa78 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c28:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <HAL_InitTick+0x54>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_InitTick+0x58>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f967 	bl	8003f12 <HAL_SYSTICK_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00e      	b.n	8003c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d80a      	bhi.n	8003c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c54:	2200      	movs	r2, #0
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c5c:	f000 f92f 	bl	8003ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c60:	4a06      	ldr	r2, [pc, #24]	@ (8003c7c <HAL_InitTick+0x5c>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000008 	.word	0x20000008
 8003c7c:	20000004 	.word	0x20000004

08003c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c84:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_IncTick+0x20>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_IncTick+0x24>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <HAL_IncTick+0x24>)
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000008 	.word	0x20000008
 8003ca4:	20000418 	.word	0x20000418

08003ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_GetTick+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000418 	.word	0x20000418

08003cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7ff ffee 	bl	8003ca8 <HAL_GetTick>
 8003ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd8:	d005      	beq.n	8003ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_Delay+0x44>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ce6:	bf00      	nop
 8003ce8:	f7ff ffde 	bl	8003ca8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d8f7      	bhi.n	8003ce8 <HAL_Delay+0x28>
  {
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000008 	.word	0x20000008

08003d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__NVIC_GetPriorityGrouping+0x18>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0307 	and.w	r3, r3, #7
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db0b      	blt.n	8003d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4907      	ldr	r1, [pc, #28]	@ (8003da4 <__NVIC_EnableIRQ+0x38>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	@ (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	@ (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	@ 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf28      	it	cs
 8003e1a:	2304      	movcs	r3, #4
 8003e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d902      	bls.n	8003e2c <NVIC_EncodePriority+0x30>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3b03      	subs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <NVIC_EncodePriority+0x32>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	401a      	ands	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	4313      	orrs	r3, r2
         );
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	@ 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e88:	f7ff ff8e 	bl	8003da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff29 	bl	8003d08 <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff3e 	bl	8003d50 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff8e 	bl	8003dfc <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5d 	bl	8003da8 <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff31 	bl	8003d6c <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa2 	bl	8003e64 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	@ 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e159      	b.n	80041fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f040 8148 	bne.w	80041f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d005      	beq.n	8003f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d130      	bne.n	8003fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	2203      	movs	r2, #3
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 0201 	and.w	r2, r3, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d017      	beq.n	800401c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d123      	bne.n	8004070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	08da      	lsrs	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3208      	adds	r2, #8
 8004030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	220f      	movs	r2, #15
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	08da      	lsrs	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3208      	adds	r2, #8
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0203 	and.w	r2, r3, #3
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80a2 	beq.w	80041f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b57      	ldr	r3, [pc, #348]	@ (8004214 <HAL_GPIO_Init+0x2e8>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	4a56      	ldr	r2, [pc, #344]	@ (8004214 <HAL_GPIO_Init+0x2e8>)
 80040bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040c2:	4b54      	ldr	r3, [pc, #336]	@ (8004214 <HAL_GPIO_Init+0x2e8>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ce:	4a52      	ldr	r2, [pc, #328]	@ (8004218 <HAL_GPIO_Init+0x2ec>)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a49      	ldr	r2, [pc, #292]	@ (800421c <HAL_GPIO_Init+0x2f0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d019      	beq.n	800412e <HAL_GPIO_Init+0x202>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a48      	ldr	r2, [pc, #288]	@ (8004220 <HAL_GPIO_Init+0x2f4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_GPIO_Init+0x1fe>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a47      	ldr	r2, [pc, #284]	@ (8004224 <HAL_GPIO_Init+0x2f8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00d      	beq.n	8004126 <HAL_GPIO_Init+0x1fa>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a46      	ldr	r2, [pc, #280]	@ (8004228 <HAL_GPIO_Init+0x2fc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <HAL_GPIO_Init+0x1f6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a45      	ldr	r2, [pc, #276]	@ (800422c <HAL_GPIO_Init+0x300>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <HAL_GPIO_Init+0x1f2>
 800411a:	2304      	movs	r3, #4
 800411c:	e008      	b.n	8004130 <HAL_GPIO_Init+0x204>
 800411e:	2307      	movs	r3, #7
 8004120:	e006      	b.n	8004130 <HAL_GPIO_Init+0x204>
 8004122:	2303      	movs	r3, #3
 8004124:	e004      	b.n	8004130 <HAL_GPIO_Init+0x204>
 8004126:	2302      	movs	r3, #2
 8004128:	e002      	b.n	8004130 <HAL_GPIO_Init+0x204>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_GPIO_Init+0x204>
 800412e:	2300      	movs	r3, #0
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	f002 0203 	and.w	r2, r2, #3
 8004136:	0092      	lsls	r2, r2, #2
 8004138:	4093      	lsls	r3, r2
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004140:	4935      	ldr	r1, [pc, #212]	@ (8004218 <HAL_GPIO_Init+0x2ec>)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	3302      	adds	r3, #2
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414e:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <HAL_GPIO_Init+0x304>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004172:	4a2f      	ldr	r2, [pc, #188]	@ (8004230 <HAL_GPIO_Init+0x304>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004178:	4b2d      	ldr	r3, [pc, #180]	@ (8004230 <HAL_GPIO_Init+0x304>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800419c:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <HAL_GPIO_Init+0x304>)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041a2:	4b23      	ldr	r3, [pc, #140]	@ (8004230 <HAL_GPIO_Init+0x304>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004230 <HAL_GPIO_Init+0x304>)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041cc:	4b18      	ldr	r3, [pc, #96]	@ (8004230 <HAL_GPIO_Init+0x304>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004230 <HAL_GPIO_Init+0x304>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	f67f aea2 	bls.w	8003f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3724      	adds	r7, #36	@ 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	40013800 	.word	0x40013800
 800421c:	40020000 	.word	0x40020000
 8004220:	40020400 	.word	0x40020400
 8004224:	40020800 	.word	0x40020800
 8004228:	40020c00 	.word	0x40020c00
 800422c:	40021000 	.word	0x40021000
 8004230:	40013c00 	.word	0x40013c00

08004234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e001      	b.n	8004256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	807b      	strh	r3, [r7, #2]
 8004270:	4613      	mov	r3, r2
 8004272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004274:	787b      	ldrb	r3, [r7, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004280:	e003      	b.n	800428a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	041a      	lsls	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	619a      	str	r2, [r3, #24]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042a2:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ae:	4a05      	ldr	r2, [pc, #20]	@ (80042c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc fef0 	bl	800109c <HAL_GPIO_EXTI_Callback>
  }
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40013c00 	.word	0x40013c00

080042c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e12b      	b.n	8004532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fdae 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800432c:	f001 f8da 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8004330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a81      	ldr	r2, [pc, #516]	@ (800453c <HAL_I2C_Init+0x274>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d807      	bhi.n	800434c <HAL_I2C_Init+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a80      	ldr	r2, [pc, #512]	@ (8004540 <HAL_I2C_Init+0x278>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e006      	b.n	800435a <HAL_I2C_Init+0x92>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a7d      	ldr	r2, [pc, #500]	@ (8004544 <HAL_I2C_Init+0x27c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	bf94      	ite	ls
 8004354:	2301      	movls	r3, #1
 8004356:	2300      	movhi	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0e7      	b.n	8004532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a78      	ldr	r2, [pc, #480]	@ (8004548 <HAL_I2C_Init+0x280>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0c9b      	lsrs	r3, r3, #18
 800436c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a6a      	ldr	r2, [pc, #424]	@ (800453c <HAL_I2C_Init+0x274>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <HAL_I2C_Init+0xd4>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3301      	adds	r3, #1
 800439a:	e009      	b.n	80043b0 <HAL_I2C_Init+0xe8>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	4a69      	ldr	r2, [pc, #420]	@ (800454c <HAL_I2C_Init+0x284>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	3301      	adds	r3, #1
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	495c      	ldr	r1, [pc, #368]	@ (800453c <HAL_I2C_Init+0x274>)
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d819      	bhi.n	8004404 <HAL_I2C_Init+0x13c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e59      	subs	r1, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fbb1 f3f3 	udiv	r3, r1, r3
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043e4:	400b      	ands	r3, r1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_I2C_Init+0x138>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1e59      	subs	r1, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	e051      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004400:	2304      	movs	r3, #4
 8004402:	e04f      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d111      	bne.n	8004430 <HAL_I2C_Init+0x168>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e012      	b.n	8004456 <HAL_I2C_Init+0x18e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	0099      	lsls	r1, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	fbb0 f3f3 	udiv	r3, r0, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Init+0x196>
 800445a:	2301      	movs	r3, #1
 800445c:	e022      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10e      	bne.n	8004484 <HAL_I2C_Init+0x1bc>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e58      	subs	r0, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	440b      	add	r3, r1
 8004474:	fbb0 f3f3 	udiv	r3, r0, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004482:	e00f      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1e58      	subs	r0, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	0099      	lsls	r1, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	fbb0 f3f3 	udiv	r3, r0, r3
 800449a:	3301      	adds	r3, #1
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	6809      	ldr	r1, [r1, #0]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6911      	ldr	r1, [r2, #16]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	000186a0 	.word	0x000186a0
 8004540:	001e847f 	.word	0x001e847f
 8004544:	003d08ff 	.word	0x003d08ff
 8004548:	431bde83 	.word	0x431bde83
 800454c:	10624dd3 	.word	0x10624dd3

08004550 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	460b      	mov	r3, r1
 800455e:	817b      	strh	r3, [r7, #10]
 8004560:	4613      	mov	r3, r2
 8004562:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004564:	f7ff fba0 	bl	8003ca8 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	f040 80e0 	bne.w	8004738 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2319      	movs	r3, #25
 800457e:	2201      	movs	r2, #1
 8004580:	4970      	ldr	r1, [pc, #448]	@ (8004744 <HAL_I2C_Master_Transmit+0x1f4>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f964 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
 8004590:	e0d3      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_I2C_Master_Transmit+0x50>
 800459c:	2302      	movs	r3, #2
 800459e:	e0cc      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d007      	beq.n	80045c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2221      	movs	r2, #33	@ 0x21
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2210      	movs	r2, #16
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	893a      	ldrh	r2, [r7, #8]
 80045f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a50      	ldr	r2, [pc, #320]	@ (8004748 <HAL_I2C_Master_Transmit+0x1f8>)
 8004606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004608:	8979      	ldrh	r1, [r7, #10]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f89c 	bl	800474c <I2C_MasterRequestWrite>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e08d      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004634:	e066      	b.n	8004704 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	6a39      	ldr	r1, [r7, #32]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fa22 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b04      	cmp	r3, #4
 800464c:	d107      	bne.n	800465e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06b      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11b      	bne.n	80046d8 <HAL_I2C_Master_Transmit+0x188>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d017      	beq.n	80046d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	6a39      	ldr	r1, [r7, #32]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fa19 	bl	8004b14 <I2C_WaitOnBTFFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d107      	bne.n	8004700 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e01a      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d194      	bne.n	8004636 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	00100002 	.word	0x00100002
 8004748:	ffff0000 	.word	0xffff0000

0800474c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	460b      	mov	r3, r1
 800475a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d006      	beq.n	8004776 <I2C_MasterRequestWrite+0x2a>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d003      	beq.n	8004776 <I2C_MasterRequestWrite+0x2a>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004774:	d108      	bne.n	8004788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e00b      	b.n	80047a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	2b12      	cmp	r3, #18
 800478e:	d107      	bne.n	80047a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f84f 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c6:	d103      	bne.n	80047d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e035      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047dc:	d108      	bne.n	80047f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e01b      	b.n	8004828 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047f0:	897b      	ldrh	r3, [r7, #10]
 80047f2:	11db      	asrs	r3, r3, #7
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f063 030f 	orn	r3, r3, #15
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	490e      	ldr	r1, [pc, #56]	@ (8004848 <I2C_MasterRequestWrite+0xfc>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f898 	bl	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e010      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4907      	ldr	r1, [pc, #28]	@ (800484c <I2C_MasterRequestWrite+0x100>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f888 	bl	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010008 	.word	0x00010008
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	e048      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004868:	d044      	beq.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7ff fa1d 	bl	8003ca8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d139      	bne.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d10d      	bne.n	80048a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	e00c      	b.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	43da      	mvns	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4013      	ands	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d116      	bne.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e023      	b.n	800493c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10d      	bne.n	800491a <I2C_WaitOnFlagUntilTimeout+0xca>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	43da      	mvns	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	e00c      	b.n	8004934 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	43da      	mvns	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	d093      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004952:	e071      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004962:	d123      	bne.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004972:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800497c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	f043 0204 	orr.w	r2, r3, #4
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e067      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b2:	d041      	beq.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b4:	f7ff f978 	bl	8003ca8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d136      	bne.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e00b      	b.n	8004a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	43da      	mvns	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e021      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10c      	bne.n	8004a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	43da      	mvns	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e00b      	b.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f af6d 	bne.w	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a90:	e034      	b.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f886 	bl	8004ba4 <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa8:	d028      	beq.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7ff f8fd 	bl	8003ca8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aca:	2b80      	cmp	r3, #128	@ 0x80
 8004acc:	d016      	beq.n	8004afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b06:	2b80      	cmp	r3, #128	@ 0x80
 8004b08:	d1c3      	bne.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b20:	e034      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f83e 	bl	8004ba4 <I2C_IsAcknowledgeFailed>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e034      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b38:	d028      	beq.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7ff f8b5 	bl	8003ca8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11d      	bne.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d016      	beq.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e007      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d1c3      	bne.n	8004b22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bba:	d11b      	bne.n	8004bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e267      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c22:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e242      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6c      	ldr	r2, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fff4 	bl	8003ca8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe fff0 	bl	8003ca8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	@ 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e207      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe ffe0 	bl	8003ca8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe ffdc 	bl	8003ca8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f3      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c7      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4937      	ldr	r1, [pc, #220]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe ff95 	bl	8003ca8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe ff91 	bl	8003ca8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a8      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe ff74 	bl	8003ca8 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe ff70 	bl	8003ca8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e187      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d036      	beq.n	8004e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe ff54 	bl	8003ca8 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe ff50 	bl	8003ca8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e167      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e01b      	b.n	8004e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe ff3d 	bl	8003ca8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e00e      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fe ff39 	bl	8003ca8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d907      	bls.n	8004e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e150      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b88      	ldr	r3, [pc, #544]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8097 	beq.w	8004f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b81      	ldr	r3, [pc, #516]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b77      	ldr	r3, [pc, #476]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d118      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b74      	ldr	r3, [pc, #464]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a73      	ldr	r2, [pc, #460]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fef9 	bl	8003ca8 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fe fef5 	bl	8003ca8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e10c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8005078 <HAL_RCC_OscConfig+0x474>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x2ea>
 8004ee0:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a63      	ldr	r2, [pc, #396]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x30c>
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a5e      	ldr	r2, [pc, #376]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	4b5c      	ldr	r3, [pc, #368]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	4a5b      	ldr	r2, [pc, #364]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004f10:	4b58      	ldr	r3, [pc, #352]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a57      	ldr	r2, [pc, #348]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	4b55      	ldr	r3, [pc, #340]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe feba 	bl	8003ca8 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fe feb6 	bl	8003ca8 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0cb      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b49      	ldr	r3, [pc, #292]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCC_OscConfig+0x334>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5c:	f7fe fea4 	bl	8003ca8 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fe fea0 	bl	8003ca8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0b5      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ee      	bne.n	8004f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	4a38      	ldr	r2, [pc, #224]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa2:	4b34      	ldr	r3, [pc, #208]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d05c      	beq.n	8005068 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d141      	bne.n	800503a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fe74 	bl	8003ca8 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fe fe70 	bl	8003ca8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e087      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	491b      	ldr	r1, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe fe49 	bl	8003ca8 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501a:	f7fe fe45 	bl	8003ca8 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e05c      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502c:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x416>
 8005038:	e054      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe fe32 	bl	8003ca8 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fe fe2e 	bl	8003ca8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e045      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCC_OscConfig+0x470>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x444>
 8005066:	e03d      	b.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e038      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
 800507c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005080:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d028      	beq.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d121      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fe fd60 	bl	8003ca8 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fe fd5c 	bl	8003ca8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fcc0 	bl	8003c20 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08006e44 	.word	0x08006e44
 80052b8:	20000000 	.word	0x20000000
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b094      	sub	sp, #80	@ 0x50
 80052c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d8:	4b79      	ldr	r3, [pc, #484]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d00d      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	f200 80e1 	bhi.w	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x3a>
 80052f2:	e0db      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b73      	ldr	r3, [pc, #460]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f8:	e0db      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fa:	4b73      	ldr	r3, [pc, #460]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052fe:	e0d8      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005300:	4b6f      	ldr	r3, [pc, #444]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530a:	4b6d      	ldr	r3, [pc, #436]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d063      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005316:	4b6a      	ldr	r3, [pc, #424]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	099b      	lsrs	r3, r3, #6
 800531c:	2200      	movs	r2, #0
 800531e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
 800532a:	2300      	movs	r3, #0
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
 800532e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	0159      	lsls	r1, r3, #5
 8005340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005344:	0150      	lsls	r0, r2, #5
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4621      	mov	r1, r4
 800534c:	1a51      	subs	r1, r2, r1
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	4629      	mov	r1, r5
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005364:	4659      	mov	r1, fp
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536e:	4651      	mov	r1, sl
 8005370:	018a      	lsls	r2, r1, #6
 8005372:	4651      	mov	r1, sl
 8005374:	ebb2 0801 	subs.w	r8, r2, r1
 8005378:	4659      	mov	r1, fp
 800537a:	eb63 0901 	sbc.w	r9, r3, r1
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4623      	mov	r3, r4
 8005398:	eb18 0303 	adds.w	r3, r8, r3
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	462b      	mov	r3, r5
 80053a0:	eb49 0303 	adc.w	r3, r9, r3
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b2:	4629      	mov	r1, r5
 80053b4:	024b      	lsls	r3, r1, #9
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053bc:	4621      	mov	r1, r4
 80053be:	024a      	lsls	r2, r1, #9
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c6:	2200      	movs	r2, #0
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d0:	f7fa ff56 	bl	8000280 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053dc:	e058      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	2200      	movs	r2, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	4611      	mov	r1, r2
 80053ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f04f 0000 	mov.w	r0, #0
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540a:	0150      	lsls	r0, r2, #5
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4641      	mov	r1, r8
 8005412:	ebb2 0a01 	subs.w	sl, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb63 0b01 	sbc.w	fp, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800542c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005430:	ebb2 040a 	subs.w	r4, r2, sl
 8005434:	eb63 050b 	sbc.w	r5, r3, fp
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	00eb      	lsls	r3, r5, #3
 8005442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	4614      	mov	r4, r2
 800544a:	461d      	mov	r5, r3
 800544c:	4643      	mov	r3, r8
 800544e:	18e3      	adds	r3, r4, r3
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	464b      	mov	r3, r9
 8005454:	eb45 0303 	adc.w	r3, r5, r3
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005466:	4629      	mov	r1, r5
 8005468:	028b      	lsls	r3, r1, #10
 800546a:	4621      	mov	r1, r4
 800546c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005470:	4621      	mov	r1, r4
 8005472:	028a      	lsls	r2, r1, #10
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547a:	2200      	movs	r2, #0
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005484:	f7fa fefc 	bl	8000280 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005490:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	3301      	adds	r3, #1
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054aa:	e002      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3750      	adds	r7, #80	@ 0x50
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	007a1200 	.word	0x007a1200

080054cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d0:	4b03      	ldr	r3, [pc, #12]	@ (80054e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000000 	.word	0x20000000

080054e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054e8:	f7ff fff0 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0a9b      	lsrs	r3, r3, #10
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4903      	ldr	r1, [pc, #12]	@ (8005508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	08006e54 	.word	0x08006e54

0800550c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005510:	f7ff ffdc 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 8005514:	4602      	mov	r2, r0
 8005516:	4b05      	ldr	r3, [pc, #20]	@ (800552c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	0b5b      	lsrs	r3, r3, #13
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	4903      	ldr	r1, [pc, #12]	@ (8005530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005522:	5ccb      	ldrb	r3, [r1, r3]
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023800 	.word	0x40023800
 8005530:	08006e54 	.word	0x08006e54

08005534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fb feb8 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	@ 0x24
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f82b 	bl	80055d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800558c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d8:	b0c0      	sub	sp, #256	@ 0x100
 80055da:	af00      	add	r7, sp, #0
 80055dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	68d9      	ldr	r1, [r3, #12]
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	ea40 0301 	orr.w	r3, r0, r1
 80055fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	431a      	orrs	r2, r3
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800562c:	f021 010c 	bic.w	r1, r1, #12
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800563a:	430b      	orrs	r3, r1
 800563c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	6999      	ldr	r1, [r3, #24]
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	ea40 0301 	orr.w	r3, r0, r1
 800565a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b8f      	ldr	r3, [pc, #572]	@ (80058a0 <UART_SetConfig+0x2cc>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d005      	beq.n	8005674 <UART_SetConfig+0xa0>
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b8d      	ldr	r3, [pc, #564]	@ (80058a4 <UART_SetConfig+0x2d0>)
 8005670:	429a      	cmp	r2, r3
 8005672:	d104      	bne.n	800567e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7ff ff4a 	bl	800550c <HAL_RCC_GetPCLK2Freq>
 8005678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800567c:	e003      	b.n	8005686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800567e:	f7ff ff31 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8005682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005690:	f040 810c 	bne.w	80058ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800569e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056a6:	4622      	mov	r2, r4
 80056a8:	462b      	mov	r3, r5
 80056aa:	1891      	adds	r1, r2, r2
 80056ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056ae:	415b      	adcs	r3, r3
 80056b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056b6:	4621      	mov	r1, r4
 80056b8:	eb12 0801 	adds.w	r8, r2, r1
 80056bc:	4629      	mov	r1, r5
 80056be:	eb43 0901 	adc.w	r9, r3, r1
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056d6:	4690      	mov	r8, r2
 80056d8:	4699      	mov	r9, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	eb18 0303 	adds.w	r3, r8, r3
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056e4:	462b      	mov	r3, r5
 80056e6:	eb49 0303 	adc.w	r3, r9, r3
 80056ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005702:	460b      	mov	r3, r1
 8005704:	18db      	adds	r3, r3, r3
 8005706:	653b      	str	r3, [r7, #80]	@ 0x50
 8005708:	4613      	mov	r3, r2
 800570a:	eb42 0303 	adc.w	r3, r2, r3
 800570e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005718:	f7fa fdb2 	bl	8000280 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4b61      	ldr	r3, [pc, #388]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011c      	lsls	r4, r3, #4
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005744:	415b      	adcs	r3, r3
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800574c:	4641      	mov	r1, r8
 800574e:	eb12 0a01 	adds.w	sl, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb43 0b01 	adc.w	fp, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576c:	4692      	mov	sl, r2
 800576e:	469b      	mov	fp, r3
 8005770:	4643      	mov	r3, r8
 8005772:	eb1a 0303 	adds.w	r3, sl, r3
 8005776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800577a:	464b      	mov	r3, r9
 800577c:	eb4b 0303 	adc.w	r3, fp, r3
 8005780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005798:	460b      	mov	r3, r1
 800579a:	18db      	adds	r3, r3, r3
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
 800579e:	4613      	mov	r3, r2
 80057a0:	eb42 0303 	adc.w	r3, r2, r3
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057ae:	f7fa fd67 	bl	8000280 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	4b3b      	ldr	r3, [pc, #236]	@ (80058a8 <UART_SetConfig+0x2d4>)
 80057ba:	fba3 2301 	umull	r2, r3, r3, r1
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2264      	movs	r2, #100	@ 0x64
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	1acb      	subs	r3, r1, r3
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057ce:	4b36      	ldr	r3, [pc, #216]	@ (80058a8 <UART_SetConfig+0x2d4>)
 80057d0:	fba3 2302 	umull	r2, r3, r3, r2
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057dc:	441c      	add	r4, r3
 80057de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057f8:	415b      	adcs	r3, r3
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005800:	4641      	mov	r1, r8
 8005802:	1851      	adds	r1, r2, r1
 8005804:	6339      	str	r1, [r7, #48]	@ 0x30
 8005806:	4649      	mov	r1, r9
 8005808:	414b      	adcs	r3, r1
 800580a:	637b      	str	r3, [r7, #52]	@ 0x34
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005818:	4659      	mov	r1, fp
 800581a:	00cb      	lsls	r3, r1, #3
 800581c:	4651      	mov	r1, sl
 800581e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005822:	4651      	mov	r1, sl
 8005824:	00ca      	lsls	r2, r1, #3
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	4603      	mov	r3, r0
 800582c:	4642      	mov	r2, r8
 800582e:	189b      	adds	r3, r3, r2
 8005830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005834:	464b      	mov	r3, r9
 8005836:	460a      	mov	r2, r1
 8005838:	eb42 0303 	adc.w	r3, r2, r3
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800584c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005854:	460b      	mov	r3, r1
 8005856:	18db      	adds	r3, r3, r3
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	4613      	mov	r3, r2
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800586a:	f7fa fd09 	bl	8000280 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	@ 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	3332      	adds	r3, #50	@ 0x32
 8005886:	4a08      	ldr	r2, [pc, #32]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	f003 0207 	and.w	r2, r3, #7
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4422      	add	r2, r4
 800589a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800589c:	e106      	b.n	8005aac <UART_SetConfig+0x4d8>
 800589e:	bf00      	nop
 80058a0:	40011000 	.word	0x40011000
 80058a4:	40011400 	.word	0x40011400
 80058a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058be:	4642      	mov	r2, r8
 80058c0:	464b      	mov	r3, r9
 80058c2:	1891      	adds	r1, r2, r2
 80058c4:	6239      	str	r1, [r7, #32]
 80058c6:	415b      	adcs	r3, r3
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ce:	4641      	mov	r1, r8
 80058d0:	1854      	adds	r4, r2, r1
 80058d2:	4649      	mov	r1, r9
 80058d4:	eb43 0501 	adc.w	r5, r3, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	00eb      	lsls	r3, r5, #3
 80058e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058e6:	00e2      	lsls	r2, r4, #3
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	4643      	mov	r3, r8
 80058ee:	18e3      	adds	r3, r4, r3
 80058f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058f4:	464b      	mov	r3, r9
 80058f6:	eb45 0303 	adc.w	r3, r5, r3
 80058fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800590a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800591a:	4629      	mov	r1, r5
 800591c:	008b      	lsls	r3, r1, #2
 800591e:	4621      	mov	r1, r4
 8005920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005924:	4621      	mov	r1, r4
 8005926:	008a      	lsls	r2, r1, #2
 8005928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800592c:	f7fa fca8 	bl	8000280 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011c      	lsls	r4, r3, #4
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800594c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	61b9      	str	r1, [r7, #24]
 8005958:	415b      	adcs	r3, r3
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6139      	str	r1, [r7, #16]
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005994:	464b      	mov	r3, r9
 8005996:	460a      	mov	r2, r1
 8005998:	eb42 0303 	adc.w	r3, r2, r3
 800599c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059b8:	4649      	mov	r1, r9
 80059ba:	008b      	lsls	r3, r1, #2
 80059bc:	4641      	mov	r1, r8
 80059be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c2:	4641      	mov	r1, r8
 80059c4:	008a      	lsls	r2, r1, #2
 80059c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059ca:	f7fa fc59 	bl	8000280 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	4b38      	ldr	r3, [pc, #224]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 80059d6:	fba3 2301 	umull	r2, r3, r3, r1
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2264      	movs	r2, #100	@ 0x64
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	1acb      	subs	r3, r1, r3
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	3332      	adds	r3, #50	@ 0x32
 80059e8:	4a33      	ldr	r2, [pc, #204]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059f4:	441c      	add	r4, r3
 80059f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fa:	2200      	movs	r2, #0
 80059fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80059fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a14:	4641      	mov	r1, r8
 8005a16:	1851      	adds	r1, r2, r1
 8005a18:	6039      	str	r1, [r7, #0]
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	414b      	adcs	r3, r1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	00cb      	lsls	r3, r1, #3
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a36:	4651      	mov	r1, sl
 8005a38:	00ca      	lsls	r2, r1, #3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4642      	mov	r2, r8
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a46:	464b      	mov	r3, r9
 8005a48:	460a      	mov	r2, r1
 8005a4a:	eb42 0303 	adc.w	r3, r2, r3
 8005a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a68:	4649      	mov	r1, r9
 8005a6a:	008b      	lsls	r3, r1, #2
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a72:	4641      	mov	r1, r8
 8005a74:	008a      	lsls	r2, r1, #2
 8005a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a7a:	f7fa fc01 	bl	8000280 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	@ 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	3332      	adds	r3, #50	@ 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab8:	51eb851f 	.word	0x51eb851f

08005abc <_ZN13EventRecieverC1Ev>:
 *      Author: lex
 */

#include <EventReciever.h>

EventReciever::EventReciever() {
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	4a04      	ldr	r2, [pc, #16]	@ (8005ad8 <_ZN13EventRecieverC1Ev+0x1c>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	0800895c 	.word	0x0800895c

08005adc <_ZN13EventRecieverD1Ev>:

EventReciever::~EventReciever() {
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	4a04      	ldr	r2, [pc, #16]	@ (8005af8 <_ZN13EventRecieverD1Ev+0x1c>)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	0800895c 	.word	0x0800895c

08005afc <_ZN11EventSenderC1Ev>:
 *      Author: lex
 */

#include <EventSender.h>

EventSender::EventSender() {
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <_ZN11EventSenderC1Ev+0x1c>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	08008970 	.word	0x08008970

08005b1c <_ZN11EventSenderD1Ev>:

EventSender::~EventSender() {
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	4a04      	ldr	r2, [pc, #16]	@ (8005b38 <_ZN11EventSenderD1Ev+0x1c>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	08008970 	.word	0x08008970

08005b3c <_ZN11EventSenderD0Ev>:
EventSender::~EventSender() {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
}
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff ffe9 	bl	8005b1c <_ZN11EventSenderD1Ev>
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f83d 	bl	8005bcc <_ZdlPvj>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <_Z14getChannelNametiPc>:
const uint16_t Band_X[8] = 					{ 4991, 5021, 5049, 5079, 5109, 5139, 5171, 5201 }; // X
const uint16_t Band_J[8] = 					{ 4867, 4883, 4921, 4958, 4995, 5032, 5069, 5099 }; // J
const uint16_t Band_K[8] = 					{ 5959, 5979, 5999, 6019, 6039, 6059, 6079, 6101 }; // K
const uint16_t Band_Z[8] = 					{ 6001, 6027, 6053, 6079, 6105, 6131, 6157, 6183 };  // Z

void getChannelName(uint16_t frequency, int receiver, char printBuffer[24]) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	4603      	mov	r3, r0
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	81fb      	strh	r3, [r7, #14]
//  if (receiver == 1) {
    for (uint8_t i = 0; i < 137; i++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
 8005b6e:	e01e      	b.n	8005bae <_Z14getChannelNametiPc+0x52>
      if (channelFreqTable[i] == frequency) {
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	4a13      	ldr	r2, [pc, #76]	@ (8005bc0 <_Z14getChannelNametiPc+0x64>)
 8005b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b78:	89fa      	ldrh	r2, [r7, #14]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d114      	bne.n	8005ba8 <_Z14getChannelNametiPc+0x4c>
        char band = 'A' + (i / 8); // определяем бенд (A, B, E, F, ...)
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	08db      	lsrs	r3, r3, #3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	3341      	adds	r3, #65	@ 0x41
 8005b86:	75bb      	strb	r3, [r7, #22]
        uint8_t channel = (i % 8) + 1; // номер канала в бенде
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	757b      	strb	r3, [r7, #21]
        snprintf(printBuffer, sizeof(printBuffer), " CH\:%c %i", band, channel);
 8005b94:	7dba      	ldrb	r2, [r7, #22]
 8005b96:	7d7b      	ldrb	r3, [r7, #21]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	4a09      	ldr	r2, [pc, #36]	@ (8005bc4 <_Z14getChannelNametiPc+0x68>)
 8005b9e:	2104      	movs	r1, #4
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa41 	bl	8006028 <sniprintf>
        return;
 8005ba6:	e008      	b.n	8005bba <_Z14getChannelNametiPc+0x5e>
    for (uint8_t i = 0; i < 137; i++) {
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	3301      	adds	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b88      	cmp	r3, #136	@ 0x88
 8005bb2:	d9dd      	bls.n	8005b70 <_Z14getChannelNametiPc+0x14>
//        return;
//      }
//    }
//  }

  printBuffer = " CH:--";
 8005bb4:	4b04      	ldr	r3, [pc, #16]	@ (8005bc8 <_Z14getChannelNametiPc+0x6c>)
 8005bb6:	607b      	str	r3, [r7, #4]
  return;
 8005bb8:	bf00      	nop
}
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08006cac 	.word	0x08006cac
 8005bc4:	08006df8 	.word	0x08006df8
 8005bc8:	08006e04 	.word	0x08006e04

08005bcc <_ZdlPvj>:
 8005bcc:	f000 b800 	b.w	8005bd0 <_ZdlPv>

08005bd0 <_ZdlPv>:
 8005bd0:	f000 b980 	b.w	8005ed4 <free>

08005bd4 <swapfunc>:
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	b510      	push	{r4, lr}
 8005bd8:	d00a      	beq.n	8005bf0 <swapfunc+0x1c>
 8005bda:	0892      	lsrs	r2, r2, #2
 8005bdc:	3a01      	subs	r2, #1
 8005bde:	6803      	ldr	r3, [r0, #0]
 8005be0:	680c      	ldr	r4, [r1, #0]
 8005be2:	f840 4b04 	str.w	r4, [r0], #4
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	f841 3b04 	str.w	r3, [r1], #4
 8005bec:	dcf6      	bgt.n	8005bdc <swapfunc+0x8>
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	4402      	add	r2, r0
 8005bf2:	780c      	ldrb	r4, [r1, #0]
 8005bf4:	7803      	ldrb	r3, [r0, #0]
 8005bf6:	f800 4b01 	strb.w	r4, [r0], #1
 8005bfa:	f801 3b01 	strb.w	r3, [r1], #1
 8005bfe:	1a13      	subs	r3, r2, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	dcf6      	bgt.n	8005bf2 <swapfunc+0x1e>
 8005c04:	e7f3      	b.n	8005bee <swapfunc+0x1a>

08005c06 <med3.constprop.0>:
 8005c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c08:	460f      	mov	r7, r1
 8005c0a:	4616      	mov	r6, r2
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	461d      	mov	r5, r3
 8005c10:	4798      	blx	r3
 8005c12:	2800      	cmp	r0, #0
 8005c14:	4631      	mov	r1, r6
 8005c16:	4638      	mov	r0, r7
 8005c18:	da0c      	bge.n	8005c34 <med3.constprop.0+0x2e>
 8005c1a:	47a8      	blx	r5
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	da02      	bge.n	8005c26 <med3.constprop.0+0x20>
 8005c20:	463c      	mov	r4, r7
 8005c22:	4620      	mov	r0, r4
 8005c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c26:	4631      	mov	r1, r6
 8005c28:	4620      	mov	r0, r4
 8005c2a:	47a8      	blx	r5
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	daf8      	bge.n	8005c22 <med3.constprop.0+0x1c>
 8005c30:	4634      	mov	r4, r6
 8005c32:	e7f6      	b.n	8005c22 <med3.constprop.0+0x1c>
 8005c34:	47a8      	blx	r5
 8005c36:	2800      	cmp	r0, #0
 8005c38:	dcf2      	bgt.n	8005c20 <med3.constprop.0+0x1a>
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	47a8      	blx	r5
 8005c40:	2800      	cmp	r0, #0
 8005c42:	daf5      	bge.n	8005c30 <med3.constprop.0+0x2a>
 8005c44:	e7ed      	b.n	8005c22 <med3.constprop.0+0x1c>

08005c46 <qsort>:
 8005c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	b095      	sub	sp, #84	@ 0x54
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	ea40 0302 	orr.w	r3, r0, r2
 8005c54:	079b      	lsls	r3, r3, #30
 8005c56:	4615      	mov	r5, r2
 8005c58:	d118      	bne.n	8005c8c <qsort+0x46>
 8005c5a:	f1b2 0804 	subs.w	r8, r2, #4
 8005c5e:	bf18      	it	ne
 8005c60:	f04f 0801 	movne.w	r8, #1
 8005c64:	2300      	movs	r3, #0
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	fb05 f401 	mul.w	r4, r5, r1
 8005c6c:	193b      	adds	r3, r7, r4
 8005c6e:	2906      	cmp	r1, #6
 8005c70:	eb07 0b05 	add.w	fp, r7, r5
 8005c74:	9302      	str	r3, [sp, #8]
 8005c76:	d828      	bhi.n	8005cca <qsort+0x84>
 8005c78:	9b02      	ldr	r3, [sp, #8]
 8005c7a:	459b      	cmp	fp, r3
 8005c7c:	d310      	bcc.n	8005ca0 <qsort+0x5a>
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 8117 	bne.w	8005eb4 <qsort+0x26e>
 8005c86:	b015      	add	sp, #84	@ 0x54
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	f04f 0802 	mov.w	r8, #2
 8005c90:	e7e8      	b.n	8005c64 <qsort+0x1e>
 8005c92:	4643      	mov	r3, r8
 8005c94:	462a      	mov	r2, r5
 8005c96:	4631      	mov	r1, r6
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7ff ff9b 	bl	8005bd4 <swapfunc>
 8005c9e:	e00f      	b.n	8005cc0 <qsort+0x7a>
 8005ca0:	465c      	mov	r4, fp
 8005ca2:	e00e      	b.n	8005cc2 <qsort+0x7c>
 8005ca4:	1b66      	subs	r6, r4, r5
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4630      	mov	r0, r6
 8005cac:	4798      	blx	r3
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	dd09      	ble.n	8005cc6 <qsort+0x80>
 8005cb2:	f1b8 0f00 	cmp.w	r8, #0
 8005cb6:	d1ec      	bne.n	8005c92 <qsort+0x4c>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	6832      	ldr	r2, [r6, #0]
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	4634      	mov	r4, r6
 8005cc2:	42a7      	cmp	r7, r4
 8005cc4:	d3ee      	bcc.n	8005ca4 <qsort+0x5e>
 8005cc6:	44ab      	add	fp, r5
 8005cc8:	e7d6      	b.n	8005c78 <qsort+0x32>
 8005cca:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	2907      	cmp	r1, #7
 8005cd2:	fb05 7909 	mla	r9, r5, r9, r7
 8005cd6:	443c      	add	r4, r7
 8005cd8:	d021      	beq.n	8005d1e <qsort+0xd8>
 8005cda:	2928      	cmp	r1, #40	@ 0x28
 8005cdc:	d944      	bls.n	8005d68 <qsort+0x122>
 8005cde:	08ce      	lsrs	r6, r1, #3
 8005ce0:	436e      	muls	r6, r5
 8005ce2:	9b00      	ldr	r3, [sp, #0]
 8005ce4:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8005ce8:	19b9      	adds	r1, r7, r6
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff8b 	bl	8005c06 <med3.constprop.0>
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	eb09 0206 	add.w	r2, r9, r6
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	1b88      	subs	r0, r1, r6
 8005cfc:	f7ff ff83 	bl	8005c06 <med3.constprop.0>
 8005d00:	4622      	mov	r2, r4
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	4681      	mov	r9, r0
 8005d06:	1ba1      	subs	r1, r4, r6
 8005d08:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8005d0c:	f7ff ff7b 	bl	8005c06 <med3.constprop.0>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4649      	mov	r1, r9
 8005d14:	9b00      	ldr	r3, [sp, #0]
 8005d16:	4650      	mov	r0, sl
 8005d18:	f7ff ff75 	bl	8005c06 <med3.constprop.0>
 8005d1c:	4681      	mov	r9, r0
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	d124      	bne.n	8005d6e <qsort+0x128>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f8d9 2000 	ldr.w	r2, [r9]
 8005d2a:	603a      	str	r2, [r7, #0]
 8005d2c:	f8c9 3000 	str.w	r3, [r9]
 8005d30:	46d9      	mov	r9, fp
 8005d32:	46a2      	mov	sl, r4
 8005d34:	465e      	mov	r6, fp
 8005d36:	2300      	movs	r3, #0
 8005d38:	45a1      	cmp	r9, r4
 8005d3a:	d836      	bhi.n	8005daa <qsort+0x164>
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	4639      	mov	r1, r7
 8005d40:	9b00      	ldr	r3, [sp, #0]
 8005d42:	4648      	mov	r0, r9
 8005d44:	4798      	blx	r3
 8005d46:	2800      	cmp	r0, #0
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	dc2c      	bgt.n	8005da6 <qsort+0x160>
 8005d4c:	d10a      	bne.n	8005d64 <qsort+0x11e>
 8005d4e:	f1b8 0f00 	cmp.w	r8, #0
 8005d52:	d113      	bne.n	8005d7c <qsort+0x136>
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	f8d9 2000 	ldr.w	r2, [r9]
 8005d5a:	6032      	str	r2, [r6, #0]
 8005d5c:	f8c9 3000 	str.w	r3, [r9]
 8005d60:	442e      	add	r6, r5
 8005d62:	2301      	movs	r3, #1
 8005d64:	44a9      	add	r9, r5
 8005d66:	e7e7      	b.n	8005d38 <qsort+0xf2>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	46ba      	mov	sl, r7
 8005d6c:	e7d1      	b.n	8005d12 <qsort+0xcc>
 8005d6e:	4643      	mov	r3, r8
 8005d70:	462a      	mov	r2, r5
 8005d72:	4649      	mov	r1, r9
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff ff2d 	bl	8005bd4 <swapfunc>
 8005d7a:	e7d9      	b.n	8005d30 <qsort+0xea>
 8005d7c:	4643      	mov	r3, r8
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4649      	mov	r1, r9
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff26 	bl	8005bd4 <swapfunc>
 8005d88:	e7ea      	b.n	8005d60 <qsort+0x11a>
 8005d8a:	d10b      	bne.n	8005da4 <qsort+0x15e>
 8005d8c:	f1b8 0f00 	cmp.w	r8, #0
 8005d90:	d113      	bne.n	8005dba <qsort+0x174>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f8da 2000 	ldr.w	r2, [sl]
 8005d98:	6022      	str	r2, [r4, #0]
 8005d9a:	f8ca 3000 	str.w	r3, [sl]
 8005d9e:	ebaa 0a05 	sub.w	sl, sl, r5
 8005da2:	2301      	movs	r3, #1
 8005da4:	1b64      	subs	r4, r4, r5
 8005da6:	45a1      	cmp	r9, r4
 8005da8:	d90e      	bls.n	8005dc8 <qsort+0x182>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d140      	bne.n	8005e30 <qsort+0x1ea>
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	459b      	cmp	fp, r3
 8005db2:	f4bf af64 	bcs.w	8005c7e <qsort+0x38>
 8005db6:	465c      	mov	r4, fp
 8005db8:	e036      	b.n	8005e28 <qsort+0x1e2>
 8005dba:	4643      	mov	r3, r8
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff ff07 	bl	8005bd4 <swapfunc>
 8005dc6:	e7ea      	b.n	8005d9e <qsort+0x158>
 8005dc8:	9303      	str	r3, [sp, #12]
 8005dca:	4639      	mov	r1, r7
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4798      	blx	r3
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	dad8      	bge.n	8005d8a <qsort+0x144>
 8005dd8:	f1b8 0f00 	cmp.w	r8, #0
 8005ddc:	d107      	bne.n	8005dee <qsort+0x1a8>
 8005dde:	f8d9 3000 	ldr.w	r3, [r9]
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	f8c9 2000 	str.w	r2, [r9]
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	e7b9      	b.n	8005d62 <qsort+0x11c>
 8005dee:	4643      	mov	r3, r8
 8005df0:	462a      	mov	r2, r5
 8005df2:	4621      	mov	r1, r4
 8005df4:	4648      	mov	r0, r9
 8005df6:	f7ff feed 	bl	8005bd4 <swapfunc>
 8005dfa:	e7f6      	b.n	8005dea <qsort+0x1a4>
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	462a      	mov	r2, r5
 8005e00:	4631      	mov	r1, r6
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fee6 	bl	8005bd4 <swapfunc>
 8005e08:	e00d      	b.n	8005e26 <qsort+0x1e0>
 8005e0a:	1b66      	subs	r6, r4, r5
 8005e0c:	9b00      	ldr	r3, [sp, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4630      	mov	r0, r6
 8005e12:	4798      	blx	r3
 8005e14:	2800      	cmp	r0, #0
 8005e16:	dd09      	ble.n	8005e2c <qsort+0x1e6>
 8005e18:	f1b8 0f00 	cmp.w	r8, #0
 8005e1c:	d1ee      	bne.n	8005dfc <qsort+0x1b6>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	4634      	mov	r4, r6
 8005e28:	42a7      	cmp	r7, r4
 8005e2a:	d3ee      	bcc.n	8005e0a <qsort+0x1c4>
 8005e2c:	44ab      	add	fp, r5
 8005e2e:	e7be      	b.n	8005dae <qsort+0x168>
 8005e30:	eba9 0b06 	sub.w	fp, r9, r6
 8005e34:	1bf2      	subs	r2, r6, r7
 8005e36:	455a      	cmp	r2, fp
 8005e38:	bfa8      	it	ge
 8005e3a:	465a      	movge	r2, fp
 8005e3c:	b12a      	cbz	r2, 8005e4a <qsort+0x204>
 8005e3e:	4643      	mov	r3, r8
 8005e40:	eba9 0102 	sub.w	r1, r9, r2
 8005e44:	4638      	mov	r0, r7
 8005e46:	f7ff fec5 	bl	8005bd4 <swapfunc>
 8005e4a:	9b02      	ldr	r3, [sp, #8]
 8005e4c:	eba3 020a 	sub.w	r2, r3, sl
 8005e50:	ebaa 0404 	sub.w	r4, sl, r4
 8005e54:	1b52      	subs	r2, r2, r5
 8005e56:	42a2      	cmp	r2, r4
 8005e58:	bf28      	it	cs
 8005e5a:	4622      	movcs	r2, r4
 8005e5c:	b12a      	cbz	r2, 8005e6a <qsort+0x224>
 8005e5e:	9902      	ldr	r1, [sp, #8]
 8005e60:	4643      	mov	r3, r8
 8005e62:	1a89      	subs	r1, r1, r2
 8005e64:	4648      	mov	r0, r9
 8005e66:	f7ff feb5 	bl	8005bd4 <swapfunc>
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	455c      	cmp	r4, fp
 8005e6e:	eba3 0604 	sub.w	r6, r3, r4
 8005e72:	d805      	bhi.n	8005e80 <qsort+0x23a>
 8005e74:	4623      	mov	r3, r4
 8005e76:	465c      	mov	r4, fp
 8005e78:	469b      	mov	fp, r3
 8005e7a:	4633      	mov	r3, r6
 8005e7c:	463e      	mov	r6, r7
 8005e7e:	461f      	mov	r7, r3
 8005e80:	45ab      	cmp	fp, r5
 8005e82:	d920      	bls.n	8005ec6 <qsort+0x280>
 8005e84:	fbbb f1f5 	udiv	r1, fp, r5
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	2b07      	cmp	r3, #7
 8005e8c:	d80b      	bhi.n	8005ea6 <qsort+0x260>
 8005e8e:	fbb4 f4f5 	udiv	r4, r4, r5
 8005e92:	aa14      	add	r2, sp, #80	@ 0x50
 8005e94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e98:	f843 6c40 	str.w	r6, [r3, #-64]
 8005e9c:	f843 4c3c 	str.w	r4, [r3, #-60]
 8005ea0:	9b01      	ldr	r3, [sp, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	e6df      	b.n	8005c66 <qsort+0x20>
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f7ff fecb 	bl	8005c46 <qsort>
 8005eb0:	42ac      	cmp	r4, r5
 8005eb2:	d80b      	bhi.n	8005ecc <qsort+0x286>
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	aa14      	add	r2, sp, #80	@ 0x50
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ec0:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8005ec4:	e6d0      	b.n	8005c68 <qsort+0x22>
 8005ec6:	42ac      	cmp	r4, r5
 8005ec8:	f67f aed9 	bls.w	8005c7e <qsort+0x38>
 8005ecc:	fbb4 f1f5 	udiv	r1, r4, r5
 8005ed0:	4637      	mov	r7, r6
 8005ed2:	e6c9      	b.n	8005c68 <qsort+0x22>

08005ed4 <free>:
 8005ed4:	4b02      	ldr	r3, [pc, #8]	@ (8005ee0 <free+0xc>)
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	f000 b953 	b.w	8006184 <_free_r>
 8005ede:	bf00      	nop
 8005ee0:	2000000c 	.word	0x2000000c

08005ee4 <sbrk_aligned>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4e0f      	ldr	r6, [pc, #60]	@ (8005f24 <sbrk_aligned+0x40>)
 8005ee8:	460c      	mov	r4, r1
 8005eea:	6831      	ldr	r1, [r6, #0]
 8005eec:	4605      	mov	r5, r0
 8005eee:	b911      	cbnz	r1, 8005ef6 <sbrk_aligned+0x12>
 8005ef0:	f000 f8fe 	bl	80060f0 <_sbrk_r>
 8005ef4:	6030      	str	r0, [r6, #0]
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 f8f9 	bl	80060f0 <_sbrk_r>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d103      	bne.n	8005f0a <sbrk_aligned+0x26>
 8005f02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f06:	4620      	mov	r0, r4
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d0f8      	beq.n	8005f06 <sbrk_aligned+0x22>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 f8ea 	bl	80060f0 <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1f2      	bne.n	8005f06 <sbrk_aligned+0x22>
 8005f20:	e7ef      	b.n	8005f02 <sbrk_aligned+0x1e>
 8005f22:	bf00      	nop
 8005f24:	2000041c 	.word	0x2000041c

08005f28 <_malloc_r>:
 8005f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	1ccd      	adds	r5, r1, #3
 8005f2e:	f025 0503 	bic.w	r5, r5, #3
 8005f32:	3508      	adds	r5, #8
 8005f34:	2d0c      	cmp	r5, #12
 8005f36:	bf38      	it	cc
 8005f38:	250c      	movcc	r5, #12
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	db01      	blt.n	8005f44 <_malloc_r+0x1c>
 8005f40:	42a9      	cmp	r1, r5
 8005f42:	d904      	bls.n	8005f4e <_malloc_r+0x26>
 8005f44:	230c      	movs	r3, #12
 8005f46:	6033      	str	r3, [r6, #0]
 8005f48:	2000      	movs	r0, #0
 8005f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006024 <_malloc_r+0xfc>
 8005f52:	f000 f89f 	bl	8006094 <__malloc_lock>
 8005f56:	f8d8 3000 	ldr.w	r3, [r8]
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	bb44      	cbnz	r4, 8005fb0 <_malloc_r+0x88>
 8005f5e:	4629      	mov	r1, r5
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7ff ffbf 	bl	8005ee4 <sbrk_aligned>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	4604      	mov	r4, r0
 8005f6a:	d158      	bne.n	800601e <_malloc_r+0xf6>
 8005f6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005f70:	4627      	mov	r7, r4
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	d143      	bne.n	8005ffe <_malloc_r+0xd6>
 8005f76:	2c00      	cmp	r4, #0
 8005f78:	d04b      	beq.n	8006012 <_malloc_r+0xea>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	eb04 0903 	add.w	r9, r4, r3
 8005f84:	f000 f8b4 	bl	80060f0 <_sbrk_r>
 8005f88:	4581      	cmp	r9, r0
 8005f8a:	d142      	bne.n	8006012 <_malloc_r+0xea>
 8005f8c:	6821      	ldr	r1, [r4, #0]
 8005f8e:	1a6d      	subs	r5, r5, r1
 8005f90:	4629      	mov	r1, r5
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ffa6 	bl	8005ee4 <sbrk_aligned>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d03a      	beq.n	8006012 <_malloc_r+0xea>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	442b      	add	r3, r5
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	bb62      	cbnz	r2, 8006004 <_malloc_r+0xdc>
 8005faa:	f8c8 7000 	str.w	r7, [r8]
 8005fae:	e00f      	b.n	8005fd0 <_malloc_r+0xa8>
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	1b52      	subs	r2, r2, r5
 8005fb4:	d420      	bmi.n	8005ff8 <_malloc_r+0xd0>
 8005fb6:	2a0b      	cmp	r2, #11
 8005fb8:	d917      	bls.n	8005fea <_malloc_r+0xc2>
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	bf18      	it	ne
 8005fc2:	6059      	strne	r1, [r3, #4]
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	bf08      	it	eq
 8005fc8:	f8c8 1000 	streq.w	r1, [r8]
 8005fcc:	5162      	str	r2, [r4, r5]
 8005fce:	604b      	str	r3, [r1, #4]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f865 	bl	80060a0 <__malloc_unlock>
 8005fd6:	f104 000b 	add.w	r0, r4, #11
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	f020 0007 	bic.w	r0, r0, #7
 8005fe0:	1ac2      	subs	r2, r0, r3
 8005fe2:	bf1c      	itt	ne
 8005fe4:	1a1b      	subne	r3, r3, r0
 8005fe6:	50a3      	strne	r3, [r4, r2]
 8005fe8:	e7af      	b.n	8005f4a <_malloc_r+0x22>
 8005fea:	6862      	ldr	r2, [r4, #4]
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	bf0c      	ite	eq
 8005ff0:	f8c8 2000 	streq.w	r2, [r8]
 8005ff4:	605a      	strne	r2, [r3, #4]
 8005ff6:	e7eb      	b.n	8005fd0 <_malloc_r+0xa8>
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	6864      	ldr	r4, [r4, #4]
 8005ffc:	e7ae      	b.n	8005f5c <_malloc_r+0x34>
 8005ffe:	463c      	mov	r4, r7
 8006000:	687f      	ldr	r7, [r7, #4]
 8006002:	e7b6      	b.n	8005f72 <_malloc_r+0x4a>
 8006004:	461a      	mov	r2, r3
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	42a3      	cmp	r3, r4
 800600a:	d1fb      	bne.n	8006004 <_malloc_r+0xdc>
 800600c:	2300      	movs	r3, #0
 800600e:	6053      	str	r3, [r2, #4]
 8006010:	e7de      	b.n	8005fd0 <_malloc_r+0xa8>
 8006012:	230c      	movs	r3, #12
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	4630      	mov	r0, r6
 8006018:	f000 f842 	bl	80060a0 <__malloc_unlock>
 800601c:	e794      	b.n	8005f48 <_malloc_r+0x20>
 800601e:	6005      	str	r5, [r0, #0]
 8006020:	e7d6      	b.n	8005fd0 <_malloc_r+0xa8>
 8006022:	bf00      	nop
 8006024:	20000420 	.word	0x20000420

08006028 <sniprintf>:
 8006028:	b40c      	push	{r2, r3}
 800602a:	b530      	push	{r4, r5, lr}
 800602c:	4b18      	ldr	r3, [pc, #96]	@ (8006090 <sniprintf+0x68>)
 800602e:	1e0c      	subs	r4, r1, #0
 8006030:	681d      	ldr	r5, [r3, #0]
 8006032:	b09d      	sub	sp, #116	@ 0x74
 8006034:	da08      	bge.n	8006048 <sniprintf+0x20>
 8006036:	238b      	movs	r3, #139	@ 0x8b
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800603e:	b01d      	add	sp, #116	@ 0x74
 8006040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006044:	b002      	add	sp, #8
 8006046:	4770      	bx	lr
 8006048:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800604c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006056:	bf14      	ite	ne
 8006058:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800605c:	4623      	moveq	r3, r4
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006066:	9002      	str	r0, [sp, #8]
 8006068:	9006      	str	r0, [sp, #24]
 800606a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800606e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006070:	ab21      	add	r3, sp, #132	@ 0x84
 8006072:	a902      	add	r1, sp, #8
 8006074:	4628      	mov	r0, r5
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	f000 f92a 	bl	80062d0 <_svfiprintf_r>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	bfbc      	itt	lt
 8006080:	238b      	movlt	r3, #139	@ 0x8b
 8006082:	602b      	strlt	r3, [r5, #0]
 8006084:	2c00      	cmp	r4, #0
 8006086:	d0da      	beq.n	800603e <sniprintf+0x16>
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e7d6      	b.n	800603e <sniprintf+0x16>
 8006090:	2000000c 	.word	0x2000000c

08006094 <__malloc_lock>:
 8006094:	4801      	ldr	r0, [pc, #4]	@ (800609c <__malloc_lock+0x8>)
 8006096:	f000 b865 	b.w	8006164 <__retarget_lock_acquire_recursive>
 800609a:	bf00      	nop
 800609c:	2000055c 	.word	0x2000055c

080060a0 <__malloc_unlock>:
 80060a0:	4801      	ldr	r0, [pc, #4]	@ (80060a8 <__malloc_unlock+0x8>)
 80060a2:	f000 b860 	b.w	8006166 <__retarget_lock_release_recursive>
 80060a6:	bf00      	nop
 80060a8:	2000055c 	.word	0x2000055c

080060ac <memmove>:
 80060ac:	4288      	cmp	r0, r1
 80060ae:	b510      	push	{r4, lr}
 80060b0:	eb01 0402 	add.w	r4, r1, r2
 80060b4:	d902      	bls.n	80060bc <memmove+0x10>
 80060b6:	4284      	cmp	r4, r0
 80060b8:	4623      	mov	r3, r4
 80060ba:	d807      	bhi.n	80060cc <memmove+0x20>
 80060bc:	1e43      	subs	r3, r0, #1
 80060be:	42a1      	cmp	r1, r4
 80060c0:	d008      	beq.n	80060d4 <memmove+0x28>
 80060c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ca:	e7f8      	b.n	80060be <memmove+0x12>
 80060cc:	4402      	add	r2, r0
 80060ce:	4601      	mov	r1, r0
 80060d0:	428a      	cmp	r2, r1
 80060d2:	d100      	bne.n	80060d6 <memmove+0x2a>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060de:	e7f7      	b.n	80060d0 <memmove+0x24>

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <_sbrk_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d06      	ldr	r5, [pc, #24]	@ (800610c <_sbrk_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fb f876 	bl	80011ec <_sbrk>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_sbrk_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_sbrk_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000560 	.word	0x20000560

08006110 <__errno>:
 8006110:	4b01      	ldr	r3, [pc, #4]	@ (8006118 <__errno+0x8>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	2000000c 	.word	0x2000000c

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4d0d      	ldr	r5, [pc, #52]	@ (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	@ (8006158 <__libc_init_array+0x3c>)
 8006122:	1b64      	subs	r4, r4, r5
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2600      	movs	r6, #0
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4d0b      	ldr	r5, [pc, #44]	@ (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	@ (8006160 <__libc_init_array+0x44>)
 8006130:	f000 fb8c 	bl	800684c <_init>
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2600      	movs	r6, #0
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	080089b4 	.word	0x080089b4
 8006158:	080089b4 	.word	0x080089b4
 800615c:	080089b4 	.word	0x080089b4
 8006160:	080089bc 	.word	0x080089bc

08006164 <__retarget_lock_acquire_recursive>:
 8006164:	4770      	bx	lr

08006166 <__retarget_lock_release_recursive>:
 8006166:	4770      	bx	lr

08006168 <memcpy>:
 8006168:	440a      	add	r2, r1
 800616a:	4291      	cmp	r1, r2
 800616c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006170:	d100      	bne.n	8006174 <memcpy+0xc>
 8006172:	4770      	bx	lr
 8006174:	b510      	push	{r4, lr}
 8006176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800617e:	4291      	cmp	r1, r2
 8006180:	d1f9      	bne.n	8006176 <memcpy+0xe>
 8006182:	bd10      	pop	{r4, pc}

08006184 <_free_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4605      	mov	r5, r0
 8006188:	2900      	cmp	r1, #0
 800618a:	d041      	beq.n	8006210 <_free_r+0x8c>
 800618c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006190:	1f0c      	subs	r4, r1, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfb8      	it	lt
 8006196:	18e4      	addlt	r4, r4, r3
 8006198:	f7ff ff7c 	bl	8006094 <__malloc_lock>
 800619c:	4a1d      	ldr	r2, [pc, #116]	@ (8006214 <_free_r+0x90>)
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	b933      	cbnz	r3, 80061b0 <_free_r+0x2c>
 80061a2:	6063      	str	r3, [r4, #4]
 80061a4:	6014      	str	r4, [r2, #0]
 80061a6:	4628      	mov	r0, r5
 80061a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ac:	f7ff bf78 	b.w	80060a0 <__malloc_unlock>
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d908      	bls.n	80061c6 <_free_r+0x42>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	1821      	adds	r1, r4, r0
 80061b8:	428b      	cmp	r3, r1
 80061ba:	bf01      	itttt	eq
 80061bc:	6819      	ldreq	r1, [r3, #0]
 80061be:	685b      	ldreq	r3, [r3, #4]
 80061c0:	1809      	addeq	r1, r1, r0
 80061c2:	6021      	streq	r1, [r4, #0]
 80061c4:	e7ed      	b.n	80061a2 <_free_r+0x1e>
 80061c6:	461a      	mov	r2, r3
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b10b      	cbz	r3, 80061d0 <_free_r+0x4c>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d9fa      	bls.n	80061c6 <_free_r+0x42>
 80061d0:	6811      	ldr	r1, [r2, #0]
 80061d2:	1850      	adds	r0, r2, r1
 80061d4:	42a0      	cmp	r0, r4
 80061d6:	d10b      	bne.n	80061f0 <_free_r+0x6c>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	4401      	add	r1, r0
 80061dc:	1850      	adds	r0, r2, r1
 80061de:	4283      	cmp	r3, r0
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	d1e0      	bne.n	80061a6 <_free_r+0x22>
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	6053      	str	r3, [r2, #4]
 80061ea:	4408      	add	r0, r1
 80061ec:	6010      	str	r0, [r2, #0]
 80061ee:	e7da      	b.n	80061a6 <_free_r+0x22>
 80061f0:	d902      	bls.n	80061f8 <_free_r+0x74>
 80061f2:	230c      	movs	r3, #12
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	e7d6      	b.n	80061a6 <_free_r+0x22>
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	1821      	adds	r1, r4, r0
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf04      	itt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	bf04      	itt	eq
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	6054      	str	r4, [r2, #4]
 800620e:	e7ca      	b.n	80061a6 <_free_r+0x22>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	bf00      	nop
 8006214:	20000420 	.word	0x20000420

08006218 <__ssputs_r>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	688e      	ldr	r6, [r1, #8]
 800621e:	461f      	mov	r7, r3
 8006220:	42be      	cmp	r6, r7
 8006222:	680b      	ldr	r3, [r1, #0]
 8006224:	4682      	mov	sl, r0
 8006226:	460c      	mov	r4, r1
 8006228:	4690      	mov	r8, r2
 800622a:	d82d      	bhi.n	8006288 <__ssputs_r+0x70>
 800622c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006234:	d026      	beq.n	8006284 <__ssputs_r+0x6c>
 8006236:	6965      	ldr	r5, [r4, #20]
 8006238:	6909      	ldr	r1, [r1, #16]
 800623a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800623e:	eba3 0901 	sub.w	r9, r3, r1
 8006242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006246:	1c7b      	adds	r3, r7, #1
 8006248:	444b      	add	r3, r9
 800624a:	106d      	asrs	r5, r5, #1
 800624c:	429d      	cmp	r5, r3
 800624e:	bf38      	it	cc
 8006250:	461d      	movcc	r5, r3
 8006252:	0553      	lsls	r3, r2, #21
 8006254:	d527      	bpl.n	80062a6 <__ssputs_r+0x8e>
 8006256:	4629      	mov	r1, r5
 8006258:	f7ff fe66 	bl	8005f28 <_malloc_r>
 800625c:	4606      	mov	r6, r0
 800625e:	b360      	cbz	r0, 80062ba <__ssputs_r+0xa2>
 8006260:	6921      	ldr	r1, [r4, #16]
 8006262:	464a      	mov	r2, r9
 8006264:	f7ff ff80 	bl	8006168 <memcpy>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	6126      	str	r6, [r4, #16]
 8006276:	6165      	str	r5, [r4, #20]
 8006278:	444e      	add	r6, r9
 800627a:	eba5 0509 	sub.w	r5, r5, r9
 800627e:	6026      	str	r6, [r4, #0]
 8006280:	60a5      	str	r5, [r4, #8]
 8006282:	463e      	mov	r6, r7
 8006284:	42be      	cmp	r6, r7
 8006286:	d900      	bls.n	800628a <__ssputs_r+0x72>
 8006288:	463e      	mov	r6, r7
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	4632      	mov	r2, r6
 800628e:	4641      	mov	r1, r8
 8006290:	f7ff ff0c 	bl	80060ac <memmove>
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	1b9b      	subs	r3, r3, r6
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	4433      	add	r3, r6
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	2000      	movs	r0, #0
 80062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a6:	462a      	mov	r2, r5
 80062a8:	f000 fa9a 	bl	80067e0 <_realloc_r>
 80062ac:	4606      	mov	r6, r0
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1e0      	bne.n	8006274 <__ssputs_r+0x5c>
 80062b2:	6921      	ldr	r1, [r4, #16]
 80062b4:	4650      	mov	r0, sl
 80062b6:	f7ff ff65 	bl	8006184 <_free_r>
 80062ba:	230c      	movs	r3, #12
 80062bc:	f8ca 3000 	str.w	r3, [sl]
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062cc:	e7e9      	b.n	80062a2 <__ssputs_r+0x8a>
	...

080062d0 <_svfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4698      	mov	r8, r3
 80062d6:	898b      	ldrh	r3, [r1, #12]
 80062d8:	061b      	lsls	r3, r3, #24
 80062da:	b09d      	sub	sp, #116	@ 0x74
 80062dc:	4607      	mov	r7, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	4614      	mov	r4, r2
 80062e2:	d510      	bpl.n	8006306 <_svfiprintf_r+0x36>
 80062e4:	690b      	ldr	r3, [r1, #16]
 80062e6:	b973      	cbnz	r3, 8006306 <_svfiprintf_r+0x36>
 80062e8:	2140      	movs	r1, #64	@ 0x40
 80062ea:	f7ff fe1d 	bl	8005f28 <_malloc_r>
 80062ee:	6028      	str	r0, [r5, #0]
 80062f0:	6128      	str	r0, [r5, #16]
 80062f2:	b930      	cbnz	r0, 8006302 <_svfiprintf_r+0x32>
 80062f4:	230c      	movs	r3, #12
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062fc:	b01d      	add	sp, #116	@ 0x74
 80062fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006302:	2340      	movs	r3, #64	@ 0x40
 8006304:	616b      	str	r3, [r5, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	9309      	str	r3, [sp, #36]	@ 0x24
 800630a:	2320      	movs	r3, #32
 800630c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006310:	f8cd 800c 	str.w	r8, [sp, #12]
 8006314:	2330      	movs	r3, #48	@ 0x30
 8006316:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064b4 <_svfiprintf_r+0x1e4>
 800631a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800631e:	f04f 0901 	mov.w	r9, #1
 8006322:	4623      	mov	r3, r4
 8006324:	469a      	mov	sl, r3
 8006326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800632a:	b10a      	cbz	r2, 8006330 <_svfiprintf_r+0x60>
 800632c:	2a25      	cmp	r2, #37	@ 0x25
 800632e:	d1f9      	bne.n	8006324 <_svfiprintf_r+0x54>
 8006330:	ebba 0b04 	subs.w	fp, sl, r4
 8006334:	d00b      	beq.n	800634e <_svfiprintf_r+0x7e>
 8006336:	465b      	mov	r3, fp
 8006338:	4622      	mov	r2, r4
 800633a:	4629      	mov	r1, r5
 800633c:	4638      	mov	r0, r7
 800633e:	f7ff ff6b 	bl	8006218 <__ssputs_r>
 8006342:	3001      	adds	r0, #1
 8006344:	f000 80a7 	beq.w	8006496 <_svfiprintf_r+0x1c6>
 8006348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800634a:	445a      	add	r2, fp
 800634c:	9209      	str	r2, [sp, #36]	@ 0x24
 800634e:	f89a 3000 	ldrb.w	r3, [sl]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 809f 	beq.w	8006496 <_svfiprintf_r+0x1c6>
 8006358:	2300      	movs	r3, #0
 800635a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800635e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006362:	f10a 0a01 	add.w	sl, sl, #1
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800636e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006370:	4654      	mov	r4, sl
 8006372:	2205      	movs	r2, #5
 8006374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006378:	484e      	ldr	r0, [pc, #312]	@ (80064b4 <_svfiprintf_r+0x1e4>)
 800637a:	f7f9 ff31 	bl	80001e0 <memchr>
 800637e:	9a04      	ldr	r2, [sp, #16]
 8006380:	b9d8      	cbnz	r0, 80063ba <_svfiprintf_r+0xea>
 8006382:	06d0      	lsls	r0, r2, #27
 8006384:	bf44      	itt	mi
 8006386:	2320      	movmi	r3, #32
 8006388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638c:	0711      	lsls	r1, r2, #28
 800638e:	bf44      	itt	mi
 8006390:	232b      	movmi	r3, #43	@ 0x2b
 8006392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006396:	f89a 3000 	ldrb.w	r3, [sl]
 800639a:	2b2a      	cmp	r3, #42	@ 0x2a
 800639c:	d015      	beq.n	80063ca <_svfiprintf_r+0xfa>
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	4654      	mov	r4, sl
 80063a2:	2000      	movs	r0, #0
 80063a4:	f04f 0c0a 	mov.w	ip, #10
 80063a8:	4621      	mov	r1, r4
 80063aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ae:	3b30      	subs	r3, #48	@ 0x30
 80063b0:	2b09      	cmp	r3, #9
 80063b2:	d94b      	bls.n	800644c <_svfiprintf_r+0x17c>
 80063b4:	b1b0      	cbz	r0, 80063e4 <_svfiprintf_r+0x114>
 80063b6:	9207      	str	r2, [sp, #28]
 80063b8:	e014      	b.n	80063e4 <_svfiprintf_r+0x114>
 80063ba:	eba0 0308 	sub.w	r3, r0, r8
 80063be:	fa09 f303 	lsl.w	r3, r9, r3
 80063c2:	4313      	orrs	r3, r2
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	46a2      	mov	sl, r4
 80063c8:	e7d2      	b.n	8006370 <_svfiprintf_r+0xa0>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	1d19      	adds	r1, r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	9103      	str	r1, [sp, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bfbb      	ittet	lt
 80063d6:	425b      	neglt	r3, r3
 80063d8:	f042 0202 	orrlt.w	r2, r2, #2
 80063dc:	9307      	strge	r3, [sp, #28]
 80063de:	9307      	strlt	r3, [sp, #28]
 80063e0:	bfb8      	it	lt
 80063e2:	9204      	strlt	r2, [sp, #16]
 80063e4:	7823      	ldrb	r3, [r4, #0]
 80063e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80063e8:	d10a      	bne.n	8006400 <_svfiprintf_r+0x130>
 80063ea:	7863      	ldrb	r3, [r4, #1]
 80063ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80063ee:	d132      	bne.n	8006456 <_svfiprintf_r+0x186>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	9203      	str	r2, [sp, #12]
 80063f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063fc:	3402      	adds	r4, #2
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064c4 <_svfiprintf_r+0x1f4>
 8006404:	7821      	ldrb	r1, [r4, #0]
 8006406:	2203      	movs	r2, #3
 8006408:	4650      	mov	r0, sl
 800640a:	f7f9 fee9 	bl	80001e0 <memchr>
 800640e:	b138      	cbz	r0, 8006420 <_svfiprintf_r+0x150>
 8006410:	9b04      	ldr	r3, [sp, #16]
 8006412:	eba0 000a 	sub.w	r0, r0, sl
 8006416:	2240      	movs	r2, #64	@ 0x40
 8006418:	4082      	lsls	r2, r0
 800641a:	4313      	orrs	r3, r2
 800641c:	3401      	adds	r4, #1
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	4824      	ldr	r0, [pc, #144]	@ (80064b8 <_svfiprintf_r+0x1e8>)
 8006426:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800642a:	2206      	movs	r2, #6
 800642c:	f7f9 fed8 	bl	80001e0 <memchr>
 8006430:	2800      	cmp	r0, #0
 8006432:	d036      	beq.n	80064a2 <_svfiprintf_r+0x1d2>
 8006434:	4b21      	ldr	r3, [pc, #132]	@ (80064bc <_svfiprintf_r+0x1ec>)
 8006436:	bb1b      	cbnz	r3, 8006480 <_svfiprintf_r+0x1b0>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	3307      	adds	r3, #7
 800643c:	f023 0307 	bic.w	r3, r3, #7
 8006440:	3308      	adds	r3, #8
 8006442:	9303      	str	r3, [sp, #12]
 8006444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006446:	4433      	add	r3, r6
 8006448:	9309      	str	r3, [sp, #36]	@ 0x24
 800644a:	e76a      	b.n	8006322 <_svfiprintf_r+0x52>
 800644c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006450:	460c      	mov	r4, r1
 8006452:	2001      	movs	r0, #1
 8006454:	e7a8      	b.n	80063a8 <_svfiprintf_r+0xd8>
 8006456:	2300      	movs	r3, #0
 8006458:	3401      	adds	r4, #1
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	4619      	mov	r1, r3
 800645e:	f04f 0c0a 	mov.w	ip, #10
 8006462:	4620      	mov	r0, r4
 8006464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006468:	3a30      	subs	r2, #48	@ 0x30
 800646a:	2a09      	cmp	r2, #9
 800646c:	d903      	bls.n	8006476 <_svfiprintf_r+0x1a6>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0c6      	beq.n	8006400 <_svfiprintf_r+0x130>
 8006472:	9105      	str	r1, [sp, #20]
 8006474:	e7c4      	b.n	8006400 <_svfiprintf_r+0x130>
 8006476:	fb0c 2101 	mla	r1, ip, r1, r2
 800647a:	4604      	mov	r4, r0
 800647c:	2301      	movs	r3, #1
 800647e:	e7f0      	b.n	8006462 <_svfiprintf_r+0x192>
 8006480:	ab03      	add	r3, sp, #12
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	462a      	mov	r2, r5
 8006486:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <_svfiprintf_r+0x1f0>)
 8006488:	a904      	add	r1, sp, #16
 800648a:	4638      	mov	r0, r7
 800648c:	f3af 8000 	nop.w
 8006490:	1c42      	adds	r2, r0, #1
 8006492:	4606      	mov	r6, r0
 8006494:	d1d6      	bne.n	8006444 <_svfiprintf_r+0x174>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	065b      	lsls	r3, r3, #25
 800649a:	f53f af2d 	bmi.w	80062f8 <_svfiprintf_r+0x28>
 800649e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a0:	e72c      	b.n	80062fc <_svfiprintf_r+0x2c>
 80064a2:	ab03      	add	r3, sp, #12
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	462a      	mov	r2, r5
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <_svfiprintf_r+0x1f0>)
 80064aa:	a904      	add	r1, sp, #16
 80064ac:	4638      	mov	r0, r7
 80064ae:	f000 f879 	bl	80065a4 <_printf_i>
 80064b2:	e7ed      	b.n	8006490 <_svfiprintf_r+0x1c0>
 80064b4:	08008978 	.word	0x08008978
 80064b8:	08008982 	.word	0x08008982
 80064bc:	00000000 	.word	0x00000000
 80064c0:	08006219 	.word	0x08006219
 80064c4:	0800897e 	.word	0x0800897e

080064c8 <_printf_common>:
 80064c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064cc:	4616      	mov	r6, r2
 80064ce:	4698      	mov	r8, r3
 80064d0:	688a      	ldr	r2, [r1, #8]
 80064d2:	690b      	ldr	r3, [r1, #16]
 80064d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064d8:	4293      	cmp	r3, r2
 80064da:	bfb8      	it	lt
 80064dc:	4613      	movlt	r3, r2
 80064de:	6033      	str	r3, [r6, #0]
 80064e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064e4:	4607      	mov	r7, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	b10a      	cbz	r2, 80064ee <_printf_common+0x26>
 80064ea:	3301      	adds	r3, #1
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	0699      	lsls	r1, r3, #26
 80064f2:	bf42      	ittt	mi
 80064f4:	6833      	ldrmi	r3, [r6, #0]
 80064f6:	3302      	addmi	r3, #2
 80064f8:	6033      	strmi	r3, [r6, #0]
 80064fa:	6825      	ldr	r5, [r4, #0]
 80064fc:	f015 0506 	ands.w	r5, r5, #6
 8006500:	d106      	bne.n	8006510 <_printf_common+0x48>
 8006502:	f104 0a19 	add.w	sl, r4, #25
 8006506:	68e3      	ldr	r3, [r4, #12]
 8006508:	6832      	ldr	r2, [r6, #0]
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	42ab      	cmp	r3, r5
 800650e:	dc26      	bgt.n	800655e <_printf_common+0x96>
 8006510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	3b00      	subs	r3, #0
 8006518:	bf18      	it	ne
 800651a:	2301      	movne	r3, #1
 800651c:	0692      	lsls	r2, r2, #26
 800651e:	d42b      	bmi.n	8006578 <_printf_common+0xb0>
 8006520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006524:	4641      	mov	r1, r8
 8006526:	4638      	mov	r0, r7
 8006528:	47c8      	blx	r9
 800652a:	3001      	adds	r0, #1
 800652c:	d01e      	beq.n	800656c <_printf_common+0xa4>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	f003 0306 	and.w	r3, r3, #6
 8006536:	2b04      	cmp	r3, #4
 8006538:	bf02      	ittt	eq
 800653a:	68e5      	ldreq	r5, [r4, #12]
 800653c:	6833      	ldreq	r3, [r6, #0]
 800653e:	1aed      	subeq	r5, r5, r3
 8006540:	68a3      	ldr	r3, [r4, #8]
 8006542:	bf0c      	ite	eq
 8006544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006548:	2500      	movne	r5, #0
 800654a:	4293      	cmp	r3, r2
 800654c:	bfc4      	itt	gt
 800654e:	1a9b      	subgt	r3, r3, r2
 8006550:	18ed      	addgt	r5, r5, r3
 8006552:	2600      	movs	r6, #0
 8006554:	341a      	adds	r4, #26
 8006556:	42b5      	cmp	r5, r6
 8006558:	d11a      	bne.n	8006590 <_printf_common+0xc8>
 800655a:	2000      	movs	r0, #0
 800655c:	e008      	b.n	8006570 <_printf_common+0xa8>
 800655e:	2301      	movs	r3, #1
 8006560:	4652      	mov	r2, sl
 8006562:	4641      	mov	r1, r8
 8006564:	4638      	mov	r0, r7
 8006566:	47c8      	blx	r9
 8006568:	3001      	adds	r0, #1
 800656a:	d103      	bne.n	8006574 <_printf_common+0xac>
 800656c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006574:	3501      	adds	r5, #1
 8006576:	e7c6      	b.n	8006506 <_printf_common+0x3e>
 8006578:	18e1      	adds	r1, r4, r3
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	2030      	movs	r0, #48	@ 0x30
 800657e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006582:	4422      	add	r2, r4
 8006584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800658c:	3302      	adds	r3, #2
 800658e:	e7c7      	b.n	8006520 <_printf_common+0x58>
 8006590:	2301      	movs	r3, #1
 8006592:	4622      	mov	r2, r4
 8006594:	4641      	mov	r1, r8
 8006596:	4638      	mov	r0, r7
 8006598:	47c8      	blx	r9
 800659a:	3001      	adds	r0, #1
 800659c:	d0e6      	beq.n	800656c <_printf_common+0xa4>
 800659e:	3601      	adds	r6, #1
 80065a0:	e7d9      	b.n	8006556 <_printf_common+0x8e>
	...

080065a4 <_printf_i>:
 80065a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a8:	7e0f      	ldrb	r7, [r1, #24]
 80065aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065ac:	2f78      	cmp	r7, #120	@ 0x78
 80065ae:	4691      	mov	r9, r2
 80065b0:	4680      	mov	r8, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	469a      	mov	sl, r3
 80065b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ba:	d807      	bhi.n	80065cc <_printf_i+0x28>
 80065bc:	2f62      	cmp	r7, #98	@ 0x62
 80065be:	d80a      	bhi.n	80065d6 <_printf_i+0x32>
 80065c0:	2f00      	cmp	r7, #0
 80065c2:	f000 80d1 	beq.w	8006768 <_printf_i+0x1c4>
 80065c6:	2f58      	cmp	r7, #88	@ 0x58
 80065c8:	f000 80b8 	beq.w	800673c <_printf_i+0x198>
 80065cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065d4:	e03a      	b.n	800664c <_printf_i+0xa8>
 80065d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065da:	2b15      	cmp	r3, #21
 80065dc:	d8f6      	bhi.n	80065cc <_printf_i+0x28>
 80065de:	a101      	add	r1, pc, #4	@ (adr r1, 80065e4 <_printf_i+0x40>)
 80065e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065e4:	0800663d 	.word	0x0800663d
 80065e8:	08006651 	.word	0x08006651
 80065ec:	080065cd 	.word	0x080065cd
 80065f0:	080065cd 	.word	0x080065cd
 80065f4:	080065cd 	.word	0x080065cd
 80065f8:	080065cd 	.word	0x080065cd
 80065fc:	08006651 	.word	0x08006651
 8006600:	080065cd 	.word	0x080065cd
 8006604:	080065cd 	.word	0x080065cd
 8006608:	080065cd 	.word	0x080065cd
 800660c:	080065cd 	.word	0x080065cd
 8006610:	0800674f 	.word	0x0800674f
 8006614:	0800667b 	.word	0x0800667b
 8006618:	08006709 	.word	0x08006709
 800661c:	080065cd 	.word	0x080065cd
 8006620:	080065cd 	.word	0x080065cd
 8006624:	08006771 	.word	0x08006771
 8006628:	080065cd 	.word	0x080065cd
 800662c:	0800667b 	.word	0x0800667b
 8006630:	080065cd 	.word	0x080065cd
 8006634:	080065cd 	.word	0x080065cd
 8006638:	08006711 	.word	0x08006711
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6032      	str	r2, [r6, #0]
 8006644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800664c:	2301      	movs	r3, #1
 800664e:	e09c      	b.n	800678a <_printf_i+0x1e6>
 8006650:	6833      	ldr	r3, [r6, #0]
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	1d19      	adds	r1, r3, #4
 8006656:	6031      	str	r1, [r6, #0]
 8006658:	0606      	lsls	r6, r0, #24
 800665a:	d501      	bpl.n	8006660 <_printf_i+0xbc>
 800665c:	681d      	ldr	r5, [r3, #0]
 800665e:	e003      	b.n	8006668 <_printf_i+0xc4>
 8006660:	0645      	lsls	r5, r0, #25
 8006662:	d5fb      	bpl.n	800665c <_printf_i+0xb8>
 8006664:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006668:	2d00      	cmp	r5, #0
 800666a:	da03      	bge.n	8006674 <_printf_i+0xd0>
 800666c:	232d      	movs	r3, #45	@ 0x2d
 800666e:	426d      	negs	r5, r5
 8006670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006674:	4858      	ldr	r0, [pc, #352]	@ (80067d8 <_printf_i+0x234>)
 8006676:	230a      	movs	r3, #10
 8006678:	e011      	b.n	800669e <_printf_i+0xfa>
 800667a:	6821      	ldr	r1, [r4, #0]
 800667c:	6833      	ldr	r3, [r6, #0]
 800667e:	0608      	lsls	r0, r1, #24
 8006680:	f853 5b04 	ldr.w	r5, [r3], #4
 8006684:	d402      	bmi.n	800668c <_printf_i+0xe8>
 8006686:	0649      	lsls	r1, r1, #25
 8006688:	bf48      	it	mi
 800668a:	b2ad      	uxthmi	r5, r5
 800668c:	2f6f      	cmp	r7, #111	@ 0x6f
 800668e:	4852      	ldr	r0, [pc, #328]	@ (80067d8 <_printf_i+0x234>)
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	bf14      	ite	ne
 8006694:	230a      	movne	r3, #10
 8006696:	2308      	moveq	r3, #8
 8006698:	2100      	movs	r1, #0
 800669a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800669e:	6866      	ldr	r6, [r4, #4]
 80066a0:	60a6      	str	r6, [r4, #8]
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	db05      	blt.n	80066b2 <_printf_i+0x10e>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	432e      	orrs	r6, r5
 80066aa:	f021 0104 	bic.w	r1, r1, #4
 80066ae:	6021      	str	r1, [r4, #0]
 80066b0:	d04b      	beq.n	800674a <_printf_i+0x1a6>
 80066b2:	4616      	mov	r6, r2
 80066b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80066b8:	fb03 5711 	mls	r7, r3, r1, r5
 80066bc:	5dc7      	ldrb	r7, [r0, r7]
 80066be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066c2:	462f      	mov	r7, r5
 80066c4:	42bb      	cmp	r3, r7
 80066c6:	460d      	mov	r5, r1
 80066c8:	d9f4      	bls.n	80066b4 <_printf_i+0x110>
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d10b      	bne.n	80066e6 <_printf_i+0x142>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	07df      	lsls	r7, r3, #31
 80066d2:	d508      	bpl.n	80066e6 <_printf_i+0x142>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	6861      	ldr	r1, [r4, #4]
 80066d8:	4299      	cmp	r1, r3
 80066da:	bfde      	ittt	le
 80066dc:	2330      	movle	r3, #48	@ 0x30
 80066de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066e6:	1b92      	subs	r2, r2, r6
 80066e8:	6122      	str	r2, [r4, #16]
 80066ea:	f8cd a000 	str.w	sl, [sp]
 80066ee:	464b      	mov	r3, r9
 80066f0:	aa03      	add	r2, sp, #12
 80066f2:	4621      	mov	r1, r4
 80066f4:	4640      	mov	r0, r8
 80066f6:	f7ff fee7 	bl	80064c8 <_printf_common>
 80066fa:	3001      	adds	r0, #1
 80066fc:	d14a      	bne.n	8006794 <_printf_i+0x1f0>
 80066fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006702:	b004      	add	sp, #16
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	f043 0320 	orr.w	r3, r3, #32
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	4832      	ldr	r0, [pc, #200]	@ (80067dc <_printf_i+0x238>)
 8006712:	2778      	movs	r7, #120	@ 0x78
 8006714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	6831      	ldr	r1, [r6, #0]
 800671c:	061f      	lsls	r7, r3, #24
 800671e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006722:	d402      	bmi.n	800672a <_printf_i+0x186>
 8006724:	065f      	lsls	r7, r3, #25
 8006726:	bf48      	it	mi
 8006728:	b2ad      	uxthmi	r5, r5
 800672a:	6031      	str	r1, [r6, #0]
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	bf44      	itt	mi
 8006730:	f043 0320 	orrmi.w	r3, r3, #32
 8006734:	6023      	strmi	r3, [r4, #0]
 8006736:	b11d      	cbz	r5, 8006740 <_printf_i+0x19c>
 8006738:	2310      	movs	r3, #16
 800673a:	e7ad      	b.n	8006698 <_printf_i+0xf4>
 800673c:	4826      	ldr	r0, [pc, #152]	@ (80067d8 <_printf_i+0x234>)
 800673e:	e7e9      	b.n	8006714 <_printf_i+0x170>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f023 0320 	bic.w	r3, r3, #32
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	e7f6      	b.n	8006738 <_printf_i+0x194>
 800674a:	4616      	mov	r6, r2
 800674c:	e7bd      	b.n	80066ca <_printf_i+0x126>
 800674e:	6833      	ldr	r3, [r6, #0]
 8006750:	6825      	ldr	r5, [r4, #0]
 8006752:	6961      	ldr	r1, [r4, #20]
 8006754:	1d18      	adds	r0, r3, #4
 8006756:	6030      	str	r0, [r6, #0]
 8006758:	062e      	lsls	r6, r5, #24
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	d501      	bpl.n	8006762 <_printf_i+0x1be>
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	e002      	b.n	8006768 <_printf_i+0x1c4>
 8006762:	0668      	lsls	r0, r5, #25
 8006764:	d5fb      	bpl.n	800675e <_printf_i+0x1ba>
 8006766:	8019      	strh	r1, [r3, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	4616      	mov	r6, r2
 800676e:	e7bc      	b.n	80066ea <_printf_i+0x146>
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	6032      	str	r2, [r6, #0]
 8006776:	681e      	ldr	r6, [r3, #0]
 8006778:	6862      	ldr	r2, [r4, #4]
 800677a:	2100      	movs	r1, #0
 800677c:	4630      	mov	r0, r6
 800677e:	f7f9 fd2f 	bl	80001e0 <memchr>
 8006782:	b108      	cbz	r0, 8006788 <_printf_i+0x1e4>
 8006784:	1b80      	subs	r0, r0, r6
 8006786:	6060      	str	r0, [r4, #4]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	6123      	str	r3, [r4, #16]
 800678c:	2300      	movs	r3, #0
 800678e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006792:	e7aa      	b.n	80066ea <_printf_i+0x146>
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	4632      	mov	r2, r6
 8006798:	4649      	mov	r1, r9
 800679a:	4640      	mov	r0, r8
 800679c:	47d0      	blx	sl
 800679e:	3001      	adds	r0, #1
 80067a0:	d0ad      	beq.n	80066fe <_printf_i+0x15a>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	079b      	lsls	r3, r3, #30
 80067a6:	d413      	bmi.n	80067d0 <_printf_i+0x22c>
 80067a8:	68e0      	ldr	r0, [r4, #12]
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	4298      	cmp	r0, r3
 80067ae:	bfb8      	it	lt
 80067b0:	4618      	movlt	r0, r3
 80067b2:	e7a6      	b.n	8006702 <_printf_i+0x15e>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4632      	mov	r2, r6
 80067b8:	4649      	mov	r1, r9
 80067ba:	4640      	mov	r0, r8
 80067bc:	47d0      	blx	sl
 80067be:	3001      	adds	r0, #1
 80067c0:	d09d      	beq.n	80066fe <_printf_i+0x15a>
 80067c2:	3501      	adds	r5, #1
 80067c4:	68e3      	ldr	r3, [r4, #12]
 80067c6:	9903      	ldr	r1, [sp, #12]
 80067c8:	1a5b      	subs	r3, r3, r1
 80067ca:	42ab      	cmp	r3, r5
 80067cc:	dcf2      	bgt.n	80067b4 <_printf_i+0x210>
 80067ce:	e7eb      	b.n	80067a8 <_printf_i+0x204>
 80067d0:	2500      	movs	r5, #0
 80067d2:	f104 0619 	add.w	r6, r4, #25
 80067d6:	e7f5      	b.n	80067c4 <_printf_i+0x220>
 80067d8:	08008989 	.word	0x08008989
 80067dc:	0800899a 	.word	0x0800899a

080067e0 <_realloc_r>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	4607      	mov	r7, r0
 80067e6:	4614      	mov	r4, r2
 80067e8:	460d      	mov	r5, r1
 80067ea:	b921      	cbnz	r1, 80067f6 <_realloc_r+0x16>
 80067ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	4611      	mov	r1, r2
 80067f2:	f7ff bb99 	b.w	8005f28 <_malloc_r>
 80067f6:	b92a      	cbnz	r2, 8006804 <_realloc_r+0x24>
 80067f8:	f7ff fcc4 	bl	8006184 <_free_r>
 80067fc:	4625      	mov	r5, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006804:	f000 f81a 	bl	800683c <_malloc_usable_size_r>
 8006808:	4284      	cmp	r4, r0
 800680a:	4606      	mov	r6, r0
 800680c:	d802      	bhi.n	8006814 <_realloc_r+0x34>
 800680e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006812:	d8f4      	bhi.n	80067fe <_realloc_r+0x1e>
 8006814:	4621      	mov	r1, r4
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff fb86 	bl	8005f28 <_malloc_r>
 800681c:	4680      	mov	r8, r0
 800681e:	b908      	cbnz	r0, 8006824 <_realloc_r+0x44>
 8006820:	4645      	mov	r5, r8
 8006822:	e7ec      	b.n	80067fe <_realloc_r+0x1e>
 8006824:	42b4      	cmp	r4, r6
 8006826:	4622      	mov	r2, r4
 8006828:	4629      	mov	r1, r5
 800682a:	bf28      	it	cs
 800682c:	4632      	movcs	r2, r6
 800682e:	f7ff fc9b 	bl	8006168 <memcpy>
 8006832:	4629      	mov	r1, r5
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff fca5 	bl	8006184 <_free_r>
 800683a:	e7f1      	b.n	8006820 <_realloc_r+0x40>

0800683c <_malloc_usable_size_r>:
 800683c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006840:	1f18      	subs	r0, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfbc      	itt	lt
 8006846:	580b      	ldrlt	r3, [r1, r0]
 8006848:	18c0      	addlt	r0, r0, r3
 800684a:	4770      	bx	lr

0800684c <_init>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

08006858 <_fini>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr
