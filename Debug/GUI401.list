
GUI401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008614  08008614  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800861c  0800861c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800861c  0800861c  0000961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008624  08008624  00009624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800862c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000005c  08008688  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08008688  0000a564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00058fff  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055b2  00000000  00000000  0006308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b40  00000000  00000000  00068640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002c60  00000000  00000000  0006c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b01e  00000000  00000000  0006ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d20  00000000  00000000  00089dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae2e2  00000000  00000000  000acb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ae00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010614  00000000  00000000  0015ae44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0016b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064b4 	.word	0x080064b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080064b4 	.word	0x080064b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_Z4maxiii>:
 *      Author: lex
 */

#include "CustomAuxiliary.h"

	int maxi(int x, int y) { return x < y ? y : x; };
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	da01      	bge.n	80005c2 <_Z4maxiii+0x16>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	e000      	b.n	80005c4 <_Z4maxiii+0x18>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_Z4miniii>:
	int mini(int x, int y) { return x < y ? x : y; };
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	da01      	bge.n	80005e6 <_Z4miniii+0x16>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e000      	b.n	80005e8 <_Z4miniii+0x18>
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_Z6boundiiii>:
	int boundi(int minValue, int x, int maxValue) { return mini(maxi(minValue, x), maxValue); };
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffd2 	bl	80005ac <_Z4maxiii>
 8000608:	4603      	mov	r3, r0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffdf 	bl	80005d0 <_Z4miniii>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>:
#include "../../Auxiliary/CustomAuxiliary.h"
#include <string>

#define kChannelLinesCount 2

 void MainViewController::handleEvent(EventSender* eventSender, UserEvent userEvent) {
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	4639      	mov	r1, r7
 8000628:	e881 000c 	stmia.w	r1, {r2, r3}
	 if (userEvent.state == UserEventState::Long) {
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d113      	bne.n	800065a <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3e>
		 if (userEvent.type == UserEventType::Left) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d106      	bne.n	8000646 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x2a>
			 soundEnabled = false;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2200      	movs	r2, #0
 800063c:	735a      	strb	r2, [r3, #13]
			 isUpdated = false;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2200      	movs	r2, #0
 8000642:	731a      	strb	r2, [r3, #12]
	 	 		 }

	 	 	 	 isUpdated = false;
	 	 	 }
	 	 }
 }
 8000644:	e060      	b.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 else if (userEvent.type == UserEventType::Right) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b03      	cmp	r3, #3
 800064a:	d15d      	bne.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 		 soundEnabled = true;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2201      	movs	r2, #1
 8000650:	735a      	strb	r2, [r3, #13]
	 	 	 isUpdated = false;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	731a      	strb	r2, [r3, #12]
 }
 8000658:	e056      	b.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 else if (userEvent.state == UserEventState::Up) {
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d153      	bne.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 if (userEvent.type == UserEventType::Up) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d121      	bne.n	80006aa <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x8e>
	 	 		 selectedItem = boundi(0, selectedItem - 1, channelCount - 1);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	7c1b      	ldrb	r3, [r3, #16]
 800066a:	1e59      	subs	r1, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	7bdb      	ldrb	r3, [r3, #15]
 8000670:	3b01      	subs	r3, #1
 8000672:	461a      	mov	r2, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f7ff ffbd 	bl	80005f4 <_Z6boundiiii>
 800067a:	4603      	mov	r3, r0
 800067c:	b2da      	uxtb	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	741a      	strb	r2, [r3, #16]
	 	 		 if (selectedItem < currentOffset) {
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7c1a      	ldrb	r2, [r3, #16]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	7b9b      	ldrb	r3, [r3, #14]
 800068a:	429a      	cmp	r2, r3
 800068c:	d209      	bcs.n	80006a2 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x86>
	 	 			currentOffset = maxi(0, selectedItem);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	7c1b      	ldrb	r3, [r3, #16]
 8000692:	4619      	mov	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff89 	bl	80005ac <_Z4maxiii>
 800069a:	4603      	mov	r3, r0
 800069c:	b2da      	uxtb	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2200      	movs	r2, #0
 80006a6:	731a      	strb	r2, [r3, #12]
 }
 80006a8:	e02e      	b.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 else if (userEvent.type == UserEventType::Down) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d12b      	bne.n	8000708 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 		 selectedItem = boundi(0, selectedItem + 1, channelCount - 1);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	7c1b      	ldrb	r3, [r3, #16]
 80006b4:	1c59      	adds	r1, r3, #1
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	7bdb      	ldrb	r3, [r3, #15]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	461a      	mov	r2, r3
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff98 	bl	80005f4 <_Z6boundiiii>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	741a      	strb	r2, [r3, #16]
	 	 		 if ((currentOffset + kChannelLinesCount - 1) < selectedItem) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	7b9b      	ldrb	r3, [r3, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	7c12      	ldrb	r2, [r2, #16]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	da13      	bge.n	8000702 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xe6>
	 	 			 currentOffset = boundi(0, selectedItem - kChannelLinesCount + 1, maxi(0, channelCount - kChannelLinesCount + 1));
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	7c1b      	ldrb	r3, [r3, #16]
 80006de:	1e5c      	subs	r4, r3, #1
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	7bdb      	ldrb	r3, [r3, #15]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff5f 	bl	80005ac <_Z4maxiii>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4621      	mov	r1, r4
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ff7d 	bl	80005f4 <_Z6boundiiii>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	731a      	strb	r2, [r3, #12]
 }
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <_ZThn4_N18MainViewController11handleEventEP11EventSender9UserEvent>:
	void update();
private:
	u8g2_t& u8g2;
	bool isUpdated = false;

	void handleEvent(EventSender* eventSender, UserEvent event);
 8000710:	f1a0 0004 	sub.w	r0, r0, #4
 8000714:	f7ff bf82 	b.w	800061c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>

08000718 <_ZN18MainViewController6updateEv>:

 void MainViewController::update() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af04      	add	r7, sp, #16
 800071e:	6078      	str	r0, [r7, #4]
	 if (isUpdated) { return; };
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b1b      	ldrb	r3, [r3, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d11b      	bne.n	8000760 <_ZN18MainViewController6updateEv+0x48>
	 isUpdated = true;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2201      	movs	r2, #1
 800072c:	731a      	strb	r2, [r3, #12]

	 u8g2_ClearBuffer(&u8g2);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa36 	bl	8001ba4 <u8g2_ClearBuffer>
	 this->drawMainScreen(&u8g2, 50, soundEnabled, false, false, true);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b5b      	ldrb	r3, [r3, #13]
 8000740:	2201      	movs	r2, #1
 8000742:	9202      	str	r2, [sp, #8]
 8000744:	2200      	movs	r2, #0
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	9200      	str	r2, [sp, #0]
 800074c:	2232      	movs	r2, #50	@ 0x32
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f80a 	bl	8000768 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>
	 u8g2_SendBuffer(&u8g2);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fa96 	bl	8001c8a <u8g2_SendBuffer>
 800075e:	e000      	b.n	8000762 <_ZN18MainViewController6updateEv+0x4a>
	 if (isUpdated) { return; };
 8000760:	bf00      	nop
 }
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>:

 void MainViewController::drawMainScreen(u8g2_t *u8g2, int batteryLevel, bool soundEnabled, bool isScanning, bool alertState, bool dBmMode) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	@ 0x58
 800076c:	af02      	add	r7, sp, #8
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	70fb      	strb	r3, [r7, #3]
   const uint8_t listStartY = 19;
 8000776:	2313      	movs	r3, #19
 8000778:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
   const uint8_t itemHeight = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
   uint8_t y = listStartY;
 8000782:	2313      	movs	r3, #19
 8000784:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


   u8g2_SetDrawColor(u8g2, 1);
 8000788:	2101      	movs	r1, #1
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f002 f97a 	bl	8002a84 <u8g2_SetDrawColor>
   drawBatteryIndicator(u8g2, 108, 0, batteryLevel);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2200      	movs	r2, #0
 8000796:	216c      	movs	r1, #108	@ 0x6c
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f003 f897 	bl	80038cc <drawBatteryIndicator>
   drawSoundIcon(u8g2, 88, 0, soundEnabled);
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2200      	movs	r2, #0
 80007a2:	2158      	movs	r1, #88	@ 0x58
 80007a4:	68b8      	ldr	r0, [r7, #8]
 80007a6:	f003 f97d 	bl	8003aa4 <drawSoundIcon>
   u8g2_SetFont(u8g2, u8g2_font_6x12_t_cyrillic);
 80007aa:	497d      	ldr	r1, [pc, #500]	@ (80009a0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x238>)
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f002 f855 	bl	800285c <u8g2_SetFont>

   if (isScanning) {
 80007b2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d01a      	beq.n	80007f0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x88>
     u8g2_SetDrawColor(u8g2, 1);
 80007ba:	2101      	movs	r1, #1
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	f002 f961 	bl	8002a84 <u8g2_SetDrawColor>
     u8g2_DrawBox(u8g2, 0, y - itemHeight-2, 128, itemHeight+1);
 80007c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3b0a      	subs	r3, #10
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	2309      	movs	r3, #9
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	2100      	movs	r1, #0
 80007d4:	68b8      	ldr	r0, [r7, #8]
 80007d6:	f001 f952 	bl	8001a7e <u8g2_DrawBox>
     u8g2_SetDrawColor(u8g2, 0);
 80007da:	2100      	movs	r1, #0
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f002 f951 	bl	8002a84 <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Сканування...");
 80007e2:	4b70      	ldr	r3, [pc, #448]	@ (80009a4 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x23c>)
 80007e4:	2211      	movs	r2, #17
 80007e6:	2101      	movs	r1, #1
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f001 ff95 	bl	8002718 <u8g2_DrawUTF8>
 80007ee:	e009      	b.n	8000804 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x9c>
   } else {
     u8g2_SetDrawColor(u8g2, 1);
 80007f0:	2101      	movs	r1, #1
 80007f2:	68b8      	ldr	r0, [r7, #8]
 80007f4:	f002 f946 	bl	8002a84 <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Обраний канал:");
 80007f8:	4b6b      	ldr	r3, [pc, #428]	@ (80009a8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x240>)
 80007fa:	2211      	movs	r2, #17
 80007fc:	2101      	movs	r1, #1
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	f001 ff8a 	bl	8002718 <u8g2_DrawUTF8>
   }

   y = y - 1;
 8000804:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000808:	3b01      	subs	r3, #1
 800080a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	7b9b      	ldrb	r3, [r3, #14]
 8000812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000814:	e0aa      	b.n	800096c <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x204>
     if(channels[i].frequency > 0) {
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800081a:	3302      	adds	r3, #2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	885b      	ldrh	r3, [r3, #2]
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 809f 	beq.w	8000966 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       y += itemHeight;
 8000828:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800082c:	3308      	adds	r3, #8
 800082e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
       char channelName[24] = {0};
 8000832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
       getChannelName(channels[i].frequency, channels[i].receiver, channelName);
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000848:	3302      	adds	r3, #2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	4413      	add	r3, r2
 800084e:	8858      	ldrh	r0, [r3, #2]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000854:	3302      	adds	r3, #2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4413      	add	r3, r2
 800085a:	79db      	ldrb	r3, [r3, #7]
 800085c:	4619      	mov	r1, r3
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	461a      	mov	r2, r3
 8000864:	f005 f92e 	bl	8005ac4 <_Z14getChannelNametiPc>
       int rssi = channels[i].rssi; //convertRSSIToDBm(channels[i].rssi, batteryVoltage, channels[i].receiver);
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800086c:	3302      	adds	r3, #2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000876:	643b      	str	r3, [r7, #64]	@ 0x40
       if (selectedItem == i) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	7c1b      	ldrb	r3, [r3, #16]
 800087c:	461a      	mov	r2, r3
 800087e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000880:	4293      	cmp	r3, r2
 8000882:	d114      	bne.n	80008ae <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x146>
    	   u8g2_SetDrawColor(u8g2, 1);
 8000884:	2101      	movs	r1, #1
 8000886:	68b8      	ldr	r0, [r7, #8]
 8000888:	f002 f8fc 	bl	8002a84 <u8g2_SetDrawColor>
    	   u8g2_DrawBox(u8g2, 1, y - itemHeight, 128, itemHeight);
 800088c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000890:	b29b      	uxth	r3, r3
 8000892:	3b08      	subs	r3, #8
 8000894:	b29a      	uxth	r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	2101      	movs	r1, #1
 800089e:	68b8      	ldr	r0, [r7, #8]
 80008a0:	f001 f8ed 	bl	8001a7e <u8g2_DrawBox>
    	   u8g2_SetDrawColor(u8g2, 0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f002 f8ec 	bl	8002a84 <u8g2_SetDrawColor>
 80008ac:	e003      	b.n	80008b6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x14e>
       } else {
    	   u8g2_SetDrawColor(u8g2, 1);
 80008ae:	2101      	movs	r1, #1
 80008b0:	68b8      	ldr	r0, [r7, #8]
 80008b2:	f002 f8e7 	bl	8002a84 <u8g2_SetDrawColor>
       }

       char printBuffer[24] = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
       if(dBmMode){
 80008c8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01c      	beq.n	800090a <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1a2>
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s S:%ddBm", channels[i].frequency, channelName, rssi);
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008d4:	3302      	adds	r3, #2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4413      	add	r3, r2
 80008da:	885b      	ldrh	r3, [r3, #2]
 80008dc:	461a      	mov	r2, r3
 80008de:	f107 0010 	add.w	r0, r7, #16
 80008e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	4a2f      	ldr	r2, [pc, #188]	@ (80009ac <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x244>)
 80008f0:	2118      	movs	r1, #24
 80008f2:	f005 f9cd 	bl	8005c90 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 80008f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2100      	movs	r1, #0
 8000902:	68b8      	ldr	r0, [r7, #8]
 8000904:	f001 feee 	bl	80026e4 <u8g2_DrawStr>
 8000908:	e02d      	b.n	8000966 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       } else {
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s", channels[i].frequency, channelName);
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800090e:	3302      	adds	r3, #2
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	4413      	add	r3, r2
 8000914:	885b      	ldrh	r3, [r3, #2]
 8000916:	461a      	mov	r2, r3
 8000918:	f107 0010 	add.w	r0, r7, #16
 800091c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	4a22      	ldr	r2, [pc, #136]	@ (80009b0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x248>)
 8000926:	2118      	movs	r1, #24
 8000928:	f005 f9b2 	bl	8005c90 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 800092c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000930:	b29a      	uxth	r2, r3
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2100      	movs	r1, #0
 8000938:	68b8      	ldr	r0, [r7, #8]
 800093a:	f001 fed3 	bl	80026e4 <u8g2_DrawStr>
    	   drawSignalStrengthIndicator(u8g2, 64, y - itemHeight, rssi, (selectedItem == i + 1) ? true : false);
 800093e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000942:	f1a3 0208 	sub.w	r2, r3, #8
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	7c1b      	ldrb	r3, [r3, #16]
 800094a:	4619      	mov	r1, r3
 800094c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800094e:	3301      	adds	r3, #1
 8000950:	4299      	cmp	r1, r3
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800095e:	2140      	movs	r1, #64	@ 0x40
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f003 f80f 	bl	8003984 <drawSignalStrengthIndicator>
   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 8000966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000968:	3301      	adds	r3, #1
 800096a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	7bdb      	ldrb	r3, [r3, #15]
 8000970:	461a      	mov	r2, r3
 8000972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000974:	4293      	cmp	r3, r2
 8000976:	da06      	bge.n	8000986 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x21e>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	7b9b      	ldrb	r3, [r3, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000980:	429a      	cmp	r2, r3
 8000982:	f77f af48 	ble.w	8000816 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0xae>
       }
     }
   }

   if (alertState) {
 8000986:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x230>
 	  drawAlertIcon(u8g2, 0, 51);
 800098e:	2233      	movs	r2, #51	@ 0x33
 8000990:	2100      	movs	r1, #0
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f003 f8b8 	bl	8003b08 <drawAlertIcon>
   }
 }
 8000998:	bf00      	nop
 800099a:	3750      	adds	r7, #80	@ 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	080072ec 	.word	0x080072ec
 80009a4:	080064cc 	.word	0x080064cc
 80009a8:	080064e4 	.word	0x080064e4
 80009ac:	08006500 	.word	0x08006500
 80009b0:	08006510 	.word	0x08006510

080009b4 <_ZN18MainViewControllerD1Ev>:
class MainViewController: public ViewController, public EventReciever {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <_ZN18MainViewControllerD1Ev+0x30>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <_ZN18MainViewControllerD1Ev+0x34>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3304      	adds	r3, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 f839 	bl	8005a44 <_ZN13EventRecieverD1Ev>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f831 	bl	8000a3c <_ZN14ViewControllerD1Ev>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08006a7c 	.word	0x08006a7c
 80009e8:	08006a90 	.word	0x08006a90

080009ec <_ZThn4_N18MainViewControllerD1Ev>:
 80009ec:	f1a0 0004 	sub.w	r0, r0, #4
 80009f0:	e7e0      	b.n	80009b4 <_ZN18MainViewControllerD1Ev>
 80009f2:	bf00      	nop

080009f4 <_ZN18MainViewControllerD0Ev>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffd9 	bl	80009b4 <_ZN18MainViewControllerD1Ev>
 8000a02:	2164      	movs	r1, #100	@ 0x64
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f005 f895 	bl	8005b34 <_ZdlPvj>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_ZThn4_N18MainViewControllerD0Ev>:
 8000a14:	f1a0 0004 	sub.w	r0, r0, #4
 8000a18:	e7ec      	b.n	80009f4 <_ZN18MainViewControllerD0Ev>
	...

08000a1c <_ZN14ViewControllerC1Ev>:
 *      Author: lex
 */

#include "ViewController.h"

ViewController::ViewController() {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <_ZN14ViewControllerC1Ev+0x1c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	08006aa4 	.word	0x08006aa4

08000a3c <_ZN14ViewControllerD1Ev>:

ViewController::~ViewController() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <_ZN14ViewControllerD1Ev+0x1c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	08006aa4 	.word	0x08006aa4

08000a5c <_ZN14ViewControllerD0Ev>:
ViewController::~ViewController() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
}
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ffe9 	bl	8000a3c <_ZN14ViewControllerD1Ev>
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f005 f861 	bl	8005b34 <_ZdlPvj>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b44      	ldr	r3, [pc, #272]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a43      	ldr	r2, [pc, #268]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b41      	ldr	r3, [pc, #260]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a35      	ldr	r2, [pc, #212]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_GPIO_Init+0x12c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4829      	ldr	r0, [pc, #164]	@ (8000bac <MX_GPIO_Init+0x130>)
 8000b08:	f003 fb60 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4823      	ldr	r0, [pc, #140]	@ (8000bb0 <MX_GPIO_Init+0x134>)
 8000b24:	f003 f9b6 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BUTTON_PIN_Pin DOWN_BUTTON_PIN_Pin UP_BUTTON_PIN_Pin LEFT_BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN_Pin|DOWN_BUTTON_PIN_Pin|UP_BUTTON_PIN_Pin|LEFT_BUTTON_PIN_Pin;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481c      	ldr	r0, [pc, #112]	@ (8000bb0 <MX_GPIO_Init+0x134>)
 8000b3e:	f003 f9a9 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4814      	ldr	r0, [pc, #80]	@ (8000bac <MX_GPIO_Init+0x130>)
 8000b5a:	f003 f99b 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2006      	movs	r0, #6
 8000b64:	f003 f95f 	bl	8003e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f003 f978 	bl	8003e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2007      	movs	r0, #7
 8000b74:	f003 f957 	bl	8003e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b78:	2007      	movs	r0, #7
 8000b7a:	f003 f970 	bl	8003e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2008      	movs	r0, #8
 8000b84:	f003 f94f 	bl	8003e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f003 f968 	bl	8003e5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2009      	movs	r0, #9
 8000b94:	f003 f947 	bl	8003e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b98:	2009      	movs	r0, #9
 8000b9a:	f003 f960 	bl	8003e5e <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <MX_I2C3_Init+0x54>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <MX_I2C3_Init+0x58>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bd6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_I2C3_Init+0x50>)
 8000bf2:	f003 fb1d 	bl	8004230 <HAL_I2C_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 fa12 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000078 	.word	0x20000078
 8000c08:	40005c00 	.word	0x40005c00
 8000c0c:	00061a80 	.word	0x00061a80

08000c10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <HAL_I2C_MspInit+0xc0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d14a      	bne.n	8000cc8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a26      	ldr	r2, [pc, #152]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c70:	2312      	movs	r3, #18
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <HAL_I2C_MspInit+0xc8>)
 8000c88:	f003 f904 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <HAL_I2C_MspInit+0xcc>)
 8000ca8:	f003 f8f4 	bl	8003e94 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <HAL_I2C_MspInit+0xc4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40005c00 	.word	0x40005c00
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <_ZN12VideoChannelC1Etthhh>:

extern const uint16_t SM137R_Channel_channelTable[9][5];
extern const uint16_t channelFreqTable[];

struct VideoChannel {
	VideoChannel(uint16_t frequency, uint16_t rssi,  uint8_t lifetime, uint8_t receiver, uint8_t cyclesPresense): frequency(frequency), rssi(rssi), lifetime(lifetime), receiver(receiver), cyclesPresense(cyclesPresense) {};
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	817b      	strh	r3, [r7, #10]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	813b      	strh	r3, [r7, #8]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	897a      	ldrh	r2, [r7, #10]
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	805a      	strh	r2, [r3, #2]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	711a      	strb	r2, [r3, #4]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	7e3a      	ldrb	r2, [r7, #24]
 8000d12:	715a      	strb	r2, [r3, #5]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	7f3a      	ldrb	r2, [r7, #28]
 8000d18:	719a      	strb	r2, [r3, #6]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN18MainViewControllerC1ER11u8g2_struct>:
#include <EventReciever.h>
#include "VideoChannel.h"

class MainViewController: public ViewController, public EventReciever {
public:
	MainViewController(u8g2_t& u8g2): u8g2(u8g2) {};
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe71 	bl	8000a1c <_ZN14ViewControllerC1Ev>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 fe70 	bl	8005a24 <_ZN13EventRecieverC1Ev>
 8000d44:	4a4e      	ldr	r2, [pc, #312]	@ (8000e80 <_ZN18MainViewControllerC1ER11u8g2_struct+0x158>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	4a4e      	ldr	r2, [pc, #312]	@ (8000e84 <_ZN18MainViewControllerC1ER11u8g2_struct+0x15c>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	731a      	strb	r2, [r3, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	739a      	strb	r2, [r3, #14]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	220a      	movs	r2, #10
 8000d66:	73da      	strb	r2, [r3, #15]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	741a      	strb	r2, [r3, #16]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f103 0012 	add.w	r0, r3, #18
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d82:	f241 61e9 	movw	r1, #5865	@ 0x16e9
 8000d86:	f7ff ffab 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 001a 	add.w	r0, r3, #26
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f241 61f8 	movw	r1, #5880	@ 0x16f8
 8000da0:	f7ff ff9e 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 8000daa:	2301      	movs	r3, #1
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	f241 618b 	movw	r1, #5771	@ 0x168b
 8000dba:	f7ff ff91 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2204      	movs	r2, #4
 8000dd0:	f241 613f 	movw	r1, #5695	@ 0x163f
 8000dd4:	f7ff ff84 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f103 0032 	add.w	r0, r3, #50	@ 0x32
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	2301      	movs	r3, #1
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	2205      	movs	r2, #5
 8000dea:	f241 5125 	movw	r1, #5413	@ 0x1525
 8000dee:	f7ff ff77 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f103 003a 	add.w	r0, r3, #58	@ 0x3a
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	2206      	movs	r2, #6
 8000e04:	f241 31d7 	movw	r1, #5079	@ 0x13d7
 8000e08:	f7ff ff6a 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 8000e12:	2301      	movs	r3, #1
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2301      	movs	r3, #1
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	f241 3183 	movw	r1, #4995	@ 0x1383
 8000e22:	f7ff ff5d 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f103 004a 	add.w	r0, r3, #74	@ 0x4a
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2301      	movs	r3, #1
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	2208      	movs	r2, #8
 8000e38:	f241 7147 	movw	r1, #5959	@ 0x1747
 8000e3c:	f7ff ff50 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8000e46:	2301      	movs	r3, #1
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	2209      	movs	r2, #9
 8000e52:	f241 7171 	movw	r1, #6001	@ 0x1771
 8000e56:	f7ff ff43 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f103 005a 	add.w	r0, r3, #90	@ 0x5a
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	f641 0127 	movw	r1, #6183	@ 0x1827
 8000e70:	f7ff ff36 	bl	8000ce0 <_ZN12VideoChannelC1Etthhh>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	08006a7c 	.word	0x08006a7c
 8000e84:	08006a90 	.word	0x08006a90

08000e88 <_Z9u8g2_Initv>:
    1,
    2,
	3
};

void u8g2_Init(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay_stm32);
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <_Z9u8g2_Initv+0x38>)
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <_Z9u8g2_Initv+0x3c>)
 8000e90:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <_Z9u8g2_Initv+0x40>)
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000e94:	f000 ff18 	bl	8001cc8 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
    u8g2_InitDisplay(&u8g2);
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000e9a:	f002 fbf7 	bl	800368c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000ea2:	f002 fc02 	bl	80036aa <u8x8_SetPowerSave>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8000ea6:	490a      	ldr	r1, [pc, #40]	@ (8000ed0 <_Z9u8g2_Initv+0x48>)
 8000ea8:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000eaa:	f001 fcd7 	bl	800285c <u8g2_SetFont>

    u8g2_ClearBuffer(&u8g2);
 8000eae:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000eb0:	f000 fe78 	bl	8001ba4 <u8g2_ClearBuffer>
    u8g2_SendBuffer(&u8g2);
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <_Z9u8g2_Initv+0x44>)
 8000eb6:	f000 fee8 	bl	8001c8a <u8g2_SendBuffer>
//    u8g2_SendBuffer(&u8g2);

//    ssd1306_SetCursor(5, 5);
//    ssd1306_WriteString("qwerty", Font_16x26, White);
//    ssd1306_UpdateScreen();
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0800388d 	.word	0x0800388d
 8000ec4:	080037c9 	.word	0x080037c9
 8000ec8:	08008540 	.word	0x08008540
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	08006b08 	.word	0x08006b08

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09a      	sub	sp, #104	@ 0x68
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f002 fe33 	bl	8003b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f81b 	bl	8000f18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f7ff fdcb 	bl	8000a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f97d 	bl	80011e4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000eea:	f7ff fe63 	bl	8000bb4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  u8g2_Init();
 8000eee:	f7ff ffcb 	bl	8000e88 <_Z9u8g2_Initv>
//  u8g2_SendBuffer(&u8g2);

//  ssd1306_Line(10, 5, 108, 5, White);
//  ssd1306_UpdateScreen();

  MainViewController mainViewController = MainViewController(u8g2);
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4906      	ldr	r1, [pc, #24]	@ (8000f10 <main+0x3c>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff16 	bl	8000d28 <_ZN18MainViewControllerC1ER11u8g2_struct>
  userActionPanel.eventReciever = &mainViewController;
 8000efc:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <main+0x40>)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	3304      	adds	r3, #4
 8000f02:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainViewController.update();
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc06 	bl	8000718 <_ZN18MainViewController6updateEv>
 8000f0c:	e7fa      	b.n	8000f04 <main+0x30>
 8000f0e:	bf00      	nop
 8000f10:	200000cc 	.word	0x200000cc
 8000f14:	20000160 	.word	0x20000160

08000f18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	@ 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 ff0e 	bl	8005d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <_Z18SystemClock_Configv+0xe4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a2d      	ldr	r2, [pc, #180]	@ (8000ffc <_Z18SystemClock_Configv+0xe4>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <_Z18SystemClock_Configv+0xe4>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <_Z18SystemClock_Configv+0xe8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f64:	4a26      	ldr	r2, [pc, #152]	@ (8001000 <_Z18SystemClock_Configv+0xe8>)
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <_Z18SystemClock_Configv+0xe8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fde2 	bl	8004b6c <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000fb8:	f000 f834 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f83f 	bl	800505c <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000fee:	f000 f819 	bl	8001024 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	@ 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	userActionPanel.handleInterrupt(GPIO_Pin);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4619      	mov	r1, r3
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001014:	f000 fa32 	bl	800147c <_ZN15UserActionPanel15handleInterruptEt>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000160 	.word	0x20000160

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001036:	f000 f9ab 	bl	8001390 <_ZN15UserActionPanelC1Ev>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000160 	.word	0x20000160

08001044 <_Z41__static_initialization_and_destruction_1v>:
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800104a:	f000 f9ef 	bl	800142c <_ZN15UserActionPanelD1Ev>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000160 	.word	0x20000160

08001058 <_GLOBAL__sub_I_u8g2>:
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
 800105c:	f7ff ffe8 	bl	8001030 <_Z41__static_initialization_and_destruction_0v>
 8001060:	bd80      	pop	{r7, pc}

08001062 <_GLOBAL__sub_D_u8g2>:
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
 8001066:	f7ff ffed 	bl	8001044 <_Z41__static_initialization_and_destruction_1v>
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001112:	f002 fd69 	bl	8003be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}

0800111a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_BUTTON_PIN_Pin);
 800111e:	2001      	movs	r0, #1
 8001120:	f003 f86e 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_PIN_Pin);
 800112c:	2002      	movs	r0, #2
 800112e:	f003 f867 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}

08001136 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_PIN_Pin);
 800113a:	2004      	movs	r0, #4
 800113c:	f003 f860 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_BUTTON_PIN_Pin);
 8001148:	2008      	movs	r0, #8
 800114a:	f003 f859 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f004 fdf8 	bl	8005d78 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20018000 	.word	0x20018000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	200001ac 	.word	0x200001ac
 80011bc:	20000568 	.word	0x20000568

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f004 f93e 	bl	800549c <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f7ff fefd 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001b0 	.word	0x200001b0
 8001234:	40004400 	.word	0x40004400

08001238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a17      	ldr	r2, [pc, #92]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_UART_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001292:	230c      	movs	r3, #12
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_UART_MspInit+0x8c>)
 80012ae:	f002 fdf1 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012cc:	f7ff ff78 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f004 fd45 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fdeb 	bl	8000ed4 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001300:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800130c:	0800862c 	.word	0x0800862c
  ldr r2, =_sbss
 8001310:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001314:	20000564 	.word	0x20000564

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>

0800131a <_ZN9UserEventC1E14UserEventState13UserEventType>:
enum class UserEventState { Down, Up, Long };
enum class UserEventType { Down, Up, Left, Right, Enter };

class UserEvent: public Event {
public:
	UserEvent(UserEventState state, UserEventType type): state(state), type(type) { };
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN10UserButtonC1EtP12GPIO_TypeDef>:
	virtual void onButtonLong(UserButton* sender) = 0;
};

class UserButton {
public:
	UserButton(uint16_t pin, GPIO_TypeDef* port): pin(pin), port(port) {}
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	460b      	mov	r3, r1
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	817b      	strh	r3, [r7, #10]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	897a      	ldrh	r2, [r7, #10]
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_ZN18UserButtonDelegateC1Ev>:
class UserButtonDelegate {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <_ZN18UserButtonDelegateC1Ev+0x1c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	08006afc 	.word	0x08006afc

08001390 <_ZN15UserActionPanelC1Ev>:

#include "UserActionPanel.h"
#include "UserEvent.h"


UserActionPanel::UserActionPanel() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fb62 	bl	8005a64 <_ZN11EventSenderC1Ev>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3308      	adds	r3, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffe3 	bl	8001370 <_ZN18UserButtonDelegateC1Ev>
 80013aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001420 <_ZN15UserActionPanelC1Ev+0x90>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <_ZN15UserActionPanelC1Ev+0x94>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	330c      	adds	r3, #12
 80013ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <_ZN15UserActionPanelC1Ev+0x98>)
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ffbe 	bl	8001340 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	331c      	adds	r3, #28
 80013c8:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <_ZN15UserActionPanelC1Ev+0x98>)
 80013ca:	2102      	movs	r1, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffb7 	bl	8001340 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	332c      	adds	r3, #44	@ 0x2c
 80013d6:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_ZN15UserActionPanelC1Ev+0x98>)
 80013d8:	2108      	movs	r1, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffb0 	bl	8001340 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	333c      	adds	r3, #60	@ 0x3c
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <_ZN15UserActionPanelC1Ev+0x98>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ffa9 	bl	8001340 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
	upButton.delegate = this;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f103 0208 	add.w	r2, r3, #8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]
	downButton.delegate = this;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 0208 	add.w	r2, r3, #8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	621a      	str	r2, [r3, #32]
	leftButton.delegate = this;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f103 0208 	add.w	r2, r3, #8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	631a      	str	r2, [r3, #48]	@ 0x30
	rightButton.delegate = this;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f103 0208 	add.w	r2, r3, #8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08006acc 	.word	0x08006acc
 8001424:	08006ae8 	.word	0x08006ae8
 8001428:	40020800 	.word	0x40020800

0800142c <_ZN15UserActionPanelD1Ev>:

UserActionPanel::~UserActionPanel() {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <_ZN15UserActionPanelD1Ev+0x28>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <_ZN15UserActionPanelD1Ev+0x2c>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated destructor stub
}
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fb1e 	bl	8005a84 <_ZN11EventSenderD1Ev>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08006acc 	.word	0x08006acc
 8001458:	08006ae8 	.word	0x08006ae8

0800145c <_ZN15UserActionPanelD0Ev>:
UserActionPanel::~UserActionPanel() {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
}
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe1 	bl	800142c <_ZN15UserActionPanelD1Ev>
 800146a:	214c      	movs	r1, #76	@ 0x4c
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 fb61 	bl	8005b34 <_ZdlPvj>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN15UserActionPanel15handleInterruptEt>:

void UserActionPanel::handleInterrupt(uint16_t pin) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
	switch (pin) {
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	3b01      	subs	r3, #1
 800148c:	2b07      	cmp	r3, #7
 800148e:	d82b      	bhi.n	80014e8 <_ZN15UserActionPanel15handleInterruptEt+0x6c>
 8001490:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <_ZN15UserActionPanel15handleInterruptEt+0x1c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014dd 	.word	0x080014dd
 800149c:	080014c5 	.word	0x080014c5
 80014a0:	080014e9 	.word	0x080014e9
 80014a4:	080014b9 	.word	0x080014b9
 80014a8:	080014e9 	.word	0x080014e9
 80014ac:	080014e9 	.word	0x080014e9
 80014b0:	080014e9 	.word	0x080014e9
 80014b4:	080014d1 	.word	0x080014d1
		case UP_BUTTON_PIN_Pin: upButton.handleInterrupt(); break;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	330c      	adds	r3, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f9b1 	bl	8001824 <_ZN10UserButton15handleInterruptEv>
 80014c2:	e012      	b.n	80014ea <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case DOWN_BUTTON_PIN_Pin: downButton.handleInterrupt(); break;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	331c      	adds	r3, #28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f9ab 	bl	8001824 <_ZN10UserButton15handleInterruptEv>
 80014ce:	e00c      	b.n	80014ea <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case LEFT_BUTTON_PIN_Pin: leftButton.handleInterrupt(); break;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	332c      	adds	r3, #44	@ 0x2c
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f9a5 	bl	8001824 <_ZN10UserButton15handleInterruptEv>
 80014da:	e006      	b.n	80014ea <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case RIGHT_BUTTON_PIN_Pin: rightButton.handleInterrupt(); break;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	333c      	adds	r3, #60	@ 0x3c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f99f 	bl	8001824 <_ZN10UserButton15handleInterruptEv>
 80014e6:	e000      	b.n	80014ea <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    default: break;
 80014e8:	bf00      	nop
	}
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop

080014f4 <_ZN15UserActionPanel12onButtonDownEP10UserButton>:

void UserActionPanel::onButtonDown(UserButton* sender) {
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	b08b      	sub	sp, #44	@ 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d073      	beq.n	80015ec <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d071      	beq.n	80015f0 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xfc>

	switch (sender->pin) {
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	2b07      	cmp	r3, #7
 8001514:	d86e      	bhi.n	80015f4 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x100>
 8001516:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x28>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	080015c1 	.word	0x080015c1
 8001520:	08001569 	.word	0x08001569
 8001524:	080015f5 	.word	0x080015f5
 8001528:	0800153d 	.word	0x0800153d
 800152c:	080015f5 	.word	0x080015f5
 8001530:	080015f5 	.word	0x080015f5
 8001534:	080015f5 	.word	0x080015f5
 8001538:	08001595 	.word	0x08001595
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Up)); break;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685d      	ldr	r5, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3308      	adds	r3, #8
 8001548:	681c      	ldr	r4, [r3, #0]
 800154a:	687e      	ldr	r6, [r7, #4]
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2201      	movs	r2, #1
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fee0 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	cb0c      	ldmia	r3, {r2, r3}
 8001560:	4631      	mov	r1, r6
 8001562:	4628      	mov	r0, r5
 8001564:	47a0      	blx	r4
 8001566:	e046      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Down)); break;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685d      	ldr	r5, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3308      	adds	r3, #8
 8001574:	681c      	ldr	r4, [r3, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff feca 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	cb0c      	ldmia	r3, {r2, r3}
 800158c:	4631      	mov	r1, r6
 800158e:	4628      	mov	r0, r5
 8001590:	47a0      	blx	r4
 8001592:	e030      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Left)); break;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685d      	ldr	r5, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3308      	adds	r3, #8
 80015a0:	681c      	ldr	r4, [r3, #0]
 80015a2:	687e      	ldr	r6, [r7, #4]
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	2202      	movs	r2, #2
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff feb4 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	cb0c      	ldmia	r3, {r2, r3}
 80015b8:	4631      	mov	r1, r6
 80015ba:	4628      	mov	r0, r5
 80015bc:	47a0      	blx	r4
 80015be:	e01a      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Right)); break;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685d      	ldr	r5, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3308      	adds	r3, #8
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	687e      	ldr	r6, [r7, #4]
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	2203      	movs	r2, #3
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe9e 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	cb0c      	ldmia	r3, {r2, r3}
 80015e4:	4631      	mov	r1, r6
 80015e6:	4628      	mov	r0, r5
 80015e8:	47a0      	blx	r4
 80015ea:	e004      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!sender) { return; };
 80015ec:	bf00      	nop
 80015ee:	e002      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!eventReciever) { return; };
 80015f0:	bf00      	nop
 80015f2:	e000      	b.n	80015f6 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		default: break;
 80015f4:	bf00      	nop
	}
}
 80015f6:	372c      	adds	r7, #44	@ 0x2c
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015fc <_ZThn8_N15UserActionPanel12onButtonDownEP10UserButton>:
	UserButton upButton = UserButton(UP_BUTTON_PIN_Pin, UP_BUTTON_PIN_GPIO_Port);
	UserButton downButton = UserButton(DOWN_BUTTON_PIN_Pin, DOWN_BUTTON_PIN_GPIO_Port);
	UserButton leftButton = UserButton(LEFT_BUTTON_PIN_Pin, LEFT_BUTTON_PIN_GPIO_Port);
	UserButton rightButton = UserButton(RIGHT_BUTTON_PIN_Pin, RIGHT_BUTTON_PIN_GPIO_Port);

	virtual void onButtonDown(UserButton* sender);
 80015fc:	f1a0 0008 	sub.w	r0, r0, #8
 8001600:	f7ff bf78 	b.w	80014f4 <_ZN15UserActionPanel12onButtonDownEP10UserButton>

08001604 <_ZN15UserActionPanel10onButtonUpEP10UserButton>:

void UserActionPanel::onButtonUp(UserButton* sender) {
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b08b      	sub	sp, #44	@ 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d073      	beq.n	80016fc <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d071      	beq.n	8001700 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xfc>

	switch (sender->pin) {
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	2b07      	cmp	r3, #7
 8001624:	d86e      	bhi.n	8001704 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x100>
 8001626:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x28>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016d1 	.word	0x080016d1
 8001630:	08001679 	.word	0x08001679
 8001634:	08001705 	.word	0x08001705
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001705 	.word	0x08001705
 8001640:	08001705 	.word	0x08001705
 8001644:	08001705 	.word	0x08001705
 8001648:	080016a5 	.word	0x080016a5
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Up)); break;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685d      	ldr	r5, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3308      	adds	r3, #8
 8001658:	681c      	ldr	r4, [r3, #0]
 800165a:	687e      	ldr	r6, [r7, #4]
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2201      	movs	r2, #1
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe58 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	cb0c      	ldmia	r3, {r2, r3}
 8001670:	4631      	mov	r1, r6
 8001672:	4628      	mov	r0, r5
 8001674:	47a0      	blx	r4
 8001676:	e046      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Down)); break;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685d      	ldr	r5, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3308      	adds	r3, #8
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	687e      	ldr	r6, [r7, #4]
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe42 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	cb0c      	ldmia	r3, {r2, r3}
 800169c:	4631      	mov	r1, r6
 800169e:	4628      	mov	r0, r5
 80016a0:	47a0      	blx	r4
 80016a2:	e030      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Left)); break;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685d      	ldr	r5, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3308      	adds	r3, #8
 80016b0:	681c      	ldr	r4, [r3, #0]
 80016b2:	687e      	ldr	r6, [r7, #4]
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	2202      	movs	r2, #2
 80016ba:	2101      	movs	r1, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe2c 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	cb0c      	ldmia	r3, {r2, r3}
 80016c8:	4631      	mov	r1, r6
 80016ca:	4628      	mov	r0, r5
 80016cc:	47a0      	blx	r4
 80016ce:	e01a      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Right)); break;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685d      	ldr	r5, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3308      	adds	r3, #8
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	687e      	ldr	r6, [r7, #4]
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	2203      	movs	r2, #3
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe16 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	cb0c      	ldmia	r3, {r2, r3}
 80016f4:	4631      	mov	r1, r6
 80016f6:	4628      	mov	r0, r5
 80016f8:	47a0      	blx	r4
 80016fa:	e004      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!sender) { return; };
 80016fc:	bf00      	nop
 80016fe:	e002      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001700:	bf00      	nop
 8001702:	e000      	b.n	8001706 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		default: break;
 8001704:	bf00      	nop
	}
}
 8001706:	372c      	adds	r7, #44	@ 0x2c
 8001708:	46bd      	mov	sp, r7
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170c <_ZThn8_N15UserActionPanel10onButtonUpEP10UserButton>:
	virtual void onButtonUp(UserButton* sender);
 800170c:	f1a0 0008 	sub.w	r0, r0, #8
 8001710:	f7ff bf78 	b.w	8001604 <_ZN15UserActionPanel10onButtonUpEP10UserButton>

08001714 <_ZN15UserActionPanel12onButtonLongEP10UserButton>:

void UserActionPanel::onButtonLong(UserButton* sender) {
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08b      	sub	sp, #44	@ 0x2c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d073      	beq.n	800180c <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d071      	beq.n	8001810 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xfc>

	switch (sender->pin) {
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	2b07      	cmp	r3, #7
 8001734:	d86e      	bhi.n	8001814 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x100>
 8001736:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x28>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	080017e1 	.word	0x080017e1
 8001740:	08001789 	.word	0x08001789
 8001744:	08001815 	.word	0x08001815
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001815 	.word	0x08001815
 8001750:	08001815 	.word	0x08001815
 8001754:	08001815 	.word	0x08001815
 8001758:	080017b5 	.word	0x080017b5
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Up)); break;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685d      	ldr	r5, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3308      	adds	r3, #8
 8001768:	681c      	ldr	r4, [r3, #0]
 800176a:	687e      	ldr	r6, [r7, #4]
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2201      	movs	r2, #1
 8001772:	2102      	movs	r1, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fdd0 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	cb0c      	ldmia	r3, {r2, r3}
 8001780:	4631      	mov	r1, r6
 8001782:	4628      	mov	r0, r5
 8001784:	47a0      	blx	r4
 8001786:	e046      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Down)); break;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685d      	ldr	r5, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3308      	adds	r3, #8
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2200      	movs	r2, #0
 800179e:	2102      	movs	r1, #2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fdba 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	cb0c      	ldmia	r3, {r2, r3}
 80017ac:	4631      	mov	r1, r6
 80017ae:	4628      	mov	r0, r5
 80017b0:	47a0      	blx	r4
 80017b2:	e030      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Left)); break;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685d      	ldr	r5, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3308      	adds	r3, #8
 80017c0:	681c      	ldr	r4, [r3, #0]
 80017c2:	687e      	ldr	r6, [r7, #4]
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	2202      	movs	r2, #2
 80017ca:	2102      	movs	r1, #2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fda4 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	cb0c      	ldmia	r3, {r2, r3}
 80017d8:	4631      	mov	r1, r6
 80017da:	4628      	mov	r0, r5
 80017dc:	47a0      	blx	r4
 80017de:	e01a      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Right)); break;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685d      	ldr	r5, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3308      	adds	r3, #8
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	687e      	ldr	r6, [r7, #4]
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	2203      	movs	r2, #3
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd8e 	bl	800131a <_ZN9UserEventC1E14UserEventState13UserEventType>
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	cb0c      	ldmia	r3, {r2, r3}
 8001804:	4631      	mov	r1, r6
 8001806:	4628      	mov	r0, r5
 8001808:	47a0      	blx	r4
 800180a:	e004      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!sender) { return; };
 800180c:	bf00      	nop
 800180e:	e002      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		default: break;
 8001814:	bf00      	nop
	}
}
 8001816:	372c      	adds	r7, #44	@ 0x2c
 8001818:	46bd      	mov	sp, r7
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800181c <_ZThn8_N15UserActionPanel12onButtonLongEP10UserButton>:
	virtual void onButtonLong(UserButton* sender);
 800181c:	f1a0 0008 	sub.w	r0, r0, #8
 8001820:	f7ff bf78 	b.w	8001714 <_ZN15UserActionPanel12onButtonLongEP10UserButton>

08001824 <_ZN10UserButton15handleInterruptEv>:
#include <UserEvent.h>

#define DEBOUNCE_TIME_MS 50
#define LONG_PRESS_TIME_MS 1000  // (1 секунда)

void UserButton::handleInterrupt() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	if (!delegate) { return; };
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d04d      	beq.n	80018d0 <_ZN10UserButton15handleInterruptEv+0xac>

	uint32_t currentTime = HAL_GetTick();
 8001834:	f002 f9ec 	bl	8003c10 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]
	if ((currentTime - lastActionTime) < DEBOUNCE_TIME_MS) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b31      	cmp	r3, #49	@ 0x31
 8001844:	d803      	bhi.n	800184e <_ZN10UserButton15handleInterruptEv+0x2a>
		lastActionTime = currentTime;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]
		return;
 800184c:	e041      	b.n	80018d2 <_ZN10UserButton15handleInterruptEv+0xae>
	}

	bool isPressed = HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f002 fc9f 	bl	800419c <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	72fb      	strb	r3, [r7, #11]
	if (isPressed) {
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <_ZN10UserButton15handleInterruptEv+0x60>
		delegate->onButtonDown(this);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4610      	mov	r0, r2
 8001880:	4798      	blx	r3
 8001882:	e021      	b.n	80018c8 <_ZN10UserButton15handleInterruptEv+0xa4>
	}
	else {
		bool isLong = LONG_PRESS_TIME_MS < (currentTime - lastActionTime);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001890:	bf8c      	ite	hi
 8001892:	2301      	movhi	r3, #1
 8001894:	2300      	movls	r3, #0
 8001896:	72bb      	strb	r3, [r7, #10]
		if (isLong) {
 8001898:	7abb      	ldrb	r3, [r7, #10]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <_ZN10UserButton15handleInterruptEv+0x90>
			delegate->onButtonLong(this);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3308      	adds	r3, #8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4610      	mov	r0, r2
 80018b0:	4798      	blx	r3
 80018b2:	e009      	b.n	80018c8 <_ZN10UserButton15handleInterruptEv+0xa4>
		}
		else {
			delegate->onButtonUp(this);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3304      	adds	r3, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4610      	mov	r0, r2
 80018c6:	4798      	blx	r3
		}
	}

	lastActionTime = currentTime;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e000      	b.n	80018d2 <_ZN10UserButton15handleInterruptEv+0xae>
	if (!delegate) { return; };
 80018d0:	bf00      	nop
}
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	460b      	mov	r3, r1
 80018ec:	813b      	strh	r3, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80018f8:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001908:	897a      	ldrh	r2, [r7, #10]
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	4413      	add	r3, r2
 800190e:	b298      	uxth	r0, r3
 8001910:	893b      	ldrh	r3, [r7, #8]
 8001912:	3301      	adds	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	893a      	ldrh	r2, [r7, #8]
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4603      	mov	r3, r0
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f001 f8fa 	bl	8002b18 <u8g2_IsIntersection>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d062      	beq.n	80019f0 <u8g2_DrawHXBMP+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 800192e:	e057      	b.n	80019e0 <u8g2_DrawHXBMP+0x108>
  {
    uint8_t current_bit = u8x8_pgm_read(b) & mask;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	4013      	ands	r3, r2
 8001938:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 800193e:	e013      	b.n	8001968 <u8g2_DrawHXBMP+0x90>
    {
        run_length++;
 8001940:	8abb      	ldrh	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	82bb      	strh	r3, [r7, #20]
        x++;
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	3301      	adds	r3, #1
 800194a:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d104      	bne.n	8001962 <u8g2_DrawHXBMP+0x8a>
        {
            mask = 1;
 8001958:	2301      	movs	r3, #1
 800195a:	75fb      	strb	r3, [r7, #23]
            b++;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	3301      	adds	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
        }
        len--;
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	3b01      	subs	r3, #1
 8001966:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d011      	beq.n	8001992 <u8g2_DrawHXBMP+0xba>
 800196e:	7c7b      	ldrb	r3, [r7, #17]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <u8g2_DrawHXBMP+0xac>
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	4013      	ands	r3, r2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0de      	beq.n	8001940 <u8g2_DrawHXBMP+0x68>
 8001982:	e006      	b.n	8001992 <u8g2_DrawHXBMP+0xba>
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	4013      	ands	r3, r2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1d6      	bne.n	8001940 <u8g2_DrawHXBMP+0x68>
    }
    if (current_bit)
 8001992:	7c7b      	ldrb	r3, [r7, #17]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00f      	beq.n	80019b8 <u8g2_DrawHXBMP+0xe0>
    {
        u8g2->draw_color = color;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	7cfa      	ldrb	r2, [r7, #19]
 800199c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 80019a0:	897a      	ldrh	r2, [r7, #10]
 80019a2:	8abb      	ldrh	r3, [r7, #20]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	b299      	uxth	r1, r3
 80019a8:	8abb      	ldrh	r3, [r7, #20]
 80019aa:	893a      	ldrh	r2, [r7, #8]
 80019ac:	2000      	movs	r0, #0
 80019ae:	9000      	str	r0, [sp, #0]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 ffdc 	bl	800296e <u8g2_DrawHVLine>
 80019b6:	e013      	b.n	80019e0 <u8g2_DrawHXBMP+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <u8g2_DrawHXBMP+0x108>
    {
        u8g2->draw_color = ncolor;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	7cba      	ldrb	r2, [r7, #18]
 80019c6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 80019ca:	897a      	ldrh	r2, [r7, #10]
 80019cc:	8abb      	ldrh	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	8abb      	ldrh	r3, [r7, #20]
 80019d4:	893a      	ldrh	r2, [r7, #8]
 80019d6:	2000      	movs	r0, #0
 80019d8:	9000      	str	r0, [sp, #0]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 ffc7 	bl	800296e <u8g2_DrawHVLine>
  while(len > 0)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1a4      	bne.n	8001930 <u8g2_DrawHXBMP+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	7cfa      	ldrb	r2, [r7, #19]
 80019ea:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80019ee:	e000      	b.n	80019f2 <u8g2_DrawHXBMP+0x11a>
    return;
 80019f0:	bf00      	nop
}
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	817b      	strh	r3, [r7, #10]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	813b      	strh	r3, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001a16:	8afb      	ldrh	r3, [r7, #22]
 8001a18:	3307      	adds	r3, #7
 8001a1a:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001a22:	897a      	ldrh	r2, [r7, #10]
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	4413      	add	r3, r2
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	893a      	ldrh	r2, [r7, #8]
 8001a2c:	8c3b      	ldrh	r3, [r7, #32]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	893a      	ldrh	r2, [r7, #8]
 8001a34:	8979      	ldrh	r1, [r7, #10]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f001 f86c 	bl	8002b18 <u8g2_IsIntersection>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d017      	beq.n	8001a76 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001a46:	e012      	b.n	8001a6e <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001a48:	88f8      	ldrh	r0, [r7, #6]
 8001a4a:	893a      	ldrh	r2, [r7, #8]
 8001a4c:	8979      	ldrh	r1, [r7, #10]
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4603      	mov	r3, r0
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff ff3f 	bl	80018d8 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001a5a:	8afb      	ldrh	r3, [r7, #22]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5e:	4413      	add	r3, r2
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001a62:	893b      	ldrh	r3, [r7, #8]
 8001a64:	3301      	adds	r3, #1
 8001a66:	813b      	strh	r3, [r7, #8]
    h--;
 8001a68:	8c3b      	ldrh	r3, [r7, #32]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001a6e:	8c3b      	ldrh	r3, [r7, #32]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <u8g2_DrawXBMP+0x50>
 8001a74:	e000      	b.n	8001a78 <u8g2_DrawXBMP+0x80>
    return;
 8001a76:	bf00      	nop
  }
}
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af02      	add	r7, sp, #8
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	4608      	mov	r0, r1
 8001a88:	4611      	mov	r1, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	460b      	mov	r3, r1
 8001a92:	813b      	strh	r3, [r7, #8]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001a98:	897a      	ldrh	r2, [r7, #10]
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	8b3b      	ldrh	r3, [r7, #24]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	8979      	ldrh	r1, [r7, #10]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f001 f831 	bl	8002b18 <u8g2_IsIntersection>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001abc:	e00d      	b.n	8001ada <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	893a      	ldrh	r2, [r7, #8]
 8001ac2:	8979      	ldrh	r1, [r7, #10]
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	9000      	str	r0, [sp, #0]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 ff50 	bl	800296e <u8g2_DrawHVLine>
    y++;    
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	813b      	strh	r3, [r7, #8]
    h--;
 8001ad4:	8b3b      	ldrh	r3, [r7, #24]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001ada:	8b3b      	ldrh	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <u8g2_DrawBox+0x40>
 8001ae0:	e000      	b.n	8001ae4 <u8g2_DrawBox+0x66>
    return;
 8001ae2:	bf00      	nop
  }
}
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b088      	sub	sp, #32
 8001aee:	af02      	add	r7, sp, #8
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	4608      	mov	r0, r1
 8001af4:	4611      	mov	r1, r2
 8001af6:	461a      	mov	r2, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	817b      	strh	r3, [r7, #10]
 8001afc:	460b      	mov	r3, r1
 8001afe:	813b      	strh	r3, [r7, #8]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001b08:	897a      	ldrh	r2, [r7, #10]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b298      	uxth	r0, r3
 8001b10:	893a      	ldrh	r2, [r7, #8]
 8001b12:	8c3b      	ldrh	r3, [r7, #32]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	893a      	ldrh	r2, [r7, #8]
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fff9 	bl	8002b18 <u8g2_IsIntersection>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d037      	beq.n	8001b9c <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	2000      	movs	r0, #0
 8001b34:	9000      	str	r0, [sp, #0]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 ff19 	bl	800296e <u8g2_DrawHVLine>
  if (h >= 2) {
 8001b3c:	8c3b      	ldrh	r3, [r7, #32]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d92d      	bls.n	8001b9e <u8g2_DrawFrame+0xb4>
    h-=2;
 8001b42:	8c3b      	ldrh	r3, [r7, #32]
 8001b44:	3b02      	subs	r3, #2
 8001b46:	843b      	strh	r3, [r7, #32]
    y++;
 8001b48:	893b      	ldrh	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001b4e:	8c3b      	ldrh	r3, [r7, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01a      	beq.n	8001b8a <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001b54:	8c3b      	ldrh	r3, [r7, #32]
 8001b56:	893a      	ldrh	r2, [r7, #8]
 8001b58:	8979      	ldrh	r1, [r7, #10]
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	9000      	str	r0, [sp, #0]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 ff05 	bl	800296e <u8g2_DrawHVLine>
      x+=w;
 8001b64:	897a      	ldrh	r2, [r7, #10]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4413      	add	r3, r2
 8001b6a:	817b      	strh	r3, [r7, #10]
      x--;
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001b72:	8c3b      	ldrh	r3, [r7, #32]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	2001      	movs	r0, #1
 8001b7a:	9000      	str	r0, [sp, #0]
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fef6 	bl	800296e <u8g2_DrawHVLine>
      y+=h;
 8001b82:	893a      	ldrh	r2, [r7, #8]
 8001b84:	8c3b      	ldrh	r3, [r7, #32]
 8001b86:	4413      	add	r3, r2
 8001b88:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	893a      	ldrh	r2, [r7, #8]
 8001b8e:	8af9      	ldrh	r1, [r7, #22]
 8001b90:	2000      	movs	r0, #0
 8001b92:	9000      	str	r0, [sp, #0]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 feea 	bl	800296e <u8g2_DrawHVLine>
 8001b9a:	e000      	b.n	8001b9e <u8g2_DrawFrame+0xb4>
    return;
 8001b9c:	bf00      	nop
  }
}
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	7c1b      	ldrb	r3, [r3, #16]
 8001bb2:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 f8b8 	bl	8005d48 <memset>
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
 8001bec:	4613      	mov	r3, r2
 8001bee:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	7c1b      	ldrb	r3, [r3, #16]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	89ba      	ldrh	r2, [r7, #12]
 8001c08:	fb12 f303 	smulbb	r3, r2, r3
 8001c0c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001c0e:	89bb      	ldrh	r3, [r7, #12]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001c1c:	7bf9      	ldrb	r1, [r7, #15]
 8001c1e:	78ba      	ldrb	r2, [r7, #2]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f001 fcfe 	bl	800362a <u8x8_DrawTile>
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c48:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c50:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	7c5b      	ldrb	r3, [r3, #17]
 8001c58:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001c5a:	7bba      	ldrb	r2, [r7, #14]
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffbd 	bl	8001be0 <u8g2_send_tile_row>
    src_row++;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d203      	bcs.n	8001c82 <u8g2_send_buffer+0x4c>
 8001c7a:	7bba      	ldrb	r2, [r7, #14]
 8001c7c:	7b3b      	ldrb	r3, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3eb      	bcc.n	8001c5a <u8g2_send_buffer+0x24>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffcf 	bl	8001c36 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f001 fd17 	bl	80036cc <u8x8_RefreshDisplay>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	701a      	strb	r2, [r3, #0]
  return buf;
 8001cb6:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	200001f8 	.word	0x200001f8

08001cc8 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8001cde:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f001 fd53 	bl	800378c <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 8001ce6:	f107 0313 	add.w	r3, r7, #19
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffdc 	bl	8001ca8 <u8g2_m_16_4_f>
 8001cf0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001cf2:	7cfa      	ldrb	r2, [r7, #19]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 8001cfa:	6979      	ldr	r1, [r7, #20]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 fff5 	bl	8002cec <u8g2_SetupBuffer>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	080032dd 	.word	0x080032dd
 8001d10:	08003549 	.word	0x08003549
 8001d14:	08002b6f 	.word	0x08002b6f

08001d18 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	81fb      	strh	r3, [r7, #14]
    font++;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7ff ffc5 	bl	8001d18 <u8g2_font_get_byte>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7ff ffbd 	bl	8001d18 <u8g2_font_get_byte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001da6:	2102      	movs	r1, #2
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f7ff ffb5 	bl	8001d18 <u8g2_font_get_byte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001db6:	2103      	movs	r1, #3
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f7ff ffad 	bl	8001d18 <u8g2_font_get_byte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff ffa5 	bl	8001d18 <u8g2_font_get_byte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff ff9d 	bl	8001d18 <u8g2_font_get_byte>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001de6:	2106      	movs	r1, #6
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff ff95 	bl	8001d18 <u8g2_font_get_byte>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001df6:	2107      	movs	r1, #7
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f7ff ff8d 	bl	8001d18 <u8g2_font_get_byte>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001e06:	2108      	movs	r1, #8
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f7ff ff85 	bl	8001d18 <u8g2_font_get_byte>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001e16:	2109      	movs	r1, #9
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7ff ff7d 	bl	8001d18 <u8g2_font_get_byte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001e26:	210a      	movs	r1, #10
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f7ff ff75 	bl	8001d18 <u8g2_font_get_byte>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b25a      	sxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001e36:	210b      	movs	r1, #11
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f7ff ff6d 	bl	8001d18 <u8g2_font_get_byte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001e46:	210c      	movs	r1, #12
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ff65 	bl	8001d18 <u8g2_font_get_byte>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001e56:	210d      	movs	r1, #13
 8001e58:	6838      	ldr	r0, [r7, #0]
 8001e5a:	f7ff ff5d 	bl	8001d18 <u8g2_font_get_byte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001e66:	210e      	movs	r1, #14
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f7ff ff55 	bl	8001d18 <u8g2_font_get_byte>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b25a      	sxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001e76:	210f      	movs	r1, #15
 8001e78:	6838      	ldr	r0, [r7, #0]
 8001e7a:	f7ff ff4d 	bl	8001d18 <u8g2_font_get_byte>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b25a      	sxtb	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001e86:	2110      	movs	r1, #16
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f7ff ff45 	bl	8001d18 <u8g2_font_get_byte>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001e96:	2111      	movs	r1, #17
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f7ff ff4f 	bl	8001d3c <u8g2_font_get_word>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001ea6:	2113      	movs	r1, #19
 8001ea8:	6838      	ldr	r0, [r7, #0]
 8001eaa:	f7ff ff47 	bl	8001d3c <u8g2_font_get_word>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001eb6:	2115      	movs	r1, #21
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f7ff ff3f 	bl	8001d3c <u8g2_font_get_word>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	82da      	strh	r2, [r3, #22]
#endif
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	7b7b      	ldrb	r3, [r7, #13]
 8001eec:	fa42 f303 	asr.w	r3, r2, r3
 8001ef0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001ef2:	7b7b      	ldrb	r3, [r7, #13]
 8001ef4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001ef6:	7bba      	ldrb	r2, [r7, #14]
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	4413      	add	r3, r2
 8001efc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	d91a      	bls.n	8001f3a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001f04:	2308      	movs	r3, #8
 8001f06:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001f08:	7b3a      	ldrb	r2, [r7, #12]
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	3b08      	subs	r3, #8
 8001f38:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7bba      	ldrb	r2, [r7, #14]
 8001f54:	731a      	strb	r2, [r3, #12]
  return val;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffaa 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001f88:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	73fb      	strb	r3, [r7, #15]
  return v;
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001faa:	b490      	push	{r4, r7}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4623      	mov	r3, r4
 8001fba:	80fb      	strh	r3, [r7, #6]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	717b      	strb	r3, [r7, #5]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	713b      	strb	r3, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d014      	beq.n	8001ff8 <u8g2_add_vector_y+0x4e>
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	dc19      	bgt.n	8002006 <u8g2_add_vector_y+0x5c>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <u8g2_add_vector_y+0x32>
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d007      	beq.n	8001fea <u8g2_add_vector_y+0x40>
 8001fda:	e014      	b.n	8002006 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001fdc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	80fb      	strh	r3, [r7, #6]
      break;
 8001fe8:	e014      	b.n	8002014 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001fea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
      break;
 8001ff6:	e00d      	b.n	8002014 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001ff8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	80fb      	strh	r3, [r7, #6]
      break;
 8002004:	e006      	b.n	8002014 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8002006:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800200a:	b29b      	uxth	r3, r3
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	80fb      	strh	r3, [r7, #6]
      break;      
 8002012:	bf00      	nop
  }
  return dy;
 8002014:	88fb      	ldrh	r3, [r7, #6]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bc90      	pop	{r4, r7}
 800201e:	4770      	bx	lr

08002020 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002020:	b490      	push	{r4, r7}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4623      	mov	r3, r4
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	4603      	mov	r3, r0
 8002034:	717b      	strb	r3, [r7, #5]
 8002036:	460b      	mov	r3, r1
 8002038:	713b      	strb	r3, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d014      	beq.n	800206e <u8g2_add_vector_x+0x4e>
 8002044:	2b02      	cmp	r3, #2
 8002046:	dc19      	bgt.n	800207c <u8g2_add_vector_x+0x5c>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <u8g2_add_vector_x+0x32>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d007      	beq.n	8002060 <u8g2_add_vector_x+0x40>
 8002050:	e014      	b.n	800207c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8002052:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002056:	b29a      	uxth	r2, r3
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4413      	add	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
      break;
 800205e:	e014      	b.n	800208a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8002060:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002064:	b29b      	uxth	r3, r3
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	80fb      	strh	r3, [r7, #6]
      break;
 800206c:	e00d      	b.n	800208a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800206e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002072:	b29b      	uxth	r3, r3
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	80fb      	strh	r3, [r7, #6]
      break;
 800207a:	e006      	b.n	800208a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800207c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002080:	b29a      	uxth	r2, r3
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4413      	add	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
      break;      
 8002088:	bf00      	nop
  }
  return dx;
 800208a:	88fb      	ldrh	r3, [r7, #6]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bc90      	pop	{r4, r7}
 8002094:	4770      	bx	lr

08002096 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b088      	sub	sp, #32
 800209a:	af02      	add	r7, sp, #8
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
 80020a2:	4613      	mov	r3, r2
 80020a4:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3360      	adds	r3, #96	@ 0x60
 80020aa:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020b6:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020be:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	7d7b      	ldrb	r3, [r7, #21]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80020d4:	7dfa      	ldrb	r2, [r7, #23]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d201      	bcs.n	80020e0 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	88db      	ldrh	r3, [r3, #6]
 80020ea:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80020ec:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80020f0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	7c1b      	ldrb	r3, [r3, #16]
 80020f8:	89b8      	ldrh	r0, [r7, #12]
 80020fa:	f7ff ff91 	bl	8002020 <u8g2_add_vector_x>
 80020fe:	4603      	mov	r3, r0
 8002100:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002102:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002106:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	7c1b      	ldrb	r3, [r3, #16]
 800210e:	8978      	ldrh	r0, [r7, #10]
 8002110:	f7ff ff4b 	bl	8001faa <u8g2_add_vector_y>
 8002114:	4603      	mov	r3, r0
 8002116:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002118:	78bb      	ldrb	r3, [r7, #2]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	7b9a      	ldrb	r2, [r3, #14]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002128:	7dbb      	ldrb	r3, [r7, #22]
 800212a:	b298      	uxth	r0, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	7c1b      	ldrb	r3, [r3, #16]
 8002130:	897a      	ldrh	r2, [r7, #10]
 8002132:	89b9      	ldrh	r1, [r7, #12]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4603      	mov	r3, r0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fc18 	bl	800296e <u8g2_DrawHVLine>
 800213e:	e013      	b.n	8002168 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	7b5b      	ldrb	r3, [r3, #13]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	7bda      	ldrb	r2, [r3, #15]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8002152:	7dbb      	ldrb	r3, [r7, #22]
 8002154:	b298      	uxth	r0, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	7c1b      	ldrb	r3, [r3, #16]
 800215a:	897a      	ldrh	r2, [r7, #10]
 800215c:	89b9      	ldrh	r1, [r7, #12]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4603      	mov	r3, r0
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fc03 	bl	800296e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002168:	7dfa      	ldrb	r2, [r7, #23]
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	429a      	cmp	r2, r3
 800216e:	d309      	bcc.n	8002184 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002170:	7dfa      	ldrb	r2, [r7, #23]
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	757b      	strb	r3, [r7, #21]
    ly++;
 800217c:	7d3b      	ldrb	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002182:	e79d      	b.n	80020c0 <u8g2_font_decode_len+0x2a>
      break;
 8002184:	bf00      	nop
  }
  lx += cnt;
 8002186:	7d7a      	ldrb	r2, [r7, #21]
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	4413      	add	r3, r2
 800218c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800218e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8002196:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	725a      	strb	r2, [r3, #9]
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3360      	adds	r3, #96	@ 0x60
 80021b4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80021c8:	4619      	mov	r1, r3
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff fe7f 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80021de:	4619      	mov	r1, r3
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff fe74 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b25a      	sxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	7b9b      	ldrb	r3, [r3, #14]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	73da      	strb	r2, [r3, #15]
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3360      	adds	r3, #96	@ 0x60
 8002222:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffbd 	bl	80021a6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002232:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800223a:	4619      	mov	r1, r3
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7ff fe91 	bl	8001f64 <u8g2_font_decode_get_signed_bits>
 8002242:	4603      	mov	r3, r0
 8002244:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800224c:	4619      	mov	r1, r3
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff fe88 	bl	8001f64 <u8g2_font_decode_get_signed_bits>
 8002254:	4603      	mov	r3, r0
 8002256:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800225e:	4619      	mov	r1, r3
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff fe7f 	bl	8001f64 <u8g2_font_decode_get_signed_bits>
 8002266:	4603      	mov	r3, r0
 8002268:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f340 80d7 	ble.w	8002424 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	8898      	ldrh	r0, [r3, #4]
 800227a:	7cfa      	ldrb	r2, [r7, #19]
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	4413      	add	r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	425b      	negs	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	b25a      	sxtb	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	7c1b      	ldrb	r3, [r3, #16]
 800228c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002290:	f7ff fec6 	bl	8002020 <u8g2_add_vector_x>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	88d8      	ldrh	r0, [r3, #6]
 80022a0:	7cfa      	ldrb	r2, [r7, #19]
 80022a2:	7c7b      	ldrb	r3, [r7, #17]
 80022a4:	4413      	add	r3, r2
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	425b      	negs	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	7c1b      	ldrb	r3, [r3, #16]
 80022b2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80022b6:	f7ff fe78 	bl	8001faa <u8g2_add_vector_y>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	889b      	ldrh	r3, [r3, #4]
 80022c6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80022ce:	8bfb      	ldrh	r3, [r7, #30]
 80022d0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	7c1b      	ldrb	r3, [r3, #16]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d85a      	bhi.n	8002394 <u8g2_font_decode_glyph+0x180>
 80022de:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <u8g2_font_decode_glyph+0xd0>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002311 	.word	0x08002311
 80022ec:	08002339 	.word	0x08002339
 80022f0:	0800236d 	.word	0x0800236d
      {
	case 0:
	    x1 += decode->glyph_width;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	8bbb      	ldrh	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002306:	b29a      	uxth	r2, r3
 8002308:	8b3b      	ldrh	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	833b      	strh	r3, [r7, #24]
	    break;
 800230e:	e041      	b.n	8002394 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002314:	b29b      	uxth	r3, r3
 8002316:	8bfa      	ldrh	r2, [r7, #30]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800231c:	8bfb      	ldrh	r3, [r7, #30]
 800231e:	3301      	adds	r3, #1
 8002320:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002322:	8bbb      	ldrh	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800232e:	b29a      	uxth	r2, r3
 8002330:	8b3b      	ldrh	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	833b      	strh	r3, [r7, #24]
	    break;
 8002336:	e02d      	b.n	8002394 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800233e:	b29b      	uxth	r3, r3
 8002340:	8bfa      	ldrh	r2, [r7, #30]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002346:	8bfb      	ldrh	r3, [r7, #30]
 8002348:	3301      	adds	r3, #1
 800234a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800234c:	8bbb      	ldrh	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8002352:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002356:	b29b      	uxth	r3, r3
 8002358:	8b7a      	ldrh	r2, [r7, #26]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800235e:	8b7b      	ldrh	r3, [r7, #26]
 8002360:	3301      	adds	r3, #1
 8002362:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002364:	8b3b      	ldrh	r3, [r7, #24]
 8002366:	3301      	adds	r3, #1
 8002368:	833b      	strh	r3, [r7, #24]
	    break;	  
 800236a:	e013      	b.n	8002394 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800236c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002370:	b29a      	uxth	r2, r3
 8002372:	8bbb      	ldrh	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800237e:	b29b      	uxth	r3, r3
 8002380:	8b7a      	ldrh	r2, [r7, #26]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	3301      	adds	r3, #1
 800238a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800238c:	8b3b      	ldrh	r3, [r7, #24]
 800238e:	3301      	adds	r3, #1
 8002390:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002392:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002394:	8bb8      	ldrh	r0, [r7, #28]
 8002396:	8b7a      	ldrh	r2, [r7, #26]
 8002398:	8bf9      	ldrh	r1, [r7, #30]
 800239a:	8b3b      	ldrh	r3, [r7, #24]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	4603      	mov	r3, r0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fbb9 	bl	8002b18 <u8g2_IsIntersection>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <u8g2_font_decode_glyph+0x19e>
	return d;
 80023ac:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80023b0:	e03a      	b.n	8002428 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2200      	movs	r2, #0
 80023bc:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80023c4:	4619      	mov	r1, r3
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff fd81 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80023d6:	4619      	mov	r1, r3
 80023d8:	6978      	ldr	r0, [r7, #20]
 80023da:	f7ff fd78 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 80023de:	4603      	mov	r3, r0
 80023e0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2200      	movs	r2, #0
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fe54 	bl	8002096 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fe4e 	bl	8002096 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80023fa:	2101      	movs	r1, #1
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff fd66 	bl	8001ece <u8g2_font_decode_get_unsigned_bits>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ec      	bne.n	80023e2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800240e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002412:	429a      	cmp	r2, r3
 8002414:	dd00      	ble.n	8002418 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002416:	e7d2      	b.n	80023be <u8g2_font_decode_glyph+0x1aa>
	break;
 8002418:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	7b9a      	ldrb	r2, [r3, #14]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002424:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3317      	adds	r3, #23
 8002446:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	2bff      	cmp	r3, #255	@ 0xff
 800244c:	d82a      	bhi.n	80024a4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d907      	bls.n	8002464 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800245a:	461a      	mov	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4413      	add	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e009      	b.n	8002478 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	2b40      	cmp	r3, #64	@ 0x40
 8002468:	d906      	bls.n	8002478 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8002470:	461a      	mov	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	4413      	add	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04e      	beq.n	8002520 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4293      	cmp	r3, r2
 800248c:	d102      	bne.n	8002494 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3302      	adds	r3, #2
 8002492:	e049      	b.n	8002528 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80024a2:	e7e9      	b.n	8002478 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80024aa:	461a      	mov	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80024b6:	2100      	movs	r1, #0
 80024b8:	6938      	ldr	r0, [r7, #16]
 80024ba:	f7ff fc3f 	bl	8001d3c <u8g2_font_get_word>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80024c8:	2102      	movs	r1, #2
 80024ca:	6938      	ldr	r0, [r7, #16]
 80024cc:	f7ff fc36 	bl	8001d3c <u8g2_font_get_word>
 80024d0:	4603      	mov	r3, r0
 80024d2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	3304      	adds	r3, #4
 80024d8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80024da:	89fa      	ldrh	r2, [r7, #14]
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3e9      	bcc.n	80024b6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80024fc:	89fb      	ldrh	r3, [r7, #14]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002502:	89fa      	ldrh	r2, [r7, #14]
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	429a      	cmp	r2, r3
 8002508:	d102      	bne.n	8002510 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3303      	adds	r3, #3
 800250e:	e00b      	b.n	8002528 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3302      	adds	r3, #2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800251e:	e7e0      	b.n	80024e2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002520:	bf00      	nop
 8002522:	e000      	b.n	8002526 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002524:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	817b      	strh	r3, [r7, #10]
 8002542:	460b      	mov	r3, r1
 8002544:	813b      	strh	r3, [r7, #8]
 8002546:	4613      	mov	r3, r2
 8002548:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	897a      	ldrh	r2, [r7, #10]
 8002552:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4619      	mov	r1, r3
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7ff ff64 	bl	8002430 <u8g2_font_get_glyph_data>
 8002568:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002570:	6939      	ldr	r1, [r7, #16]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fe4e 	bl	8002214 <u8g2_font_decode_glyph>
 8002578:	4603      	mov	r3, r0
 800257a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800257c:	8afb      	ldrh	r3, [r7, #22]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d833      	bhi.n	8002614 <u8g2_DrawGlyph+0x8c>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <u8g2_DrawGlyph+0x2c>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d9 	.word	0x080025d9
 80025bc:	080025ed 	.word	0x080025ed
 80025c0:	08002601 	.word	0x08002601
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	4798      	blx	r3
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	893b      	ldrh	r3, [r7, #8]
 80025d2:	4413      	add	r3, r2
 80025d4:	813b      	strh	r3, [r7, #8]
      break;
 80025d6:	e01d      	b.n	8002614 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	4798      	blx	r3
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	897b      	ldrh	r3, [r7, #10]
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	817b      	strh	r3, [r7, #10]
      break;
 80025ea:	e013      	b.n	8002614 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	4798      	blx	r3
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	813b      	strh	r3, [r7, #8]
      break;
 80025fe:	e009      	b.n	8002614 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	4798      	blx	r3
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	897b      	ldrh	r3, [r7, #10]
 800260e:	4413      	add	r3, r2
 8002610:	817b      	strh	r3, [r7, #10]
      break;
 8002612:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	893a      	ldrh	r2, [r7, #8]
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff ff88 	bl	8002530 <u8g2_font_draw_glyph>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop

0800262c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	4613      	mov	r3, r2
 800263c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fc9a 	bl	8002f78 <u8x8_utf8_init>
  sum = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	4611      	mov	r1, r2
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	4798      	blx	r3
 8002656:	4603      	mov	r3, r0
 8002658:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800265a:	8abb      	ldrh	r3, [r7, #20]
 800265c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002660:	4293      	cmp	r3, r2
 8002662:	d038      	beq.n	80026d6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3301      	adds	r3, #1
 8002668:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800266a:	8abb      	ldrh	r3, [r7, #20]
 800266c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002670:	4293      	cmp	r3, r2
 8002672:	d0e9      	beq.n	8002648 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002674:	8abb      	ldrh	r3, [r7, #20]
 8002676:	893a      	ldrh	r2, [r7, #8]
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff ff84 	bl	8002588 <u8g2_DrawGlyph>
 8002680:	4603      	mov	r3, r0
 8002682:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800268a:	2b03      	cmp	r3, #3
 800268c:	d81e      	bhi.n	80026cc <u8g2_draw_string+0xa0>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <u8g2_draw_string+0x68>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026af 	.word	0x080026af
 800269c:	080026b9 	.word	0x080026b9
 80026a0:	080026c3 	.word	0x080026c3
      {
	case 0:
	  x += delta;
 80026a4:	897a      	ldrh	r2, [r7, #10]
 80026a6:	8a7b      	ldrh	r3, [r7, #18]
 80026a8:	4413      	add	r3, r2
 80026aa:	817b      	strh	r3, [r7, #10]
	  break;
 80026ac:	e00e      	b.n	80026cc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80026ae:	893a      	ldrh	r2, [r7, #8]
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	4413      	add	r3, r2
 80026b4:	813b      	strh	r3, [r7, #8]
	  break;
 80026b6:	e009      	b.n	80026cc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80026b8:	897a      	ldrh	r2, [r7, #10]
 80026ba:	8a7b      	ldrh	r3, [r7, #18]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	817b      	strh	r3, [r7, #10]
	  break;
 80026c0:	e004      	b.n	80026cc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	8a7b      	ldrh	r3, [r7, #18]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	813b      	strh	r3, [r7, #8]
	  break;
 80026ca:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80026cc:	8afa      	ldrh	r2, [r7, #22]
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	4413      	add	r3, r2
 80026d2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80026d4:	e7b8      	b.n	8002648 <u8g2_draw_string+0x1c>
      break;
 80026d6:	bf00      	nop
    }
  }
  return sum;
 80026d8:	8afb      	ldrh	r3, [r7, #22]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	4613      	mov	r3, r2
 80026f4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <u8g2_DrawStr+0x30>)
 80026fa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80026fc:	893a      	ldrh	r2, [r7, #8]
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff ff92 	bl	800262c <u8g2_draw_string>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08002f95 	.word	0x08002f95

08002718 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	4613      	mov	r3, r2
 8002728:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <u8g2_DrawUTF8+0x30>)
 800272e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff ff78 	bl	800262c <u8g2_draw_string>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	08002fc3 	.word	0x08002fc3

0800274c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05d      	beq.n	8002818 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04d      	beq.n	800281a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002784:	2b01      	cmp	r3, #1
 8002786:	d11c      	bne.n	80027c2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002794:	429a      	cmp	r2, r3
 8002796:	da05      	bge.n	80027a4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dd32      	ble.n	800281a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80027c0:	e02b      	b.n	800281a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80027d0:	4619      	mov	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80027d8:	440b      	add	r3, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	da0d      	bge.n	80027fa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	b25a      	sxtb	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002806:	429a      	cmp	r2, r3
 8002808:	dd07      	ble.n	800281a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002816:	e000      	b.n	800281a <u8g2_UpdateRefHeight+0xce>
    return;
 8002818:	bf00      	nop
  }  
}
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <u8g2_SetFontPosBaseline+0x1c>)
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	08002825 	.word	0x08002825

0800285c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d00b      	beq.n	8002888 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3374      	adds	r3, #116	@ 0x74
 800287a:	6839      	ldr	r1, [r7, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fa7d 	bl	8001d7c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff62 	bl	800274c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	460b      	mov	r3, r1
 80028a0:	80fb      	strh	r3, [r7, #6]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	8abb      	ldrh	r3, [r7, #20]
 80028b6:	4413      	add	r3, r2
 80028b8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80028ba:	8afa      	ldrh	r2, [r7, #22]
 80028bc:	8abb      	ldrh	r3, [r7, #20]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90b      	bls.n	80028da <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80028c2:	8afa      	ldrh	r2, [r7, #22]
 80028c4:	88bb      	ldrh	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d205      	bcs.n	80028d6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	82bb      	strh	r3, [r7, #20]
      b--;
 80028ce:	8abb      	ldrh	r3, [r7, #20]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	82bb      	strh	r3, [r7, #20]
 80028d4:	e001      	b.n	80028da <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80028da:	8afa      	ldrh	r2, [r7, #22]
 80028dc:	88bb      	ldrh	r3, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d301      	bcc.n	80028e6 <u8g2_clip_intersection2+0x56>
    return 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e01c      	b.n	8002920 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80028e6:	8aba      	ldrh	r2, [r7, #20]
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d801      	bhi.n	80028f2 <u8g2_clip_intersection2+0x62>
    return 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e016      	b.n	8002920 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80028f2:	8afa      	ldrh	r2, [r7, #22]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d201      	bcs.n	80028fe <u8g2_clip_intersection2+0x6e>
    a = c;
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80028fe:	8aba      	ldrh	r2, [r7, #20]
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d901      	bls.n	800290a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002906:	88bb      	ldrh	r3, [r7, #4]
 8002908:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8afa      	ldrh	r2, [r7, #22]
 800290e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002910:	8aba      	ldrh	r2, [r7, #20]
 8002912:	8afb      	ldrh	r3, [r7, #22]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	8aba      	ldrh	r2, [r7, #20]
 800291c:	801a      	strh	r2, [r3, #0]
  return 1;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b087      	sub	sp, #28
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800294a:	893a      	ldrh	r2, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002954:	88f8      	ldrh	r0, [r7, #6]
 8002956:	893a      	ldrh	r2, [r7, #8]
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4603      	mov	r3, r0
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	47a0      	blx	r4
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}

0800296e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800296e:	b590      	push	{r4, r7, lr}
 8002970:	b087      	sub	sp, #28
 8002972:	af02      	add	r7, sp, #8
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	4608      	mov	r0, r1
 8002978:	4611      	mov	r1, r2
 800297a:	461a      	mov	r2, r3
 800297c:	4603      	mov	r3, r0
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	460b      	mov	r3, r1
 8002982:	813b      	strh	r3, [r7, #8]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d075      	beq.n	8002a7e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d072      	beq.n	8002a7e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d91a      	bls.n	80029d4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800299e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d109      	bne.n	80029ba <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80029a6:	897a      	ldrh	r2, [r7, #10]
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	817b      	strh	r3, [r7, #10]
	  x++;
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	817b      	strh	r3, [r7, #10]
 80029b8:	e00c      	b.n	80029d4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80029ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d108      	bne.n	80029d4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80029c2:	893a      	ldrh	r2, [r7, #8]
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	813b      	strh	r3, [r7, #8]
	  y++;
 80029cc:	893b      	ldrh	r3, [r7, #8]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80029d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80029e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11a      	bne.n	8002a1e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d83b      	bhi.n	8002a6c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80029fa:	893b      	ldrh	r3, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d937      	bls.n	8002a70 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002a0c:	1db9      	adds	r1, r7, #6
 8002a0e:	f107 000a 	add.w	r0, r7, #10
 8002a12:	f7ff ff3d 	bl	8002890 <u8g2_clip_intersection2>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11a      	bne.n	8002a52 <u8g2_DrawHVLine+0xe4>
	  return;
 8002a1c:	e02f      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d824      	bhi.n	8002a74 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d920      	bls.n	8002a78 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002a42:	1db9      	adds	r1, r7, #6
 8002a44:	f107 0008 	add.w	r0, r7, #8
 8002a48:	f7ff ff22 	bl	8002890 <u8g2_clip_intersection2>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d014      	beq.n	8002a7c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	689c      	ldr	r4, [r3, #8]
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	893a      	ldrh	r2, [r7, #8]
 8002a5c:	88f8      	ldrh	r0, [r7, #6]
 8002a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4603      	mov	r3, r0
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	47a0      	blx	r4
 8002a6a:	e008      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
	  return;
 8002a6c:	bf00      	nop
 8002a6e:	e006      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
	  return;
 8002a70:	bf00      	nop
 8002a72:	e004      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
	  return;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
	  return;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <u8g2_DrawHVLine+0x110>
	  return;
 8002a7c:	bf00      	nop
    }
}
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d903      	bls.n	8002aa6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002ab2:	b490      	push	{r4, r7}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4604      	mov	r4, r0
 8002aba:	4608      	mov	r0, r1
 8002abc:	4611      	mov	r1, r2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	80fb      	strh	r3, [r7, #6]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	80bb      	strh	r3, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	88bb      	ldrh	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d20d      	bcs.n	8002af4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002ad8:	883a      	ldrh	r2, [r7, #0]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d901      	bls.n	8002ae4 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e014      	b.n	8002b0e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	883b      	ldrh	r3, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d901      	bls.n	8002af0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e00e      	b.n	8002b0e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e00c      	b.n	8002b0e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002af4:	883a      	ldrh	r2, [r7, #0]
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d907      	bls.n	8002b0c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	883b      	ldrh	r3, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d901      	bls.n	8002b08 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e002      	b.n	8002b0e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002b0c:	2300      	movs	r3, #0
    }
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc90      	pop	{r4, r7}
 8002b16:	4770      	bx	lr

08002b18 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002b3e:	8b3b      	ldrh	r3, [r7, #24]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	f7ff ffb6 	bl	8002ab2 <u8g2_is_intersection_decision_tree>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <u8g2_IsIntersection+0x38>
    return 0; 
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e00a      	b.n	8002b66 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	897a      	ldrh	r2, [r7, #10]
 8002b60:	f7ff ffa7 	bl	8002ab2 <u8g2_is_intersection_decision_tree>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b089      	sub	sp, #36	@ 0x24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	817b      	strh	r3, [r7, #10]
 8002b80:	460b      	mov	r3, r1
 8002b82:	813b      	strh	r3, [r7, #8]
 8002b84:	4613      	mov	r3, r2
 8002b86:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002b8c:	7efb      	ldrb	r3, [r7, #27]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002b98:	7e3a      	ldrb	r2, [r7, #24]
 8002b9a:	7efb      	ldrb	r3, [r7, #27]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d801      	bhi.n	8002bb8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002bb4:	7e3b      	ldrb	r3, [r7, #24]
 8002bb6:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002bc2:	7e3b      	ldrb	r3, [r7, #24]
 8002bc4:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002bc6:	893b      	ldrh	r3, [r7, #8]
 8002bc8:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	7c1b      	ldrb	r3, [r3, #16]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	fb13 f302 	smulbb	r3, r3, r2
 8002be0:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be6:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002be8:	8afb      	ldrh	r3, [r7, #22]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d117      	bne.n	8002c30 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	7ebb      	ldrb	r3, [r7, #26]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	7e7b      	ldrb	r3, [r7, #25]
 8002c14:	4053      	eors	r3, r2
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	61fb      	str	r3, [r7, #28]
	len--;
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e8      	bne.n	8002c00 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002c2e:	e038      	b.n	8002ca2 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	7ebb      	ldrb	r3, [r7, #26]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	7e7b      	ldrb	r3, [r7, #25]
 8002c44:	4053      	eors	r3, r2
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002c4c:	7efb      	ldrb	r3, [r7, #27]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002c52:	7efb      	ldrb	r3, [r7, #27]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	76fb      	strb	r3, [r7, #27]
      len--;
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002c60:	7efb      	ldrb	r3, [r7, #27]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d114      	bne.n	8002c90 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d801      	bhi.n	8002c80 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d008      	beq.n	8002c9c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	767b      	strb	r3, [r7, #25]
 8002c8e:	e005      	b.n	8002c9c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002c90:	7ebb      	ldrb	r3, [r7, #26]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002c96:	7e7b      	ldrb	r3, [r7, #25]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1c6      	bne.n	8002c30 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ffa9 	bl	8002cae <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fd6d 	bl	800283c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d86:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	89fa      	ldrh	r2, [r7, #14]
 8002d92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	7c1b      	ldrb	r3, [r3, #16]
 8002d98:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	89fa      	ldrh	r2, [r7, #14]
 8002da4:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002dac:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002dae:	89fb      	ldrh	r3, [r7, #14]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	89fa      	ldrh	r2, [r7, #14]
 8002db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dc0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002dca:	4413      	add	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	7c52      	ldrb	r2, [r2, #17]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	dd07      	ble.n	8002de4 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	7c5b      	ldrb	r3, [r3, #17]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	8a9a      	ldrh	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	8ada      	ldrh	r2, [r3, #22]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af02      	add	r7, sp, #8
 8002e38:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe5e 	bl	8002b18 <u8g2_IsIntersection>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002e6a:	e03b      	b.n	8002ee4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d205      	bcs.n	8002e90 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d905      	bls.n	8002eac <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d205      	bcs.n	8002ec8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d905      	bls.n	8002ee4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff3c 	bl	8002d72 <u8g2_update_dimension_common>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff7b 	bl	8002e32 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002f5e:	88f8      	ldrh	r0, [r7, #6]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	7e3b      	ldrb	r3, [r7, #24]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4603      	mov	r3, r0
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff fcde 	bl	800292c <u8g2_draw_hv_line_2dir>
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <u8x8_ascii_next+0x18>
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	2b0a      	cmp	r3, #10
 8002faa:	d102      	bne.n	8002fb2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fb0:	e001      	b.n	8002fb6 <u8x8_ascii_next+0x22>
  return b;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	b29b      	uxth	r3, r3
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <u8x8_utf8_next+0x18>
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b0a      	cmp	r3, #10
 8002fd8:	d102      	bne.n	8002fe0 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fde:	e06e      	b.n	80030be <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d145      	bne.n	8003076 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	2bfb      	cmp	r3, #251	@ 0xfb
 8002fee:	d908      	bls.n	8003002 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2205      	movs	r2, #5
 8002ff4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 1;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	70fb      	strb	r3, [r7, #3]
 8003000:	e032      	b.n	8003068 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	2bf7      	cmp	r3, #247	@ 0xf7
 8003006:	d908      	bls.n	800301a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2204      	movs	r2, #4
 800300c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 3;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	70fb      	strb	r3, [r7, #3]
 8003018:	e026      	b.n	8003068 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	2bef      	cmp	r3, #239	@ 0xef
 800301e:	d908      	bls.n	8003032 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 7;      
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	70fb      	strb	r3, [r7, #3]
 8003030:	e01a      	b.n	8003068 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	2bdf      	cmp	r3, #223	@ 0xdf
 8003036:	d908      	bls.n	800304a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 15;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	70fb      	strb	r3, [r7, #3]
 8003048:	e00e      	b.n	8003068 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	2bbf      	cmp	r3, #191	@ 0xbf
 800304e:	d908      	bls.n	8003062 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 0x01f;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	70fb      	strb	r3, [r7, #3]
 8003060:	e002      	b.n	8003068 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	b29b      	uxth	r3, r3
 8003066:	e02a      	b.n	80030be <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003070:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003074:	e023      	b.n	80030be <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800307c:	3b01      	subs	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8c1b      	ldrh	r3, [r3, #32]
 800308a:	019b      	lsls	r3, r3, #6
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003098:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8c1a      	ldrh	r2, [r3, #32]
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80030b4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80030b8:	e001      	b.n	80030be <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8c1b      	ldrh	r3, [r3, #32]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	460b      	mov	r3, r1
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691c      	ldr	r4, [r3, #16]
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2117      	movs	r1, #23
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	47a0      	blx	r4
 80030e6:	4603      	mov	r3, r0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80030fc:	1cfb      	adds	r3, r7, #3
 80030fe:	461a      	mov	r2, r3
 8003100:	2101      	movs	r1, #1
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffe1 	bl	80030ca <u8x8_byte_SendBytes>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691c      	ldr	r4, [r3, #16]
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	2118      	movs	r1, #24
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	47a0      	blx	r4
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}

08003132 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691c      	ldr	r4, [r3, #16]
 800313e:	2300      	movs	r3, #0
 8003140:	2200      	movs	r2, #0
 8003142:	2119      	movs	r1, #25
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	47a0      	blx	r4
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}

08003152 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68dc      	ldr	r4, [r3, #12]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	2300      	movs	r3, #0
 8003166:	2115      	movs	r1, #21
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	47a0      	blx	r4
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}

08003176 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68dc      	ldr	r4, [r3, #12]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	2300      	movs	r3, #0
 800318a:	2116      	movs	r1, #22
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	47a0      	blx	r4
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800319a:	b590      	push	{r4, r7, lr}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	460b      	mov	r3, r1
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68dc      	ldr	r4, [r3, #12]
 80031ac:	7afa      	ldrb	r2, [r7, #11]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2117      	movs	r1, #23
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	47a0      	blx	r4
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68dc      	ldr	r4, [r3, #12]
 80031cc:	2300      	movs	r3, #0
 80031ce:	2200      	movs	r2, #0
 80031d0:	2118      	movs	r1, #24
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	47a0      	blx	r4
 80031d6:	4603      	mov	r3, r0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}

080031e0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68dc      	ldr	r4, [r3, #12]
 80031ec:	2300      	movs	r3, #0
 80031ee:	2200      	movs	r2, #0
 80031f0:	2119      	movs	r1, #25
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	47a0      	blx	r4
 80031f6:	4603      	mov	r3, r0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd90      	pop	{r4, r7, pc}

08003200 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	73fb      	strb	r3, [r7, #15]
    data++;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2bfe      	cmp	r3, #254	@ 0xfe
 800321a:	d031      	beq.n	8003280 <u8x8_cad_SendSequence+0x80>
 800321c:	2bfe      	cmp	r3, #254	@ 0xfe
 800321e:	dc3d      	bgt.n	800329c <u8x8_cad_SendSequence+0x9c>
 8003220:	2b19      	cmp	r3, #25
 8003222:	dc3b      	bgt.n	800329c <u8x8_cad_SendSequence+0x9c>
 8003224:	2b18      	cmp	r3, #24
 8003226:	da23      	bge.n	8003270 <u8x8_cad_SendSequence+0x70>
 8003228:	2b16      	cmp	r3, #22
 800322a:	dc02      	bgt.n	8003232 <u8x8_cad_SendSequence+0x32>
 800322c:	2b15      	cmp	r3, #21
 800322e:	da03      	bge.n	8003238 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003230:	e034      	b.n	800329c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003232:	2b17      	cmp	r3, #23
 8003234:	d00e      	beq.n	8003254 <u8x8_cad_SendSequence+0x54>
	return;
 8003236:	e031      	b.n	800329c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68dc      	ldr	r4, [r3, #12]
 8003242:	7bba      	ldrb	r2, [r7, #14]
 8003244:	7bf9      	ldrb	r1, [r7, #15]
 8003246:	2300      	movs	r3, #0
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	47a0      	blx	r4
	  data++;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	603b      	str	r3, [r7, #0]
	  break;
 8003252:	e022      	b.n	800329a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800325a:	f107 030e 	add.w	r3, r7, #14
 800325e:	461a      	mov	r2, r3
 8003260:	2101      	movs	r1, #1
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff99 	bl	800319a <u8x8_cad_SendData>
	  data++;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	3301      	adds	r3, #1
 800326c:	603b      	str	r3, [r7, #0]
	  break;
 800326e:	e014      	b.n	800329a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68dc      	ldr	r4, [r3, #12]
 8003274:	7bf9      	ldrb	r1, [r7, #15]
 8003276:	2300      	movs	r3, #0
 8003278:	2200      	movs	r2, #0
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	47a0      	blx	r4
	  break;
 800327e:	e00c      	b.n	800329a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	461a      	mov	r2, r3
 800328a:	2129      	movs	r1, #41	@ 0x29
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fa2c 	bl	80036ea <u8x8_gpio_call>
	  data++;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	603b      	str	r3, [r7, #0]
	  break;
 8003298:	bf00      	nop
    cmd = *data;
 800329a:	e7b6      	b.n	800320a <u8x8_cad_SendSequence+0xa>
	return;
 800329c:	bf00      	nop
    }
  }
}
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	460b      	mov	r3, r1
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff2d 	bl	8003112 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80032b8:	2140      	movs	r1, #64	@ 0x40
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff ff18 	bl	80030f0 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691c      	ldr	r4, [r3, #16]
 80032c4:	7afa      	ldrb	r2, [r7, #11]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2117      	movs	r1, #23
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff2f 	bl	8003132 <u8x8_byte_EndTransfer>
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	72fb      	strb	r3, [r7, #11]
 80032ea:	4613      	mov	r3, r2
 80032ec:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	3b14      	subs	r3, #20
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d86e      	bhi.n	80033d4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80032f6:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003393 	.word	0x08003393
 8003300:	08003315 	.word	0x08003315
 8003304:	08003343 	.word	0x08003343
 8003308:	0800334f 	.word	0x0800334f
 800330c:	080033b7 	.word	0x080033b7
 8003310:	080033bf 	.word	0x080033bf
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8003314:	4b33      	ldr	r3, [pc, #204]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <u8x8_cad_ssd13xx_fast_i2c+0x46>
    	  u8x8_byte_EndTransfer(u8x8);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff ff08 	bl	8003132 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fef5 	bl	8003112 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8003328:	2100      	movs	r1, #0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff fee0 	bl	80030f0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003330:	7abb      	ldrb	r3, [r7, #10]
 8003332:	4619      	mov	r1, r3
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fedb 	bl	80030f0 <u8x8_byte_SendByte>
      in_transfer = 1;
 800333a:	4b2a      	ldr	r3, [pc, #168]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8003340:	e04a      	b.n	80033d8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8003342:	7abb      	ldrb	r3, [r7, #10]
 8003344:	4619      	mov	r1, r3
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff fed2 	bl	80030f0 <u8x8_byte_SendByte>
      break;      
 800334c:	e044      	b.n	80033d8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800334e:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff feeb 	bl	8003132 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003360:	e00a      	b.n	8003378 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	2118      	movs	r1, #24
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff ff9c 	bl	80032a4 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800336c:	7abb      	ldrb	r3, [r7, #10]
 800336e:	3b18      	subs	r3, #24
 8003370:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3318      	adds	r3, #24
 8003376:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003378:	7abb      	ldrb	r3, [r7, #10]
 800337a:	2b18      	cmp	r3, #24
 800337c:	d8f1      	bhi.n	8003362 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800337e:	7abb      	ldrb	r3, [r7, #10]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4619      	mov	r1, r3
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff ff8d 	bl	80032a4 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800338a:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
      break;
 8003390:	e022      	b.n	80033d8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003398:	2bff      	cmp	r3, #255	@ 0xff
 800339a:	d103      	bne.n	80033a4 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    	  u8x8->i2c_address = 0x078;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2278      	movs	r2, #120	@ 0x78
 80033a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691c      	ldr	r4, [r3, #16]
 80033a8:	7aba      	ldrb	r2, [r7, #10]
 80033aa:	7af9      	ldrb	r1, [r7, #11]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	47a0      	blx	r4
 80033b2:	4603      	mov	r3, r0
 80033b4:	e011      	b.n	80033da <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
      break;
 80033bc:	e00c      	b.n	80033d8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff feb3 	bl	8003132 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	e001      	b.n	80033d8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200003f8 	.word	0x200003f8

080033e8 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	72fb      	strb	r3, [r7, #11]
 80033f6:	4613      	mov	r3, r2
 80033f8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	3b0a      	subs	r3, #10
 80033fe:	2b05      	cmp	r3, #5
 8003400:	f200 8090 	bhi.w	8003524 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <u8x8_d_ssd1306_128x32_generic+0x24>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003425 	.word	0x08003425
 8003410:	08003435 	.word	0x08003435
 8003414:	08003525 	.word	0x08003525
 8003418:	0800344f 	.word	0x0800344f
 800341c:	08003481 	.word	0x08003481
 8003420:	080034a1 	.word	0x080034a1
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f8c3 	bl	80035b0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 800342a:	4942      	ldr	r1, [pc, #264]	@ (8003534 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff fee7 	bl	8003200 <u8x8_cad_SendSequence>
      break;
 8003432:	e079      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003434:	7abb      	ldrb	r3, [r7, #10]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 800343a:	493f      	ldr	r1, [pc, #252]	@ (8003538 <u8x8_d_ssd1306_128x32_generic+0x150>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff fedf 	bl	8003200 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8003442:	e071      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8003444:	493d      	ldr	r1, [pc, #244]	@ (800353c <u8x8_d_ssd1306_128x32_generic+0x154>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff feda 	bl	8003200 <u8x8_cad_SendSequence>
      break;
 800344c:	e06c      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800344e:	7abb      	ldrb	r3, [r7, #10]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8003454:	493a      	ldr	r1, [pc, #232]	@ (8003540 <u8x8_d_ssd1306_128x32_generic+0x158>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fed2 	bl	8003200 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	7c9a      	ldrb	r2, [r3, #18]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003468:	e05e      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 800346a:	4936      	ldr	r1, [pc, #216]	@ (8003544 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fec7 	bl	8003200 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	7cda      	ldrb	r2, [r3, #19]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800347e:	e053      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fe9d 	bl	80031c0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003486:	2181      	movs	r1, #129	@ 0x81
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fe62 	bl	8003152 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800348e:	7abb      	ldrb	r3, [r7, #10]
 8003490:	4619      	mov	r1, r3
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff fe6f 	bl	8003176 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff fea1 	bl	80031e0 <u8x8_cad_EndTransfer>
      break;
 800349e:	e043      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fe8d 	bl	80031c0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	795b      	ldrb	r3, [r3, #5]
 80034aa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	4413      	add	r3, r2
 80034bc:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4619      	mov	r1, r3
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff fe40 	bl	8003152 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	4619      	mov	r1, r3
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fe38 	bl	8003152 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	799b      	ldrb	r3, [r3, #6]
 80034e6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fe2f 	bl	8003152 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003500:	7dbb      	ldrb	r3, [r7, #22]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4619      	mov	r1, r3
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe45 	bl	800319a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8003510:	7abb      	ldrb	r3, [r7, #10]
 8003512:	3b01      	subs	r3, #1
 8003514:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003516:	7abb      	ldrb	r3, [r7, #10]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1eb      	bne.n	80034f4 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fe5f 	bl	80031e0 <u8x8_cad_EndTransfer>
      break;
 8003522:	e001      	b.n	8003528 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	0800854c 	.word	0x0800854c
 8003538:	08008584 	.word	0x08008584
 800353c:	0800858c 	.word	0x0800858c
 8003540:	08008594 	.word	0x08008594
 8003544:	0800859c 	.word	0x0800859c

08003548 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	72fb      	strb	r3, [r7, #11]
 8003556:	4613      	mov	r3, r2
 8003558:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d105      	bne.n	800356c <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8003560:	4908      	ldr	r1, [pc, #32]	@ (8003584 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f810 	bl	8003588 <u8x8_d_helper_display_setup_memory>
      return 1;
 8003568:	2301      	movs	r3, #1
 800356a:	e006      	b.n	800357a <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 800356c:	7aba      	ldrb	r2, [r7, #10]
 800356e:	7af9      	ldrb	r1, [r7, #11]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff38 	bl	80033e8 <u8x8_d_ssd1306_128x32_generic>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	080085a4 	.word	0x080085a4

08003588 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	7c9a      	ldrb	r2, [r3, #18]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695c      	ldr	r4, [r3, #20]
 80035bc:	2300      	movs	r3, #0
 80035be:	2200      	movs	r2, #0
 80035c0:	2128      	movs	r1, #40	@ 0x28
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68dc      	ldr	r4, [r3, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	2200      	movs	r2, #0
 80035ce:	2114      	movs	r1, #20
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80035d4:	2201      	movs	r2, #1
 80035d6:	214b      	movs	r1, #75	@ 0x4b
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f886 	bl	80036ea <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	791b      	ldrb	r3, [r3, #4]
 80035e4:	461a      	mov	r2, r3
 80035e6:	2129      	movs	r1, #41	@ 0x29
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f87e 	bl	80036ea <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	214b      	movs	r1, #75	@ 0x4b
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f879 	bl	80036ea <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	791b      	ldrb	r3, [r3, #4]
 80035fe:	461a      	mov	r2, r3
 8003600:	2129      	movs	r1, #41	@ 0x29
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f871 	bl	80036ea <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003608:	2201      	movs	r2, #1
 800360a:	214b      	movs	r1, #75	@ 0x4b
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f86c 	bl	80036ea <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	795b      	ldrb	r3, [r3, #5]
 8003618:	461a      	mov	r2, r3
 800361a:	2129      	movs	r1, #41	@ 0x29
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f864 	bl	80036ea <u8x8_gpio_call>
}    
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}

0800362a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800362a:	b590      	push	{r4, r7, lr}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	4608      	mov	r0, r1
 8003634:	4611      	mov	r1, r2
 8003636:	461a      	mov	r2, r3
 8003638:	4603      	mov	r3, r0
 800363a:	70fb      	strb	r3, [r7, #3]
 800363c:	460b      	mov	r3, r1
 800363e:	70bb      	strb	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003648:	78bb      	ldrb	r3, [r7, #2]
 800364a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689c      	ldr	r4, [r3, #8]
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	2201      	movs	r2, #1
 800365e:	210f      	movs	r1, #15
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	47a0      	blx	r4
 8003664:	4603      	mov	r3, r0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bd90      	pop	{r4, r7, pc}

0800366e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800366e:	b590      	push	{r4, r7, lr}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689c      	ldr	r4, [r3, #8]
 800367a:	2300      	movs	r3, #0
 800367c:	2200      	movs	r2, #0
 800367e:	2109      	movs	r1, #9
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	47a0      	blx	r4
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bd90      	pop	{r4, r7, pc}

0800368c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689c      	ldr	r4, [r3, #8]
 8003698:	2300      	movs	r3, #0
 800369a:	2200      	movs	r2, #0
 800369c:	210a      	movs	r1, #10
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80036aa:	b590      	push	{r4, r7, lr}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689c      	ldr	r4, [r3, #8]
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	2300      	movs	r3, #0
 80036be:	210b      	movs	r1, #11
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	47a0      	blx	r4
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd90      	pop	{r4, r7, pc}

080036cc <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689c      	ldr	r4, [r3, #8]
 80036d8:	2300      	movs	r3, #0
 80036da:	2200      	movs	r2, #0
 80036dc:	2110      	movs	r1, #16
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	47a0      	blx	r4
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80036ea:	b590      	push	{r4, r7, lr}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
 80036f6:	4613      	mov	r3, r2
 80036f8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695c      	ldr	r4, [r3, #20]
 80036fe:	78ba      	ldrb	r2, [r7, #2]
 8003700:	78f9      	ldrb	r1, [r7, #3]
 8003702:	2300      	movs	r3, #0
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	47a0      	blx	r4
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}

08003710 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	72fb      	strb	r3, [r7, #11]
 800371e:	4613      	mov	r3, r2
 8003720:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a11      	ldr	r2, [pc, #68]	@ (8003788 <u8x8_SetupDefaults+0x58>)
 8003742:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <u8x8_SetupDefaults+0x58>)
 8003748:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <u8x8_SetupDefaults+0x58>)
 800374e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <u8x8_SetupDefaults+0x58>)
 8003754:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	22ff      	movs	r2, #255	@ 0xff
 8003778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	08003711 	.word	0x08003711

0800378c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ffc8 	bl	8003730 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff58 	bl	800366e <u8x8_SetupMemory>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <u8x8_byte_hw_i2c>:
extern I2C_HandleTypeDef hi2c3;

static uint8_t u8g2Buffer[25] = {0};
static uint8_t u8g2BufferCounter = 0;

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	72fb      	strb	r3, [r7, #11]
 80037d6:	4613      	mov	r3, r2
 80037d8:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 80037da:	7afb      	ldrb	r3, [r7, #11]
 80037dc:	3b14      	subs	r3, #20
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d845      	bhi.n	800386e <u8x8_byte_hw_i2c+0xa6>
 80037e2:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <u8x8_byte_hw_i2c+0x20>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	08003873 	.word	0x08003873
 80037ec:	0800386f 	.word	0x0800386f
 80037f0:	0800386f 	.word	0x0800386f
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	08003841 	.word	0x08003841
 80037fc:	08003849 	.word	0x08003849
 8003800:	0800386f 	.word	0x0800386f
 8003804:	0800386f 	.word	0x0800386f
 8003808:	0800386f 	.word	0x0800386f
 800380c:	0800386f 	.word	0x0800386f
 8003810:	0800386f 	.word	0x0800386f
 8003814:	0800386f 	.word	0x0800386f
 8003818:	08003873 	.word	0x08003873
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SEND:
        	memcpy(u8g2Buffer + u8g2BufferCounter, arg_ptr, arg_int);
 800381c:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <u8x8_byte_hw_i2c+0xb8>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b18      	ldr	r3, [pc, #96]	@ (8003884 <u8x8_byte_hw_i2c+0xbc>)
 8003824:	4413      	add	r3, r2
 8003826:	7aba      	ldrb	r2, [r7, #10]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fad0 	bl	8005dd0 <memcpy>
        	u8g2BufferCounter += arg_int;
 8003830:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <u8x8_byte_hw_i2c+0xb8>)
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	7abb      	ldrb	r3, [r7, #10]
 8003836:	4413      	add	r3, r2
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <u8x8_byte_hw_i2c+0xb8>)
 800383c:	701a      	strb	r2, [r3, #0]
        	break;
 800383e:	e019      	b.n	8003874 <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_SET_DC:

        	break;
        case U8X8_MSG_BYTE_START_TRANSFER:
        	u8g2BufferCounter = 0;
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <u8x8_byte_hw_i2c+0xb8>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
        	break;
 8003846:	e015      	b.n	8003874 <u8x8_byte_hw_i2c+0xac>
        case U8X8_MSG_BYTE_END_TRANSFER:
        	return  HAL_OK ==  HAL_I2C_Master_Transmit(&hi2c3, (0x3C << 1), (uint8_t*)u8g2Buffer, u8g2BufferCounter, HAL_MAX_DELAY);
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <u8x8_byte_hw_i2c+0xb8>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <u8x8_byte_hw_i2c+0xbc>)
 8003858:	2178      	movs	r1, #120	@ 0x78
 800385a:	480b      	ldr	r0, [pc, #44]	@ (8003888 <u8x8_byte_hw_i2c+0xc0>)
 800385c:	f000 fe2c 	bl	80044b8 <HAL_I2C_Master_Transmit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e003      	b.n	8003876 <u8x8_byte_hw_i2c+0xae>
        default:
        	return 0;
 800386e:	2300      	movs	r3, #0
 8003870:	e001      	b.n	8003876 <u8x8_byte_hw_i2c+0xae>
            break;
 8003872:	bf00      	nop
    }

    return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000415 	.word	0x20000415
 8003884:	200003fc 	.word	0x200003fc
 8003888:	20000078 	.word	0x20000078

0800388c <u8x8_gpio_and_delay_stm32>:
    }

    return 1;
}

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	72fb      	strb	r3, [r7, #11]
 800389a:	4613      	mov	r3, r2
 800389c:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80038a2:	dc0d      	bgt.n	80038c0 <u8x8_gpio_and_delay_stm32+0x34>
 80038a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80038a6:	da08      	bge.n	80038ba <u8x8_gpio_and_delay_stm32+0x2e>
 80038a8:	2b28      	cmp	r3, #40	@ 0x28
 80038aa:	d008      	beq.n	80038be <u8x8_gpio_and_delay_stm32+0x32>
 80038ac:	2b29      	cmp	r3, #41	@ 0x29
 80038ae:	d107      	bne.n	80038c0 <u8x8_gpio_and_delay_stm32+0x34>
    	case U8X8_MSG_GPIO_AND_DELAY_INIT:
    		break;
        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
 80038b0:	7abb      	ldrb	r3, [r7, #10]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f9b8 	bl	8003c28 <HAL_Delay>
            break;
 80038b8:	e002      	b.n	80038c0 <u8x8_gpio_and_delay_stm32+0x34>
        case U8X8_MSG_DELAY_NANO:
        case U8X8_MSG_DELAY_100NANO:
            __NOP();
 80038ba:	bf00      	nop
            break;
 80038bc:	e000      	b.n	80038c0 <u8x8_gpio_and_delay_stm32+0x34>
    		break;
 80038be:	bf00      	nop
    }

    return 1;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <drawBatteryIndicator>:
 */

#include "ui_controls.h"
#include "resources.h"

void drawBatteryIndicator(u8g2_t *u8g2, int x, int y, uint8_t level) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	70fb      	strb	r3, [r7, #3]
    u8g2_DrawFrame(u8g2, x, y, 16, 8);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	b299      	uxth	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	2308      	movs	r3, #8
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2310      	movs	r3, #16
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7fe f8fe 	bl	8001aea <u8g2_DrawFrame>
    u8g2_DrawBox(u8g2, x + 16, y + 2, 2, 4);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3310      	adds	r3, #16
 80038f4:	b299      	uxth	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3302      	adds	r3, #2
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	2304      	movs	r3, #4
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2302      	movs	r3, #2
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7fe f8ba 	bl	8001a7e <u8g2_DrawBox>
    int fillWidth = (level * 14) / 100;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4a0e      	ldr	r2, [pc, #56]	@ (8003950 <drawBatteryIndicator+0x84>)
 8003916:	fb82 1203 	smull	r1, r2, r2, r3
 800391a:	1152      	asrs	r2, r2, #5
 800391c:	17db      	asrs	r3, r3, #31
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    if (fillWidth > 0) u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	dd0e      	ble.n	8003946 <drawBatteryIndicator+0x7a>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	b29b      	uxth	r3, r3
 800392c:	3301      	adds	r3, #1
 800392e:	b299      	uxth	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	b29b      	uxth	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	b29b      	uxth	r3, r3
 800393c:	2006      	movs	r0, #6
 800393e:	9000      	str	r0, [sp, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7fe f89c 	bl	8001a7e <u8g2_DrawBox>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	51eb851f 	.word	0x51eb851f

08003954 <constrain>:

int constrain(int x, int a, int b) {
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
    return (x < a) ? ((a < b) ? a : b) : x;
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	da05      	bge.n	8003974 <constrain+0x20>
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4293      	cmp	r3, r2
 800396e:	bfa8      	it	ge
 8003970:	4613      	movge	r3, r2
 8003972:	e000      	b.n	8003976 <constrain+0x22>
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <drawSignalStrengthIndicator>:

void drawSignalStrengthIndicator(u8g2_t *u8g2, int x, int y, int dBm, bool isInverted) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	@ 0x30
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]

    dBm = constrain(dBm, -80, 5);
 8003992:	2205      	movs	r2, #5
 8003994:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 8003998:	6838      	ldr	r0, [r7, #0]
 800399a:	f7ff ffdb 	bl	8003954 <constrain>
 800399e:	6038      	str	r0, [r7, #0]

    int signalRange = 85;
 80039a0:	2355      	movs	r3, #85	@ 0x55
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
    int shiftedDBm = dBm + 80;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	3350      	adds	r3, #80	@ 0x50
 80039a8:	623b      	str	r3, [r7, #32]
    int fillPercentage = (shiftedDBm * 100) / signalRange;
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2264      	movs	r2, #100	@ 0x64
 80039ae:	fb03 f202 	mul.w	r2, r3, r2
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80039b8:	61fb      	str	r3, [r7, #28]


    int fillWidth = (fillPercentage * 60) / 100;
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4a36      	ldr	r2, [pc, #216]	@ (8003aa0 <drawSignalStrengthIndicator+0x11c>)
 80039c6:	fb82 1203 	smull	r1, r2, r2, r3
 80039ca:	1152      	asrs	r2, r2, #5
 80039cc:	17db      	asrs	r3, r3, #31
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	61bb      	str	r3, [r7, #24]
    fillWidth = constrain(fillWidth, 0, 60);
 80039d2:	223c      	movs	r2, #60	@ 0x3c
 80039d4:	2100      	movs	r1, #0
 80039d6:	69b8      	ldr	r0, [r7, #24]
 80039d8:	f7ff ffbc 	bl	8003954 <constrain>
 80039dc:	61b8      	str	r0, [r7, #24]


    uint8_t currentColor = u8g2_GetDrawColor(u8g2);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80039e4:	75fb      	strb	r3, [r7, #23]

    if (fillWidth > 0) {
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dd50      	ble.n	8003a8e <drawSignalStrengthIndicator+0x10a>
        if (isInverted) {
 80039ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02f      	beq.n	8003a54 <drawSignalStrengthIndicator+0xd0>

            u8g2_SetDrawColor(u8g2, 0);
 80039f4:	2100      	movs	r1, #0
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff f844 	bl	8002a84 <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	b299      	uxth	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	2308      	movs	r3, #8
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2340      	movs	r3, #64	@ 0x40
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7fe f86d 	bl	8001aea <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, 60, 6);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	b299      	uxth	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	2306      	movs	r3, #6
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	233c      	movs	r3, #60	@ 0x3c
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7fe f829 	bl	8001a7e <u8g2_DrawBox>
            u8g2_SetDrawColor(u8g2, 1);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff f828 	bl	8002a84 <u8g2_SetDrawColor>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2006      	movs	r0, #6
 8003a4a:	9000      	str	r0, [sp, #0]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7fe f816 	bl	8001a7e <u8g2_DrawBox>
 8003a52:	e01c      	b.n	8003a8e <drawSignalStrengthIndicator+0x10a>
        } else {

            u8g2_SetDrawColor(u8g2, 1);
 8003a54:	2101      	movs	r1, #1
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7ff f814 	bl	8002a84 <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	b299      	uxth	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	2308      	movs	r3, #8
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2340      	movs	r3, #64	@ 0x40
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7fe f83d 	bl	8001aea <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	b299      	uxth	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2006      	movs	r0, #6
 8003a86:	9000      	str	r0, [sp, #0]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7fd fff8 	bl	8001a7e <u8g2_DrawBox>
        }
    }


    u8g2_SetDrawColor(u8g2, currentColor);
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7fe fff6 	bl	8002a84 <u8g2_SetDrawColor>
}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	@ 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	51eb851f 	.word	0x51eb851f

08003aa4 <drawSoundIcon>:

void drawSoundIcon(u8g2_t *u8g2, uint8_t x, uint8_t y, bool enabled) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	70fb      	strb	r3, [r7, #3]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	70bb      	strb	r3, [r7, #2]
 8003aba:	4613      	mov	r3, r2
 8003abc:	707b      	strb	r3, [r7, #1]
    if (enabled) {
 8003abe:	787b      	ldrb	r3, [r7, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <drawSoundIcon+0x3a>
        u8g2_DrawXBMP(u8g2, x, y, sound_off_image_width, sound_off_image_height, sound_off_image_bits);
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	78bb      	ldrb	r3, [r7, #2]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <drawSoundIcon+0x5c>)
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd ff8e 	bl	80019f8 <u8g2_DrawXBMP>
    } else {
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
    }
}
 8003adc:	e00b      	b.n	8003af6 <drawSoundIcon+0x52>
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	b299      	uxth	r1, r3
 8003ae2:	78bb      	ldrb	r3, [r7, #2]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <drawSoundIcon+0x60>)
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2308      	movs	r3, #8
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2310      	movs	r3, #16
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fd ff81 	bl	80019f8 <u8g2_DrawXBMP>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	080068a8 	.word	0x080068a8
 8003b04:	08006898 	.word	0x08006898

08003b08 <drawAlertIcon>:

void drawAlertIcon(u8g2_t *u8g2, uint8_t x, uint8_t y) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(u8g2, 0);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe ffb2 	bl	8002a84 <u8g2_SetDrawColor>
    u8g2_DrawXBMP(u8g2, x, y, alert_width, alert_height, alert_bits);
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	b299      	uxth	r1, r3
 8003b24:	78bb      	ldrb	r3, [r7, #2]
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <drawAlertIcon+0x38>)
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	230e      	movs	r3, #14
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd ff60 	bl	80019f8 <u8g2_DrawXBMP>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	080067b8 	.word	0x080067b8

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <HAL_Init+0x40>)
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <HAL_Init+0x40>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b60:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <HAL_Init+0x40>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f000 f94f 	bl	8003e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f000 f808 	bl	8003b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b78:	f7fd fa78 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b90:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_InitTick+0x54>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <HAL_InitTick+0x58>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f967 	bl	8003e7a <HAL_SYSTICK_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00e      	b.n	8003bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d80a      	bhi.n	8003bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bc4:	f000 f92f 	bl	8003e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc8:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_InitTick+0x5c>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000008 	.word	0x20000008
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_IncTick+0x20>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_IncTick+0x24>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <HAL_IncTick+0x24>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000008 	.word	0x20000008
 8003c0c:	20000418 	.word	0x20000418

08003c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_GetTick+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000418 	.word	0x20000418

08003c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7ff ffee 	bl	8003c10 <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c40:	d005      	beq.n	8003c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_Delay+0x44>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c4e:	bf00      	nop
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d8f7      	bhi.n	8003c50 <HAL_Delay+0x28>
  {
  }
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000008 	.word	0x20000008

08003c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	60d3      	str	r3, [r2, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	f003 0307 	and.w	r3, r3, #7
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db0b      	blt.n	8003cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4907      	ldr	r1, [pc, #28]	@ (8003d0c <__NVIC_EnableIRQ+0x38>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e100 	.word	0xe000e100

08003d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db0a      	blt.n	8003d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	490c      	ldr	r1, [pc, #48]	@ (8003d5c <__NVIC_SetPriority+0x4c>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	0112      	lsls	r2, r2, #4
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	440b      	add	r3, r1
 8003d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d38:	e00a      	b.n	8003d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <__NVIC_SetPriority+0x50>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3b04      	subs	r3, #4
 8003d48:	0112      	lsls	r2, r2, #4
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	761a      	strb	r2, [r3, #24]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f1c3 0307 	rsb	r3, r3, #7
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf28      	it	cs
 8003d82:	2304      	movcs	r3, #4
 8003d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d902      	bls.n	8003d94 <NVIC_EncodePriority+0x30>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3b03      	subs	r3, #3
 8003d92:	e000      	b.n	8003d96 <NVIC_EncodePriority+0x32>
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	401a      	ands	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43d9      	mvns	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	4313      	orrs	r3, r2
         );
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3724      	adds	r7, #36	@ 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ddc:	d301      	bcc.n	8003de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003de2:	4a0a      	ldr	r2, [pc, #40]	@ (8003e0c <SysTick_Config+0x40>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dea:	210f      	movs	r1, #15
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003df0:	f7ff ff8e 	bl	8003d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <SysTick_Config+0x40>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dfa:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <SysTick_Config+0x40>)
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000e010 	.word	0xe000e010

08003e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff29 	bl	8003c70 <__NVIC_SetPriorityGrouping>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e38:	f7ff ff3e 	bl	8003cb8 <__NVIC_GetPriorityGrouping>
 8003e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6978      	ldr	r0, [r7, #20]
 8003e44:	f7ff ff8e 	bl	8003d64 <NVIC_EncodePriority>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff5d 	bl	8003d10 <__NVIC_SetPriority>
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff31 	bl	8003cd4 <__NVIC_EnableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ffa2 	bl	8003dcc <SysTick_Config>
 8003e88:	4603      	mov	r3, r0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e159      	b.n	8004164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 8148 	bne.w	800415e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d005      	beq.n	8003ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d130      	bne.n	8003f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a2 	beq.w	800415e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b57      	ldr	r3, [pc, #348]	@ (800417c <HAL_GPIO_Init+0x2e8>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	4a56      	ldr	r2, [pc, #344]	@ (800417c <HAL_GPIO_Init+0x2e8>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004028:	6453      	str	r3, [r2, #68]	@ 0x44
 800402a:	4b54      	ldr	r3, [pc, #336]	@ (800417c <HAL_GPIO_Init+0x2e8>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <HAL_GPIO_Init+0x2ec>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a49      	ldr	r2, [pc, #292]	@ (8004184 <HAL_GPIO_Init+0x2f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x202>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a48      	ldr	r2, [pc, #288]	@ (8004188 <HAL_GPIO_Init+0x2f4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x1fe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a47      	ldr	r2, [pc, #284]	@ (800418c <HAL_GPIO_Init+0x2f8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x1fa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a46      	ldr	r2, [pc, #280]	@ (8004190 <HAL_GPIO_Init+0x2fc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x1f6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a45      	ldr	r2, [pc, #276]	@ (8004194 <HAL_GPIO_Init+0x300>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x1f2>
 8004082:	2304      	movs	r3, #4
 8004084:	e008      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004086:	2307      	movs	r3, #7
 8004088:	e006      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408a:	2303      	movs	r3, #3
 800408c:	e004      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408e:	2302      	movs	r3, #2
 8004090:	e002      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004096:	2300      	movs	r3, #0
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f002 0203 	and.w	r2, r2, #3
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4093      	lsls	r3, r2
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a8:	4935      	ldr	r1, [pc, #212]	@ (8004180 <HAL_GPIO_Init+0x2ec>)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3302      	adds	r3, #2
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b6:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <HAL_GPIO_Init+0x304>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040da:	4a2f      	ldr	r2, [pc, #188]	@ (8004198 <HAL_GPIO_Init+0x304>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004198 <HAL_GPIO_Init+0x304>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004104:	4a24      	ldr	r2, [pc, #144]	@ (8004198 <HAL_GPIO_Init+0x304>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410a:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <HAL_GPIO_Init+0x304>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800412e:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_GPIO_Init+0x304>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004134:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <HAL_GPIO_Init+0x304>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004158:	4a0f      	ldr	r2, [pc, #60]	@ (8004198 <HAL_GPIO_Init+0x304>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3301      	adds	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	f67f aea2 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3724      	adds	r7, #36	@ 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	40013800 	.word	0x40013800
 8004184:	40020000 	.word	0x40020000
 8004188:	40020400 	.word	0x40020400
 800418c:	40020800 	.word	0x40020800
 8004190:	40020c00 	.word	0x40020c00
 8004194:	40021000 	.word	0x40021000
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004216:	4a05      	ldr	r2, [pc, #20]	@ (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc fef0 	bl	8001004 <HAL_GPIO_EXTI_Callback>
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40013c00 	.word	0x40013c00

08004230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e12b      	b.n	800449a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fcda 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004294:	f001 f8da 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a81      	ldr	r2, [pc, #516]	@ (80044a4 <HAL_I2C_Init+0x274>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d807      	bhi.n	80042b4 <HAL_I2C_Init+0x84>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a80      	ldr	r2, [pc, #512]	@ (80044a8 <HAL_I2C_Init+0x278>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bf94      	ite	ls
 80042ac:	2301      	movls	r3, #1
 80042ae:	2300      	movhi	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e006      	b.n	80042c2 <HAL_I2C_Init+0x92>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a7d      	ldr	r2, [pc, #500]	@ (80044ac <HAL_I2C_Init+0x27c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0e7      	b.n	800449a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a78      	ldr	r2, [pc, #480]	@ (80044b0 <HAL_I2C_Init+0x280>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a6a      	ldr	r2, [pc, #424]	@ (80044a4 <HAL_I2C_Init+0x274>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d802      	bhi.n	8004304 <HAL_I2C_Init+0xd4>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3301      	adds	r3, #1
 8004302:	e009      	b.n	8004318 <HAL_I2C_Init+0xe8>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	4a69      	ldr	r2, [pc, #420]	@ (80044b4 <HAL_I2C_Init+0x284>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	430b      	orrs	r3, r1
 800431e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800432a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	495c      	ldr	r1, [pc, #368]	@ (80044a4 <HAL_I2C_Init+0x274>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d819      	bhi.n	800436c <HAL_I2C_Init+0x13c>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e59      	subs	r1, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fbb1 f3f3 	udiv	r3, r1, r3
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800434c:	400b      	ands	r3, r1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_I2C_Init+0x138>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e59      	subs	r1, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	e051      	b.n	800440c <HAL_I2C_Init+0x1dc>
 8004368:	2304      	movs	r3, #4
 800436a:	e04f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <HAL_I2C_Init+0x168>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	440b      	add	r3, r1
 8004382:	fbb0 f3f3 	udiv	r3, r0, r3
 8004386:	3301      	adds	r3, #1
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e012      	b.n	80043be <HAL_I2C_Init+0x18e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Init+0x196>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <HAL_I2C_Init+0x1bc>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e58      	subs	r0, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	440b      	add	r3, r1
 80043dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ea:	e00f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	0099      	lsls	r1, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800443a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6911      	ldr	r1, [r2, #16]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	430b      	orrs	r3, r1
 800444e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	000186a0 	.word	0x000186a0
 80044a8:	001e847f 	.word	0x001e847f
 80044ac:	003d08ff 	.word	0x003d08ff
 80044b0:	431bde83 	.word	0x431bde83
 80044b4:	10624dd3 	.word	0x10624dd3

080044b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	817b      	strh	r3, [r7, #10]
 80044c8:	4613      	mov	r3, r2
 80044ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff fba0 	bl	8003c10 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b20      	cmp	r3, #32
 80044dc:	f040 80e0 	bne.w	80046a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	4970      	ldr	r1, [pc, #448]	@ (80046ac <HAL_I2C_Master_Transmit+0x1f4>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f964 	bl	80047b8 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	e0d3      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x50>
 8004504:	2302      	movs	r3, #2
 8004506:	e0cc      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d007      	beq.n	800452e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800453c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2221      	movs	r2, #33	@ 0x21
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2210      	movs	r2, #16
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	893a      	ldrh	r2, [r7, #8]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a50      	ldr	r2, [pc, #320]	@ (80046b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800456e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f89c 	bl	80046b4 <I2C_MasterRequestWrite>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e08d      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800459c:	e066      	b.n	800466c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	6a39      	ldr	r1, [r7, #32]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fa22 	bl	80049ec <I2C_WaitOnTXEFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d107      	bne.n	80045c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06b      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d11b      	bne.n	8004640 <HAL_I2C_Master_Transmit+0x188>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d017      	beq.n	8004640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	6a39      	ldr	r1, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fa19 	bl	8004a7c <I2C_WaitOnBTFFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e01a      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d194      	bne.n	800459e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	00100002 	.word	0x00100002
 80046b0:	ffff0000 	.word	0xffff0000

080046b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	460b      	mov	r3, r1
 80046c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d006      	beq.n	80046de <I2C_MasterRequestWrite+0x2a>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d003      	beq.n	80046de <I2C_MasterRequestWrite+0x2a>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046dc:	d108      	bne.n	80046f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e00b      	b.n	8004708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	2b12      	cmp	r3, #18
 80046f6:	d107      	bne.n	8004708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f84f 	bl	80047b8 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472e:	d103      	bne.n	8004738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e035      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004744:	d108      	bne.n	8004758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e01b      	b.n	8004790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	11db      	asrs	r3, r3, #7
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0306 	and.w	r3, r3, #6
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f063 030f 	orn	r3, r3, #15
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	490e      	ldr	r1, [pc, #56]	@ (80047b0 <I2C_MasterRequestWrite+0xfc>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f898 	bl	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e010      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4907      	ldr	r1, [pc, #28]	@ (80047b4 <I2C_MasterRequestWrite+0x100>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f888 	bl	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	00010008 	.word	0x00010008
 80047b4:	00010002 	.word	0x00010002

080047b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c8:	e048      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047d0:	d044      	beq.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7ff fa1d 	bl	8003c10 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d139      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10d      	bne.n	800480e <I2C_WaitOnFlagUntilTimeout+0x56>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	e00c      	b.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	429a      	cmp	r2, r3
 800482c:	d116      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e023      	b.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	e00c      	b.n	800489c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d093      	beq.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ba:	e071      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d123      	bne.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e067      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800491a:	d041      	beq.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7ff f978 	bl	8003c10 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d136      	bne.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10c      	bne.n	8004956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e00b      	b.n	800496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e021      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10c      	bne.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	43da      	mvns	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4013      	ands	r3, r2
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf14      	ite	ne
 80049bc:	2301      	movne	r3, #1
 80049be:	2300      	moveq	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e00b      	b.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af6d 	bne.w	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f8:	e034      	b.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f886 	bl	8004b0c <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a10:	d028      	beq.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7ff f8fd 	bl	8003c10 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a32:	2b80      	cmp	r3, #128	@ 0x80
 8004a34:	d016      	beq.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b80      	cmp	r3, #128	@ 0x80
 8004a70:	d1c3      	bne.n	80049fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a88:	e034      	b.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f83e 	bl	8004b0c <I2C_IsAcknowledgeFailed>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e034      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa0:	d028      	beq.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7ff f8b5 	bl	8003c10 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11d      	bne.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d016      	beq.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d1c3      	bne.n	8004a8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b22:	d11b      	bne.n	8004b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f043 0204 	orr.w	r2, r3, #4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e267      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d075      	beq.n	8004c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b8a:	4b88      	ldr	r3, [pc, #544]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d00c      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b85      	ldr	r3, [pc, #532]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d112      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba2:	4b82      	ldr	r3, [pc, #520]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05b      	beq.n	8004c74 <HAL_RCC_OscConfig+0x108>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d157      	bne.n	8004c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e242      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x74>
 8004bd2:	4b76      	ldr	r3, [pc, #472]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a75      	ldr	r2, [pc, #468]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e01d      	b.n	8004c1c <HAL_RCC_OscConfig+0xb0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x98>
 8004bea:	4b70      	ldr	r3, [pc, #448]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6f      	ldr	r2, [pc, #444]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xb0>
 8004c04:	4b69      	ldr	r3, [pc, #420]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b66      	ldr	r3, [pc, #408]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a65      	ldr	r2, [pc, #404]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe fff4 	bl	8003c10 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe fff0 	bl	8003c10 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e207      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0xc0>
 8004c4a:	e014      	b.n	8004c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe ffe0 	bl	8003c10 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe ffdc 	bl	8003c10 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	@ 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1f3      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	4b51      	ldr	r3, [pc, #324]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0xe8>
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d11c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c9a:	4b44      	ldr	r3, [pc, #272]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCC_OscConfig+0x152>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1c7      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4937      	ldr	r1, [pc, #220]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	e03a      	b.n	8004d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	4b34      	ldr	r3, [pc, #208]	@ (8004db0 <HAL_RCC_OscConfig+0x244>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fe ff95 	bl	8003c10 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fe ff91 	bl	8003c10 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1a8      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	4b28      	ldr	r3, [pc, #160]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4925      	ldr	r1, [pc, #148]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	e015      	b.n	8004d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1e:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <HAL_RCC_OscConfig+0x244>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe ff74 	bl	8003c10 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fe ff70 	bl	8003c10 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e187      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d036      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b15      	ldr	r3, [pc, #84]	@ (8004db4 <HAL_RCC_OscConfig+0x248>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fe ff54 	bl	8003c10 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fe ff50 	bl	8003c10 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e167      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_OscConfig+0x240>)
 8004d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x200>
 8004d8a:	e01b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <HAL_RCC_OscConfig+0x248>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d92:	f7fe ff3d 	bl	8003c10 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	e00e      	b.n	8004db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fe ff39 	bl	8003c10 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d907      	bls.n	8004db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e150      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
 8004dac:	40023800 	.word	0x40023800
 8004db0:	42470000 	.word	0x42470000
 8004db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	4b88      	ldr	r3, [pc, #544]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ea      	bne.n	8004d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8097 	beq.w	8004f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4b81      	ldr	r3, [pc, #516]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	4b7d      	ldr	r3, [pc, #500]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	4a7c      	ldr	r2, [pc, #496]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df2:	4b7a      	ldr	r3, [pc, #488]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b77      	ldr	r3, [pc, #476]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	4b74      	ldr	r3, [pc, #464]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a73      	ldr	r2, [pc, #460]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fef9 	bl	8003c10 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fe fef5 	bl	8003c10 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e10c      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe0 <HAL_RCC_OscConfig+0x474>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2ea>
 8004e48:	4b64      	ldr	r3, [pc, #400]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4c:	4a63      	ldr	r2, [pc, #396]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e54:	e01c      	b.n	8004e90 <HAL_RCC_OscConfig+0x324>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x30c>
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a5e      	ldr	r2, [pc, #376]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0x324>
 8004e78:	4b58      	ldr	r3, [pc, #352]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a57      	ldr	r2, [pc, #348]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e84:	4b55      	ldr	r3, [pc, #340]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	4a54      	ldr	r2, [pc, #336]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004e8a:	f023 0304 	bic.w	r3, r3, #4
 8004e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fe feba 	bl	8003c10 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fe feb6 	bl	8003c10 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0cb      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	4b49      	ldr	r3, [pc, #292]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ee      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x334>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec4:	f7fe fea4 	bl	8003c10 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ecc:	f7fe fea0 	bl	8003c10 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0b5      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ee      	bne.n	8004ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef4:	4b39      	ldr	r3, [pc, #228]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	4a38      	ldr	r2, [pc, #224]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80a1 	beq.w	800504c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f0a:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d05c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d141      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fe fe74 	bl	8003c10 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fe70 	bl	8003c10 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e087      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3e:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	491b      	ldr	r1, [pc, #108]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fe49 	bl	8003c10 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f82:	f7fe fe45 	bl	8003c10 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e05c      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f94:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x416>
 8004fa0:	e054      	b.n	800504c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_RCC_OscConfig+0x478>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fe32 	bl	8003c10 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fe2e 	bl	8003c10 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e045      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCC_OscConfig+0x470>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x444>
 8004fce:	e03d      	b.n	800504c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e038      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	40007000 	.word	0x40007000
 8004fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <HAL_RCC_OscConfig+0x4ec>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d028      	beq.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d121      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d11a      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800501e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005020:	4293      	cmp	r3, r2
 8005022:	d111      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	3b01      	subs	r3, #1
 8005032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d107      	bne.n	8005048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800

0800505c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0cc      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005070:	4b68      	ldr	r3, [pc, #416]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d90c      	bls.n	8005098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b65      	ldr	r3, [pc, #404]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b63      	ldr	r3, [pc, #396]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0b8      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b0:	4b59      	ldr	r3, [pc, #356]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a58      	ldr	r2, [pc, #352]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c8:	4b53      	ldr	r3, [pc, #332]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a52      	ldr	r2, [pc, #328]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d4:	4b50      	ldr	r3, [pc, #320]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	494d      	ldr	r1, [pc, #308]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d044      	beq.n	800517c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d107      	bne.n	800510a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d119      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e07f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d003      	beq.n	800511a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511a:	4b3f      	ldr	r3, [pc, #252]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e067      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513a:	4b37      	ldr	r3, [pc, #220]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4934      	ldr	r1, [pc, #208]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800514c:	f7fe fd60 	bl	8003c10 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fe fd5c 	bl	8003c10 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e04f      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 020c 	and.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	429a      	cmp	r2, r3
 800517a:	d1eb      	bne.n	8005154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d20c      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e032      	b.n	800520a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b0:	4b19      	ldr	r3, [pc, #100]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4916      	ldr	r1, [pc, #88]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ce:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	490e      	ldr	r1, [pc, #56]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051e2:	f000 f821 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051e6:	4602      	mov	r2, r0
 80051e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	490a      	ldr	r1, [pc, #40]	@ (800521c <HAL_RCC_ClockConfig+0x1c0>)
 80051f4:	5ccb      	ldrb	r3, [r1, r3]
 80051f6:	fa22 f303 	lsr.w	r3, r2, r3
 80051fa:	4a09      	ldr	r2, [pc, #36]	@ (8005220 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051fe:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <HAL_RCC_ClockConfig+0x1c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fcc0 	bl	8003b88 <HAL_InitTick>

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023c00 	.word	0x40023c00
 8005218:	40023800 	.word	0x40023800
 800521c:	08006aac 	.word	0x08006aac
 8005220:	20000000 	.word	0x20000000
 8005224:	20000004 	.word	0x20000004

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b094      	sub	sp, #80	@ 0x50
 800522e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005240:	4b79      	ldr	r3, [pc, #484]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b08      	cmp	r3, #8
 800524a:	d00d      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x40>
 800524c:	2b08      	cmp	r3, #8
 800524e:	f200 80e1 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x34>
 8005256:	2b04      	cmp	r3, #4
 8005258:	d003      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x3a>
 800525a:	e0db      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b73      	ldr	r3, [pc, #460]	@ (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005260:	e0db      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005262:	4b73      	ldr	r3, [pc, #460]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x208>)
 8005264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005266:	e0d8      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005268:	4b6f      	ldr	r3, [pc, #444]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005270:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005272:	4b6d      	ldr	r3, [pc, #436]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d063      	beq.n	8005346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527e:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	2200      	movs	r2, #0
 8005286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005288:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005290:	633b      	str	r3, [r7, #48]	@ 0x30
 8005292:	2300      	movs	r3, #0
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
 8005296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800529a:	4622      	mov	r2, r4
 800529c:	462b      	mov	r3, r5
 800529e:	f04f 0000 	mov.w	r0, #0
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	0159      	lsls	r1, r3, #5
 80052a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ac:	0150      	lsls	r0, r2, #5
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4621      	mov	r1, r4
 80052b4:	1a51      	subs	r1, r2, r1
 80052b6:	6139      	str	r1, [r7, #16]
 80052b8:	4629      	mov	r1, r5
 80052ba:	eb63 0301 	sbc.w	r3, r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	018b      	lsls	r3, r1, #6
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052d6:	4651      	mov	r1, sl
 80052d8:	018a      	lsls	r2, r1, #6
 80052da:	4651      	mov	r1, sl
 80052dc:	ebb2 0801 	subs.w	r8, r2, r1
 80052e0:	4659      	mov	r1, fp
 80052e2:	eb63 0901 	sbc.w	r9, r3, r1
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fa:	4690      	mov	r8, r2
 80052fc:	4699      	mov	r9, r3
 80052fe:	4623      	mov	r3, r4
 8005300:	eb18 0303 	adds.w	r3, r8, r3
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	462b      	mov	r3, r5
 8005308:	eb49 0303 	adc.w	r3, r9, r3
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800531a:	4629      	mov	r1, r5
 800531c:	024b      	lsls	r3, r1, #9
 800531e:	4621      	mov	r1, r4
 8005320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005324:	4621      	mov	r1, r4
 8005326:	024a      	lsls	r2, r1, #9
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	2200      	movs	r2, #0
 8005330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005338:	f7fa ffa2 	bl	8000280 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4613      	mov	r3, r2
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	e058      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005346:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	2200      	movs	r2, #0
 800534e:	4618      	mov	r0, r3
 8005350:	4611      	mov	r1, r2
 8005352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
 800535c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	0159      	lsls	r1, r3, #5
 800536e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005372:	0150      	lsls	r0, r2, #5
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4641      	mov	r1, r8
 800537a:	ebb2 0a01 	subs.w	sl, r2, r1
 800537e:	4649      	mov	r1, r9
 8005380:	eb63 0b01 	sbc.w	fp, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005398:	ebb2 040a 	subs.w	r4, r2, sl
 800539c:	eb63 050b 	sbc.w	r5, r3, fp
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	00eb      	lsls	r3, r5, #3
 80053aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ae:	00e2      	lsls	r2, r4, #3
 80053b0:	4614      	mov	r4, r2
 80053b2:	461d      	mov	r5, r3
 80053b4:	4643      	mov	r3, r8
 80053b6:	18e3      	adds	r3, r4, r3
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	464b      	mov	r3, r9
 80053bc:	eb45 0303 	adc.w	r3, r5, r3
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ce:	4629      	mov	r1, r5
 80053d0:	028b      	lsls	r3, r1, #10
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d8:	4621      	mov	r1, r4
 80053da:	028a      	lsls	r2, r1, #10
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e2:	2200      	movs	r2, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	61fa      	str	r2, [r7, #28]
 80053e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ec:	f7fa ff48 	bl	8000280 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800540a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 8005416:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800541c:	4618      	mov	r0, r3
 800541e:	3750      	adds	r7, #80	@ 0x50
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	007a1200 	.word	0x007a1200

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	08006abc 	.word	0x08006abc

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffdc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0b5b      	lsrs	r3, r3, #13
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	08006abc 	.word	0x08006abc

0800549c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e042      	b.n	8005534 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb feb8 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	@ 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f82b 	bl	800553c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800553c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005540:	b0c0      	sub	sp, #256	@ 0x100
 8005542:	af00      	add	r7, sp, #0
 8005544:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	68d9      	ldr	r1, [r3, #12]
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	ea40 0301 	orr.w	r3, r0, r1
 8005564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	431a      	orrs	r2, r3
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	431a      	orrs	r2, r3
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005594:	f021 010c 	bic.w	r1, r1, #12
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055a2:	430b      	orrs	r3, r1
 80055a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	6999      	ldr	r1, [r3, #24]
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	ea40 0301 	orr.w	r3, r0, r1
 80055c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005808 <UART_SetConfig+0x2cc>)
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <UART_SetConfig+0xa0>
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b8d      	ldr	r3, [pc, #564]	@ (800580c <UART_SetConfig+0x2d0>)
 80055d8:	429a      	cmp	r2, r3
 80055da:	d104      	bne.n	80055e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055dc:	f7ff ff4a 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80055e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055e4:	e003      	b.n	80055ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055e6:	f7ff ff31 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 80055ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f8:	f040 810c 	bne.w	8005814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005606:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800560a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	1891      	adds	r1, r2, r2
 8005614:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005616:	415b      	adcs	r3, r3
 8005618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800561a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800561e:	4621      	mov	r1, r4
 8005620:	eb12 0801 	adds.w	r8, r2, r1
 8005624:	4629      	mov	r1, r5
 8005626:	eb43 0901 	adc.w	r9, r3, r1
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800563a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800563e:	4690      	mov	r8, r2
 8005640:	4699      	mov	r9, r3
 8005642:	4623      	mov	r3, r4
 8005644:	eb18 0303 	adds.w	r3, r8, r3
 8005648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800564c:	462b      	mov	r3, r5
 800564e:	eb49 0303 	adc.w	r3, r9, r3
 8005652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005662:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800566a:	460b      	mov	r3, r1
 800566c:	18db      	adds	r3, r3, r3
 800566e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005670:	4613      	mov	r3, r2
 8005672:	eb42 0303 	adc.w	r3, r2, r3
 8005676:	657b      	str	r3, [r7, #84]	@ 0x54
 8005678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800567c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005680:	f7fa fdfe 	bl	8000280 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b61      	ldr	r3, [pc, #388]	@ (8005810 <UART_SetConfig+0x2d4>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011c      	lsls	r4, r3, #4
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800569c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056ac:	415b      	adcs	r3, r3
 80056ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056b4:	4641      	mov	r1, r8
 80056b6:	eb12 0a01 	adds.w	sl, r2, r1
 80056ba:	4649      	mov	r1, r9
 80056bc:	eb43 0b01 	adc.w	fp, r3, r1
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d4:	4692      	mov	sl, r2
 80056d6:	469b      	mov	fp, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	eb1a 0303 	adds.w	r3, sl, r3
 80056de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056e2:	464b      	mov	r3, r9
 80056e4:	eb4b 0303 	adc.w	r3, fp, r3
 80056e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005700:	460b      	mov	r3, r1
 8005702:	18db      	adds	r3, r3, r3
 8005704:	643b      	str	r3, [r7, #64]	@ 0x40
 8005706:	4613      	mov	r3, r2
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	647b      	str	r3, [r7, #68]	@ 0x44
 800570e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005716:	f7fa fdb3 	bl	8000280 <__aeabi_uldivmod>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4611      	mov	r1, r2
 8005720:	4b3b      	ldr	r3, [pc, #236]	@ (8005810 <UART_SetConfig+0x2d4>)
 8005722:	fba3 2301 	umull	r2, r3, r3, r1
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2264      	movs	r2, #100	@ 0x64
 800572a:	fb02 f303 	mul.w	r3, r2, r3
 800572e:	1acb      	subs	r3, r1, r3
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005736:	4b36      	ldr	r3, [pc, #216]	@ (8005810 <UART_SetConfig+0x2d4>)
 8005738:	fba3 2302 	umull	r2, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005744:	441c      	add	r4, r3
 8005746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005750:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	1891      	adds	r1, r2, r2
 800575e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005760:	415b      	adcs	r3, r3
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005768:	4641      	mov	r1, r8
 800576a:	1851      	adds	r1, r2, r1
 800576c:	6339      	str	r1, [r7, #48]	@ 0x30
 800576e:	4649      	mov	r1, r9
 8005770:	414b      	adcs	r3, r1
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005780:	4659      	mov	r1, fp
 8005782:	00cb      	lsls	r3, r1, #3
 8005784:	4651      	mov	r1, sl
 8005786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800578a:	4651      	mov	r1, sl
 800578c:	00ca      	lsls	r2, r1, #3
 800578e:	4610      	mov	r0, r2
 8005790:	4619      	mov	r1, r3
 8005792:	4603      	mov	r3, r0
 8005794:	4642      	mov	r2, r8
 8005796:	189b      	adds	r3, r3, r2
 8005798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800579c:	464b      	mov	r3, r9
 800579e:	460a      	mov	r2, r1
 80057a0:	eb42 0303 	adc.w	r3, r2, r3
 80057a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057bc:	460b      	mov	r3, r1
 80057be:	18db      	adds	r3, r3, r3
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c2:	4613      	mov	r3, r2
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057d2:	f7fa fd55 	bl	8000280 <__aeabi_uldivmod>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <UART_SetConfig+0x2d4>)
 80057dc:	fba3 1302 	umull	r1, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	2164      	movs	r1, #100	@ 0x64
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	3332      	adds	r3, #50	@ 0x32
 80057ee:	4a08      	ldr	r2, [pc, #32]	@ (8005810 <UART_SetConfig+0x2d4>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	f003 0207 	and.w	r2, r3, #7
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4422      	add	r2, r4
 8005802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005804:	e106      	b.n	8005a14 <UART_SetConfig+0x4d8>
 8005806:	bf00      	nop
 8005808:	40011000 	.word	0x40011000
 800580c:	40011400 	.word	0x40011400
 8005810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005818:	2200      	movs	r2, #0
 800581a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800581e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005826:	4642      	mov	r2, r8
 8005828:	464b      	mov	r3, r9
 800582a:	1891      	adds	r1, r2, r2
 800582c:	6239      	str	r1, [r7, #32]
 800582e:	415b      	adcs	r3, r3
 8005830:	627b      	str	r3, [r7, #36]	@ 0x24
 8005832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005836:	4641      	mov	r1, r8
 8005838:	1854      	adds	r4, r2, r1
 800583a:	4649      	mov	r1, r9
 800583c:	eb43 0501 	adc.w	r5, r3, r1
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	00eb      	lsls	r3, r5, #3
 800584a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800584e:	00e2      	lsls	r2, r4, #3
 8005850:	4614      	mov	r4, r2
 8005852:	461d      	mov	r5, r3
 8005854:	4643      	mov	r3, r8
 8005856:	18e3      	adds	r3, r4, r3
 8005858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800585c:	464b      	mov	r3, r9
 800585e:	eb45 0303 	adc.w	r3, r5, r3
 8005862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005872:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005882:	4629      	mov	r1, r5
 8005884:	008b      	lsls	r3, r1, #2
 8005886:	4621      	mov	r1, r4
 8005888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800588c:	4621      	mov	r1, r4
 800588e:	008a      	lsls	r2, r1, #2
 8005890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005894:	f7fa fcf4 	bl	8000280 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4b60      	ldr	r3, [pc, #384]	@ (8005a20 <UART_SetConfig+0x4e4>)
 800589e:	fba3 2302 	umull	r2, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	011c      	lsls	r4, r3, #4
 80058a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	61b9      	str	r1, [r7, #24]
 80058c0:	415b      	adcs	r3, r3
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058c8:	4641      	mov	r1, r8
 80058ca:	1851      	adds	r1, r2, r1
 80058cc:	6139      	str	r1, [r7, #16]
 80058ce:	4649      	mov	r1, r9
 80058d0:	414b      	adcs	r3, r1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e0:	4659      	mov	r1, fp
 80058e2:	00cb      	lsls	r3, r1, #3
 80058e4:	4651      	mov	r1, sl
 80058e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ea:	4651      	mov	r1, sl
 80058ec:	00ca      	lsls	r2, r1, #3
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	4642      	mov	r2, r8
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058fc:	464b      	mov	r3, r9
 80058fe:	460a      	mov	r2, r1
 8005900:	eb42 0303 	adc.w	r3, r2, r3
 8005904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005912:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005920:	4649      	mov	r1, r9
 8005922:	008b      	lsls	r3, r1, #2
 8005924:	4641      	mov	r1, r8
 8005926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592a:	4641      	mov	r1, r8
 800592c:	008a      	lsls	r2, r1, #2
 800592e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005932:	f7fa fca5 	bl	8000280 <__aeabi_uldivmod>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4611      	mov	r1, r2
 800593c:	4b38      	ldr	r3, [pc, #224]	@ (8005a20 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2301 	umull	r2, r3, r3, r1
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2264      	movs	r2, #100	@ 0x64
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	1acb      	subs	r3, r1, r3
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	3332      	adds	r3, #50	@ 0x32
 8005950:	4a33      	ldr	r2, [pc, #204]	@ (8005a20 <UART_SetConfig+0x4e4>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800595c:	441c      	add	r4, r3
 800595e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005962:	2200      	movs	r2, #0
 8005964:	673b      	str	r3, [r7, #112]	@ 0x70
 8005966:	677a      	str	r2, [r7, #116]	@ 0x74
 8005968:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	415b      	adcs	r3, r3
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800597c:	4641      	mov	r1, r8
 800597e:	1851      	adds	r1, r2, r1
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	4649      	mov	r1, r9
 8005984:	414b      	adcs	r3, r1
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005994:	4659      	mov	r1, fp
 8005996:	00cb      	lsls	r3, r1, #3
 8005998:	4651      	mov	r1, sl
 800599a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599e:	4651      	mov	r1, sl
 80059a0:	00ca      	lsls	r2, r1, #3
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	4642      	mov	r2, r8
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ae:	464b      	mov	r3, r9
 80059b0:	460a      	mov	r2, r1
 80059b2:	eb42 0303 	adc.w	r3, r2, r3
 80059b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80059c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059d0:	4649      	mov	r1, r9
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	4641      	mov	r1, r8
 80059d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059da:	4641      	mov	r1, r8
 80059dc:	008a      	lsls	r2, r1, #2
 80059de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059e2:	f7fa fc4d 	bl	8000280 <__aeabi_uldivmod>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <UART_SetConfig+0x4e4>)
 80059ec:	fba3 1302 	umull	r1, r3, r3, r2
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	2164      	movs	r1, #100	@ 0x64
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	3332      	adds	r3, #50	@ 0x32
 80059fe:	4a08      	ldr	r2, [pc, #32]	@ (8005a20 <UART_SetConfig+0x4e4>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4422      	add	r2, r4
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	bf00      	nop
 8005a16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <_ZN13EventRecieverC1Ev>:
 *      Author: lex
 */

#include <EventReciever.h>

EventReciever::EventReciever() {
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <_ZN13EventRecieverC1Ev+0x1c>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	080085c4 	.word	0x080085c4

08005a44 <_ZN13EventRecieverD1Ev>:

EventReciever::~EventReciever() {
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	4a04      	ldr	r2, [pc, #16]	@ (8005a60 <_ZN13EventRecieverD1Ev+0x1c>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	080085c4 	.word	0x080085c4

08005a64 <_ZN11EventSenderC1Ev>:
 *      Author: lex
 */

#include <EventSender.h>

EventSender::EventSender() {
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	4a04      	ldr	r2, [pc, #16]	@ (8005a80 <_ZN11EventSenderC1Ev+0x1c>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	080085d8 	.word	0x080085d8

08005a84 <_ZN11EventSenderD1Ev>:

EventSender::~EventSender() {
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4a04      	ldr	r2, [pc, #16]	@ (8005aa0 <_ZN11EventSenderD1Ev+0x1c>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	080085d8 	.word	0x080085d8

08005aa4 <_ZN11EventSenderD0Ev>:
EventSender::~EventSender() {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
}
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ffe9 	bl	8005a84 <_ZN11EventSenderD1Ev>
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f83d 	bl	8005b34 <_ZdlPvj>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_Z14getChannelNametiPc>:
const uint16_t Band_X[8] = 					{ 4991, 5021, 5049, 5079, 5109, 5139, 5171, 5201 }; // X
const uint16_t Band_J[8] = 					{ 4867, 4883, 4921, 4958, 4995, 5032, 5069, 5099 }; // J
const uint16_t Band_K[8] = 					{ 5959, 5979, 5999, 6019, 6039, 6059, 6079, 6101 }; // K
const uint16_t Band_Z[8] = 					{ 6001, 6027, 6053, 6079, 6105, 6131, 6157, 6183 };  // Z

void getChannelName(uint16_t frequency, int receiver, char printBuffer[24]) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	4603      	mov	r3, r0
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	81fb      	strh	r3, [r7, #14]
//  if (receiver == 1) {
    for (uint8_t i = 0; i < 137; i++) {
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
 8005ad6:	e01e      	b.n	8005b16 <_Z14getChannelNametiPc+0x52>
      if (channelFreqTable[i] == frequency) {
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	4a13      	ldr	r2, [pc, #76]	@ (8005b28 <_Z14getChannelNametiPc+0x64>)
 8005adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae0:	89fa      	ldrh	r2, [r7, #14]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d114      	bne.n	8005b10 <_Z14getChannelNametiPc+0x4c>
        char band = 'A' + (i / 8); // определяем бенд (A, B, E, F, ...)
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3341      	adds	r3, #65	@ 0x41
 8005aee:	75bb      	strb	r3, [r7, #22]
        uint8_t channel = (i % 8) + 1; // номер канала в бенде
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	757b      	strb	r3, [r7, #21]
        snprintf(printBuffer, sizeof(printBuffer), " CH\:%c %i", band, channel);
 8005afc:	7dba      	ldrb	r2, [r7, #22]
 8005afe:	7d7b      	ldrb	r3, [r7, #21]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <_Z14getChannelNametiPc+0x68>)
 8005b06:	2104      	movs	r1, #4
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8c1 	bl	8005c90 <sniprintf>
        return;
 8005b0e:	e008      	b.n	8005b22 <_Z14getChannelNametiPc+0x5e>
    for (uint8_t i = 0; i < 137; i++) {
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	3301      	adds	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b88      	cmp	r3, #136	@ 0x88
 8005b1a:	d9dd      	bls.n	8005ad8 <_Z14getChannelNametiPc+0x14>
//        return;
//      }
//    }
//  }

  printBuffer = " CH:--";
 8005b1c:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <_Z14getChannelNametiPc+0x6c>)
 8005b1e:	607b      	str	r3, [r7, #4]
  return;
 8005b20:	bf00      	nop
}
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08006914 	.word	0x08006914
 8005b2c:	08006a60 	.word	0x08006a60
 8005b30:	08006a6c 	.word	0x08006a6c

08005b34 <_ZdlPvj>:
 8005b34:	f000 b800 	b.w	8005b38 <_ZdlPv>

08005b38 <_ZdlPv>:
 8005b38:	f000 b800 	b.w	8005b3c <free>

08005b3c <free>:
 8005b3c:	4b02      	ldr	r3, [pc, #8]	@ (8005b48 <free+0xc>)
 8005b3e:	4601      	mov	r1, r0
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	f000 b953 	b.w	8005dec <_free_r>
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <sbrk_aligned>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b8c <sbrk_aligned+0x40>)
 8005b50:	460c      	mov	r4, r1
 8005b52:	6831      	ldr	r1, [r6, #0]
 8005b54:	4605      	mov	r5, r0
 8005b56:	b911      	cbnz	r1, 8005b5e <sbrk_aligned+0x12>
 8005b58:	f000 f8fe 	bl	8005d58 <_sbrk_r>
 8005b5c:	6030      	str	r0, [r6, #0]
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 f8f9 	bl	8005d58 <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d103      	bne.n	8005b72 <sbrk_aligned+0x26>
 8005b6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b6e:	4620      	mov	r0, r4
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	f024 0403 	bic.w	r4, r4, #3
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d0f8      	beq.n	8005b6e <sbrk_aligned+0x22>
 8005b7c:	1a21      	subs	r1, r4, r0
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f8ea 	bl	8005d58 <_sbrk_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1f2      	bne.n	8005b6e <sbrk_aligned+0x22>
 8005b88:	e7ef      	b.n	8005b6a <sbrk_aligned+0x1e>
 8005b8a:	bf00      	nop
 8005b8c:	2000041c 	.word	0x2000041c

08005b90 <_malloc_r>:
 8005b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b94:	1ccd      	adds	r5, r1, #3
 8005b96:	f025 0503 	bic.w	r5, r5, #3
 8005b9a:	3508      	adds	r5, #8
 8005b9c:	2d0c      	cmp	r5, #12
 8005b9e:	bf38      	it	cc
 8005ba0:	250c      	movcc	r5, #12
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	db01      	blt.n	8005bac <_malloc_r+0x1c>
 8005ba8:	42a9      	cmp	r1, r5
 8005baa:	d904      	bls.n	8005bb6 <_malloc_r+0x26>
 8005bac:	230c      	movs	r3, #12
 8005bae:	6033      	str	r3, [r6, #0]
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c8c <_malloc_r+0xfc>
 8005bba:	f000 f89f 	bl	8005cfc <__malloc_lock>
 8005bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc2:	461c      	mov	r4, r3
 8005bc4:	bb44      	cbnz	r4, 8005c18 <_malloc_r+0x88>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff ffbf 	bl	8005b4c <sbrk_aligned>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	d158      	bne.n	8005c86 <_malloc_r+0xf6>
 8005bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd8:	4627      	mov	r7, r4
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	d143      	bne.n	8005c66 <_malloc_r+0xd6>
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	d04b      	beq.n	8005c7a <_malloc_r+0xea>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	4639      	mov	r1, r7
 8005be6:	4630      	mov	r0, r6
 8005be8:	eb04 0903 	add.w	r9, r4, r3
 8005bec:	f000 f8b4 	bl	8005d58 <_sbrk_r>
 8005bf0:	4581      	cmp	r9, r0
 8005bf2:	d142      	bne.n	8005c7a <_malloc_r+0xea>
 8005bf4:	6821      	ldr	r1, [r4, #0]
 8005bf6:	1a6d      	subs	r5, r5, r1
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7ff ffa6 	bl	8005b4c <sbrk_aligned>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d03a      	beq.n	8005c7a <_malloc_r+0xea>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	442b      	add	r3, r5
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	bb62      	cbnz	r2, 8005c6c <_malloc_r+0xdc>
 8005c12:	f8c8 7000 	str.w	r7, [r8]
 8005c16:	e00f      	b.n	8005c38 <_malloc_r+0xa8>
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	1b52      	subs	r2, r2, r5
 8005c1c:	d420      	bmi.n	8005c60 <_malloc_r+0xd0>
 8005c1e:	2a0b      	cmp	r2, #11
 8005c20:	d917      	bls.n	8005c52 <_malloc_r+0xc2>
 8005c22:	1961      	adds	r1, r4, r5
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	6025      	str	r5, [r4, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	6059      	strne	r1, [r3, #4]
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	bf08      	it	eq
 8005c30:	f8c8 1000 	streq.w	r1, [r8]
 8005c34:	5162      	str	r2, [r4, r5]
 8005c36:	604b      	str	r3, [r1, #4]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f865 	bl	8005d08 <__malloc_unlock>
 8005c3e:	f104 000b 	add.w	r0, r4, #11
 8005c42:	1d23      	adds	r3, r4, #4
 8005c44:	f020 0007 	bic.w	r0, r0, #7
 8005c48:	1ac2      	subs	r2, r0, r3
 8005c4a:	bf1c      	itt	ne
 8005c4c:	1a1b      	subne	r3, r3, r0
 8005c4e:	50a3      	strne	r3, [r4, r2]
 8005c50:	e7af      	b.n	8005bb2 <_malloc_r+0x22>
 8005c52:	6862      	ldr	r2, [r4, #4]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	bf0c      	ite	eq
 8005c58:	f8c8 2000 	streq.w	r2, [r8]
 8005c5c:	605a      	strne	r2, [r3, #4]
 8005c5e:	e7eb      	b.n	8005c38 <_malloc_r+0xa8>
 8005c60:	4623      	mov	r3, r4
 8005c62:	6864      	ldr	r4, [r4, #4]
 8005c64:	e7ae      	b.n	8005bc4 <_malloc_r+0x34>
 8005c66:	463c      	mov	r4, r7
 8005c68:	687f      	ldr	r7, [r7, #4]
 8005c6a:	e7b6      	b.n	8005bda <_malloc_r+0x4a>
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d1fb      	bne.n	8005c6c <_malloc_r+0xdc>
 8005c74:	2300      	movs	r3, #0
 8005c76:	6053      	str	r3, [r2, #4]
 8005c78:	e7de      	b.n	8005c38 <_malloc_r+0xa8>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f842 	bl	8005d08 <__malloc_unlock>
 8005c84:	e794      	b.n	8005bb0 <_malloc_r+0x20>
 8005c86:	6005      	str	r5, [r0, #0]
 8005c88:	e7d6      	b.n	8005c38 <_malloc_r+0xa8>
 8005c8a:	bf00      	nop
 8005c8c:	20000420 	.word	0x20000420

08005c90 <sniprintf>:
 8005c90:	b40c      	push	{r2, r3}
 8005c92:	b530      	push	{r4, r5, lr}
 8005c94:	4b18      	ldr	r3, [pc, #96]	@ (8005cf8 <sniprintf+0x68>)
 8005c96:	1e0c      	subs	r4, r1, #0
 8005c98:	681d      	ldr	r5, [r3, #0]
 8005c9a:	b09d      	sub	sp, #116	@ 0x74
 8005c9c:	da08      	bge.n	8005cb0 <sniprintf+0x20>
 8005c9e:	238b      	movs	r3, #139	@ 0x8b
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ca6:	b01d      	add	sp, #116	@ 0x74
 8005ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cac:	b002      	add	sp, #8
 8005cae:	4770      	bx	lr
 8005cb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005cb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005cbe:	bf14      	ite	ne
 8005cc0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005cc4:	4623      	moveq	r3, r4
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cce:	9002      	str	r0, [sp, #8]
 8005cd0:	9006      	str	r0, [sp, #24]
 8005cd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cd8:	ab21      	add	r3, sp, #132	@ 0x84
 8005cda:	a902      	add	r1, sp, #8
 8005cdc:	4628      	mov	r0, r5
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	f000 f92a 	bl	8005f38 <_svfiprintf_r>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	bfbc      	itt	lt
 8005ce8:	238b      	movlt	r3, #139	@ 0x8b
 8005cea:	602b      	strlt	r3, [r5, #0]
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	d0da      	beq.n	8005ca6 <sniprintf+0x16>
 8005cf0:	9b02      	ldr	r3, [sp, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e7d6      	b.n	8005ca6 <sniprintf+0x16>
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <__malloc_lock>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	@ (8005d04 <__malloc_lock+0x8>)
 8005cfe:	f000 b865 	b.w	8005dcc <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	2000055c 	.word	0x2000055c

08005d08 <__malloc_unlock>:
 8005d08:	4801      	ldr	r0, [pc, #4]	@ (8005d10 <__malloc_unlock+0x8>)
 8005d0a:	f000 b860 	b.w	8005dce <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	2000055c 	.word	0x2000055c

08005d14 <memmove>:
 8005d14:	4288      	cmp	r0, r1
 8005d16:	b510      	push	{r4, lr}
 8005d18:	eb01 0402 	add.w	r4, r1, r2
 8005d1c:	d902      	bls.n	8005d24 <memmove+0x10>
 8005d1e:	4284      	cmp	r4, r0
 8005d20:	4623      	mov	r3, r4
 8005d22:	d807      	bhi.n	8005d34 <memmove+0x20>
 8005d24:	1e43      	subs	r3, r0, #1
 8005d26:	42a1      	cmp	r1, r4
 8005d28:	d008      	beq.n	8005d3c <memmove+0x28>
 8005d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d32:	e7f8      	b.n	8005d26 <memmove+0x12>
 8005d34:	4402      	add	r2, r0
 8005d36:	4601      	mov	r1, r0
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	d100      	bne.n	8005d3e <memmove+0x2a>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d46:	e7f7      	b.n	8005d38 <memmove+0x24>

08005d48 <memset>:
 8005d48:	4402      	add	r2, r0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d100      	bne.n	8005d52 <memset+0xa>
 8005d50:	4770      	bx	lr
 8005d52:	f803 1b01 	strb.w	r1, [r3], #1
 8005d56:	e7f9      	b.n	8005d4c <memset+0x4>

08005d58 <_sbrk_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d06      	ldr	r5, [pc, #24]	@ (8005d74 <_sbrk_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	f7fb f9f6 	bl	8001154 <_sbrk>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_sbrk_r+0x1a>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_sbrk_r+0x1a>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000560 	.word	0x20000560

08005d78 <__errno>:
 8005d78:	4b01      	ldr	r3, [pc, #4]	@ (8005d80 <__errno+0x8>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	2000000c 	.word	0x2000000c

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	4d0d      	ldr	r5, [pc, #52]	@ (8005dbc <__libc_init_array+0x38>)
 8005d88:	4c0d      	ldr	r4, [pc, #52]	@ (8005dc0 <__libc_init_array+0x3c>)
 8005d8a:	1b64      	subs	r4, r4, r5
 8005d8c:	10a4      	asrs	r4, r4, #2
 8005d8e:	2600      	movs	r6, #0
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc4 <__libc_init_array+0x40>)
 8005d96:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc8 <__libc_init_array+0x44>)
 8005d98:	f000 fb8c 	bl	80064b4 <_init>
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	2600      	movs	r6, #0
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	0800861c 	.word	0x0800861c
 8005dc0:	0800861c 	.word	0x0800861c
 8005dc4:	0800861c 	.word	0x0800861c
 8005dc8:	08008624 	.word	0x08008624

08005dcc <__retarget_lock_acquire_recursive>:
 8005dcc:	4770      	bx	lr

08005dce <__retarget_lock_release_recursive>:
 8005dce:	4770      	bx	lr

08005dd0 <memcpy>:
 8005dd0:	440a      	add	r2, r1
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005dd8:	d100      	bne.n	8005ddc <memcpy+0xc>
 8005dda:	4770      	bx	lr
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de6:	4291      	cmp	r1, r2
 8005de8:	d1f9      	bne.n	8005dde <memcpy+0xe>
 8005dea:	bd10      	pop	{r4, pc}

08005dec <_free_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4605      	mov	r5, r0
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d041      	beq.n	8005e78 <_free_r+0x8c>
 8005df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df8:	1f0c      	subs	r4, r1, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfb8      	it	lt
 8005dfe:	18e4      	addlt	r4, r4, r3
 8005e00:	f7ff ff7c 	bl	8005cfc <__malloc_lock>
 8005e04:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <_free_r+0x90>)
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	b933      	cbnz	r3, 8005e18 <_free_r+0x2c>
 8005e0a:	6063      	str	r3, [r4, #4]
 8005e0c:	6014      	str	r4, [r2, #0]
 8005e0e:	4628      	mov	r0, r5
 8005e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e14:	f7ff bf78 	b.w	8005d08 <__malloc_unlock>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d908      	bls.n	8005e2e <_free_r+0x42>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf01      	itttt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	e7ed      	b.n	8005e0a <_free_r+0x1e>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	b10b      	cbz	r3, 8005e38 <_free_r+0x4c>
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d9fa      	bls.n	8005e2e <_free_r+0x42>
 8005e38:	6811      	ldr	r1, [r2, #0]
 8005e3a:	1850      	adds	r0, r2, r1
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d10b      	bne.n	8005e58 <_free_r+0x6c>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	4401      	add	r1, r0
 8005e44:	1850      	adds	r0, r2, r1
 8005e46:	4283      	cmp	r3, r0
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	d1e0      	bne.n	8005e0e <_free_r+0x22>
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	4408      	add	r0, r1
 8005e54:	6010      	str	r0, [r2, #0]
 8005e56:	e7da      	b.n	8005e0e <_free_r+0x22>
 8005e58:	d902      	bls.n	8005e60 <_free_r+0x74>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	e7d6      	b.n	8005e0e <_free_r+0x22>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	1821      	adds	r1, r4, r0
 8005e64:	428b      	cmp	r3, r1
 8005e66:	bf04      	itt	eq
 8005e68:	6819      	ldreq	r1, [r3, #0]
 8005e6a:	685b      	ldreq	r3, [r3, #4]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	bf04      	itt	eq
 8005e70:	1809      	addeq	r1, r1, r0
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	6054      	str	r4, [r2, #4]
 8005e76:	e7ca      	b.n	8005e0e <_free_r+0x22>
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000420 	.word	0x20000420

08005e80 <__ssputs_r>:
 8005e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	688e      	ldr	r6, [r1, #8]
 8005e86:	461f      	mov	r7, r3
 8005e88:	42be      	cmp	r6, r7
 8005e8a:	680b      	ldr	r3, [r1, #0]
 8005e8c:	4682      	mov	sl, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	4690      	mov	r8, r2
 8005e92:	d82d      	bhi.n	8005ef0 <__ssputs_r+0x70>
 8005e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e9c:	d026      	beq.n	8005eec <__ssputs_r+0x6c>
 8005e9e:	6965      	ldr	r5, [r4, #20]
 8005ea0:	6909      	ldr	r1, [r1, #16]
 8005ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea6:	eba3 0901 	sub.w	r9, r3, r1
 8005eaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eae:	1c7b      	adds	r3, r7, #1
 8005eb0:	444b      	add	r3, r9
 8005eb2:	106d      	asrs	r5, r5, #1
 8005eb4:	429d      	cmp	r5, r3
 8005eb6:	bf38      	it	cc
 8005eb8:	461d      	movcc	r5, r3
 8005eba:	0553      	lsls	r3, r2, #21
 8005ebc:	d527      	bpl.n	8005f0e <__ssputs_r+0x8e>
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7ff fe66 	bl	8005b90 <_malloc_r>
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	b360      	cbz	r0, 8005f22 <__ssputs_r+0xa2>
 8005ec8:	6921      	ldr	r1, [r4, #16]
 8005eca:	464a      	mov	r2, r9
 8005ecc:	f7ff ff80 	bl	8005dd0 <memcpy>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	6126      	str	r6, [r4, #16]
 8005ede:	6165      	str	r5, [r4, #20]
 8005ee0:	444e      	add	r6, r9
 8005ee2:	eba5 0509 	sub.w	r5, r5, r9
 8005ee6:	6026      	str	r6, [r4, #0]
 8005ee8:	60a5      	str	r5, [r4, #8]
 8005eea:	463e      	mov	r6, r7
 8005eec:	42be      	cmp	r6, r7
 8005eee:	d900      	bls.n	8005ef2 <__ssputs_r+0x72>
 8005ef0:	463e      	mov	r6, r7
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	f7ff ff0c 	bl	8005d14 <memmove>
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	1b9b      	subs	r3, r3, r6
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	4433      	add	r3, r6
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0e:	462a      	mov	r2, r5
 8005f10:	f000 fa9a 	bl	8006448 <_realloc_r>
 8005f14:	4606      	mov	r6, r0
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d1e0      	bne.n	8005edc <__ssputs_r+0x5c>
 8005f1a:	6921      	ldr	r1, [r4, #16]
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	f7ff ff65 	bl	8005dec <_free_r>
 8005f22:	230c      	movs	r3, #12
 8005f24:	f8ca 3000 	str.w	r3, [sl]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f34:	e7e9      	b.n	8005f0a <__ssputs_r+0x8a>
	...

08005f38 <_svfiprintf_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	4698      	mov	r8, r3
 8005f3e:	898b      	ldrh	r3, [r1, #12]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	b09d      	sub	sp, #116	@ 0x74
 8005f44:	4607      	mov	r7, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	d510      	bpl.n	8005f6e <_svfiprintf_r+0x36>
 8005f4c:	690b      	ldr	r3, [r1, #16]
 8005f4e:	b973      	cbnz	r3, 8005f6e <_svfiprintf_r+0x36>
 8005f50:	2140      	movs	r1, #64	@ 0x40
 8005f52:	f7ff fe1d 	bl	8005b90 <_malloc_r>
 8005f56:	6028      	str	r0, [r5, #0]
 8005f58:	6128      	str	r0, [r5, #16]
 8005f5a:	b930      	cbnz	r0, 8005f6a <_svfiprintf_r+0x32>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f64:	b01d      	add	sp, #116	@ 0x74
 8005f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6a:	2340      	movs	r3, #64	@ 0x40
 8005f6c:	616b      	str	r3, [r5, #20]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f72:	2320      	movs	r3, #32
 8005f74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f7c:	2330      	movs	r3, #48	@ 0x30
 8005f7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800611c <_svfiprintf_r+0x1e4>
 8005f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f86:	f04f 0901 	mov.w	r9, #1
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	469a      	mov	sl, r3
 8005f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f92:	b10a      	cbz	r2, 8005f98 <_svfiprintf_r+0x60>
 8005f94:	2a25      	cmp	r2, #37	@ 0x25
 8005f96:	d1f9      	bne.n	8005f8c <_svfiprintf_r+0x54>
 8005f98:	ebba 0b04 	subs.w	fp, sl, r4
 8005f9c:	d00b      	beq.n	8005fb6 <_svfiprintf_r+0x7e>
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff ff6b 	bl	8005e80 <__ssputs_r>
 8005faa:	3001      	adds	r0, #1
 8005fac:	f000 80a7 	beq.w	80060fe <_svfiprintf_r+0x1c6>
 8005fb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb2:	445a      	add	r2, fp
 8005fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 809f 	beq.w	80060fe <_svfiprintf_r+0x1c6>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fca:	f10a 0a01 	add.w	sl, sl, #1
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2205      	movs	r2, #5
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	484e      	ldr	r0, [pc, #312]	@ (800611c <_svfiprintf_r+0x1e4>)
 8005fe2:	f7fa f8fd 	bl	80001e0 <memchr>
 8005fe6:	9a04      	ldr	r2, [sp, #16]
 8005fe8:	b9d8      	cbnz	r0, 8006022 <_svfiprintf_r+0xea>
 8005fea:	06d0      	lsls	r0, r2, #27
 8005fec:	bf44      	itt	mi
 8005fee:	2320      	movmi	r3, #32
 8005ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff4:	0711      	lsls	r1, r2, #28
 8005ff6:	bf44      	itt	mi
 8005ff8:	232b      	movmi	r3, #43	@ 0x2b
 8005ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8006002:	2b2a      	cmp	r3, #42	@ 0x2a
 8006004:	d015      	beq.n	8006032 <_svfiprintf_r+0xfa>
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	4654      	mov	r4, sl
 800600a:	2000      	movs	r0, #0
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	4621      	mov	r1, r4
 8006012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006016:	3b30      	subs	r3, #48	@ 0x30
 8006018:	2b09      	cmp	r3, #9
 800601a:	d94b      	bls.n	80060b4 <_svfiprintf_r+0x17c>
 800601c:	b1b0      	cbz	r0, 800604c <_svfiprintf_r+0x114>
 800601e:	9207      	str	r2, [sp, #28]
 8006020:	e014      	b.n	800604c <_svfiprintf_r+0x114>
 8006022:	eba0 0308 	sub.w	r3, r0, r8
 8006026:	fa09 f303 	lsl.w	r3, r9, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	46a2      	mov	sl, r4
 8006030:	e7d2      	b.n	8005fd8 <_svfiprintf_r+0xa0>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfbb      	ittet	lt
 800603e:	425b      	neglt	r3, r3
 8006040:	f042 0202 	orrlt.w	r2, r2, #2
 8006044:	9307      	strge	r3, [sp, #28]
 8006046:	9307      	strlt	r3, [sp, #28]
 8006048:	bfb8      	it	lt
 800604a:	9204      	strlt	r2, [sp, #16]
 800604c:	7823      	ldrb	r3, [r4, #0]
 800604e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006050:	d10a      	bne.n	8006068 <_svfiprintf_r+0x130>
 8006052:	7863      	ldrb	r3, [r4, #1]
 8006054:	2b2a      	cmp	r3, #42	@ 0x2a
 8006056:	d132      	bne.n	80060be <_svfiprintf_r+0x186>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9203      	str	r2, [sp, #12]
 8006060:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006064:	3402      	adds	r4, #2
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800612c <_svfiprintf_r+0x1f4>
 800606c:	7821      	ldrb	r1, [r4, #0]
 800606e:	2203      	movs	r2, #3
 8006070:	4650      	mov	r0, sl
 8006072:	f7fa f8b5 	bl	80001e0 <memchr>
 8006076:	b138      	cbz	r0, 8006088 <_svfiprintf_r+0x150>
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	eba0 000a 	sub.w	r0, r0, sl
 800607e:	2240      	movs	r2, #64	@ 0x40
 8006080:	4082      	lsls	r2, r0
 8006082:	4313      	orrs	r3, r2
 8006084:	3401      	adds	r4, #1
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	4824      	ldr	r0, [pc, #144]	@ (8006120 <_svfiprintf_r+0x1e8>)
 800608e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006092:	2206      	movs	r2, #6
 8006094:	f7fa f8a4 	bl	80001e0 <memchr>
 8006098:	2800      	cmp	r0, #0
 800609a:	d036      	beq.n	800610a <_svfiprintf_r+0x1d2>
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <_svfiprintf_r+0x1ec>)
 800609e:	bb1b      	cbnz	r3, 80060e8 <_svfiprintf_r+0x1b0>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	3307      	adds	r3, #7
 80060a4:	f023 0307 	bic.w	r3, r3, #7
 80060a8:	3308      	adds	r3, #8
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	4433      	add	r3, r6
 80060b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b2:	e76a      	b.n	8005f8a <_svfiprintf_r+0x52>
 80060b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b8:	460c      	mov	r4, r1
 80060ba:	2001      	movs	r0, #1
 80060bc:	e7a8      	b.n	8006010 <_svfiprintf_r+0xd8>
 80060be:	2300      	movs	r3, #0
 80060c0:	3401      	adds	r4, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f04f 0c0a 	mov.w	ip, #10
 80060ca:	4620      	mov	r0, r4
 80060cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d0:	3a30      	subs	r2, #48	@ 0x30
 80060d2:	2a09      	cmp	r2, #9
 80060d4:	d903      	bls.n	80060de <_svfiprintf_r+0x1a6>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c6      	beq.n	8006068 <_svfiprintf_r+0x130>
 80060da:	9105      	str	r1, [sp, #20]
 80060dc:	e7c4      	b.n	8006068 <_svfiprintf_r+0x130>
 80060de:	fb0c 2101 	mla	r1, ip, r1, r2
 80060e2:	4604      	mov	r4, r0
 80060e4:	2301      	movs	r3, #1
 80060e6:	e7f0      	b.n	80060ca <_svfiprintf_r+0x192>
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	462a      	mov	r2, r5
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <_svfiprintf_r+0x1f0>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	4638      	mov	r0, r7
 80060f4:	f3af 8000 	nop.w
 80060f8:	1c42      	adds	r2, r0, #1
 80060fa:	4606      	mov	r6, r0
 80060fc:	d1d6      	bne.n	80060ac <_svfiprintf_r+0x174>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	065b      	lsls	r3, r3, #25
 8006102:	f53f af2d 	bmi.w	8005f60 <_svfiprintf_r+0x28>
 8006106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006108:	e72c      	b.n	8005f64 <_svfiprintf_r+0x2c>
 800610a:	ab03      	add	r3, sp, #12
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	462a      	mov	r2, r5
 8006110:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <_svfiprintf_r+0x1f0>)
 8006112:	a904      	add	r1, sp, #16
 8006114:	4638      	mov	r0, r7
 8006116:	f000 f879 	bl	800620c <_printf_i>
 800611a:	e7ed      	b.n	80060f8 <_svfiprintf_r+0x1c0>
 800611c:	080085e0 	.word	0x080085e0
 8006120:	080085ea 	.word	0x080085ea
 8006124:	00000000 	.word	0x00000000
 8006128:	08005e81 	.word	0x08005e81
 800612c:	080085e6 	.word	0x080085e6

08006130 <_printf_common>:
 8006130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	4616      	mov	r6, r2
 8006136:	4698      	mov	r8, r3
 8006138:	688a      	ldr	r2, [r1, #8]
 800613a:	690b      	ldr	r3, [r1, #16]
 800613c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006140:	4293      	cmp	r3, r2
 8006142:	bfb8      	it	lt
 8006144:	4613      	movlt	r3, r2
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800614c:	4607      	mov	r7, r0
 800614e:	460c      	mov	r4, r1
 8006150:	b10a      	cbz	r2, 8006156 <_printf_common+0x26>
 8006152:	3301      	adds	r3, #1
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	0699      	lsls	r1, r3, #26
 800615a:	bf42      	ittt	mi
 800615c:	6833      	ldrmi	r3, [r6, #0]
 800615e:	3302      	addmi	r3, #2
 8006160:	6033      	strmi	r3, [r6, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	f015 0506 	ands.w	r5, r5, #6
 8006168:	d106      	bne.n	8006178 <_printf_common+0x48>
 800616a:	f104 0a19 	add.w	sl, r4, #25
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	6832      	ldr	r2, [r6, #0]
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	42ab      	cmp	r3, r5
 8006176:	dc26      	bgt.n	80061c6 <_printf_common+0x96>
 8006178:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	3b00      	subs	r3, #0
 8006180:	bf18      	it	ne
 8006182:	2301      	movne	r3, #1
 8006184:	0692      	lsls	r2, r2, #26
 8006186:	d42b      	bmi.n	80061e0 <_printf_common+0xb0>
 8006188:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800618c:	4641      	mov	r1, r8
 800618e:	4638      	mov	r0, r7
 8006190:	47c8      	blx	r9
 8006192:	3001      	adds	r0, #1
 8006194:	d01e      	beq.n	80061d4 <_printf_common+0xa4>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	f003 0306 	and.w	r3, r3, #6
 800619e:	2b04      	cmp	r3, #4
 80061a0:	bf02      	ittt	eq
 80061a2:	68e5      	ldreq	r5, [r4, #12]
 80061a4:	6833      	ldreq	r3, [r6, #0]
 80061a6:	1aed      	subeq	r5, r5, r3
 80061a8:	68a3      	ldr	r3, [r4, #8]
 80061aa:	bf0c      	ite	eq
 80061ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b0:	2500      	movne	r5, #0
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bfc4      	itt	gt
 80061b6:	1a9b      	subgt	r3, r3, r2
 80061b8:	18ed      	addgt	r5, r5, r3
 80061ba:	2600      	movs	r6, #0
 80061bc:	341a      	adds	r4, #26
 80061be:	42b5      	cmp	r5, r6
 80061c0:	d11a      	bne.n	80061f8 <_printf_common+0xc8>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e008      	b.n	80061d8 <_printf_common+0xa8>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4652      	mov	r2, sl
 80061ca:	4641      	mov	r1, r8
 80061cc:	4638      	mov	r0, r7
 80061ce:	47c8      	blx	r9
 80061d0:	3001      	adds	r0, #1
 80061d2:	d103      	bne.n	80061dc <_printf_common+0xac>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	3501      	adds	r5, #1
 80061de:	e7c6      	b.n	800616e <_printf_common+0x3e>
 80061e0:	18e1      	adds	r1, r4, r3
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	2030      	movs	r0, #48	@ 0x30
 80061e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ea:	4422      	add	r2, r4
 80061ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061f4:	3302      	adds	r3, #2
 80061f6:	e7c7      	b.n	8006188 <_printf_common+0x58>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4622      	mov	r2, r4
 80061fc:	4641      	mov	r1, r8
 80061fe:	4638      	mov	r0, r7
 8006200:	47c8      	blx	r9
 8006202:	3001      	adds	r0, #1
 8006204:	d0e6      	beq.n	80061d4 <_printf_common+0xa4>
 8006206:	3601      	adds	r6, #1
 8006208:	e7d9      	b.n	80061be <_printf_common+0x8e>
	...

0800620c <_printf_i>:
 800620c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	7e0f      	ldrb	r7, [r1, #24]
 8006212:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006214:	2f78      	cmp	r7, #120	@ 0x78
 8006216:	4691      	mov	r9, r2
 8006218:	4680      	mov	r8, r0
 800621a:	460c      	mov	r4, r1
 800621c:	469a      	mov	sl, r3
 800621e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006222:	d807      	bhi.n	8006234 <_printf_i+0x28>
 8006224:	2f62      	cmp	r7, #98	@ 0x62
 8006226:	d80a      	bhi.n	800623e <_printf_i+0x32>
 8006228:	2f00      	cmp	r7, #0
 800622a:	f000 80d1 	beq.w	80063d0 <_printf_i+0x1c4>
 800622e:	2f58      	cmp	r7, #88	@ 0x58
 8006230:	f000 80b8 	beq.w	80063a4 <_printf_i+0x198>
 8006234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800623c:	e03a      	b.n	80062b4 <_printf_i+0xa8>
 800623e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006242:	2b15      	cmp	r3, #21
 8006244:	d8f6      	bhi.n	8006234 <_printf_i+0x28>
 8006246:	a101      	add	r1, pc, #4	@ (adr r1, 800624c <_printf_i+0x40>)
 8006248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800624c:	080062a5 	.word	0x080062a5
 8006250:	080062b9 	.word	0x080062b9
 8006254:	08006235 	.word	0x08006235
 8006258:	08006235 	.word	0x08006235
 800625c:	08006235 	.word	0x08006235
 8006260:	08006235 	.word	0x08006235
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006235 	.word	0x08006235
 800626c:	08006235 	.word	0x08006235
 8006270:	08006235 	.word	0x08006235
 8006274:	08006235 	.word	0x08006235
 8006278:	080063b7 	.word	0x080063b7
 800627c:	080062e3 	.word	0x080062e3
 8006280:	08006371 	.word	0x08006371
 8006284:	08006235 	.word	0x08006235
 8006288:	08006235 	.word	0x08006235
 800628c:	080063d9 	.word	0x080063d9
 8006290:	08006235 	.word	0x08006235
 8006294:	080062e3 	.word	0x080062e3
 8006298:	08006235 	.word	0x08006235
 800629c:	08006235 	.word	0x08006235
 80062a0:	08006379 	.word	0x08006379
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	1d1a      	adds	r2, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6032      	str	r2, [r6, #0]
 80062ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062b4:	2301      	movs	r3, #1
 80062b6:	e09c      	b.n	80063f2 <_printf_i+0x1e6>
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	6031      	str	r1, [r6, #0]
 80062c0:	0606      	lsls	r6, r0, #24
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0xbc>
 80062c4:	681d      	ldr	r5, [r3, #0]
 80062c6:	e003      	b.n	80062d0 <_printf_i+0xc4>
 80062c8:	0645      	lsls	r5, r0, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0xb8>
 80062cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	da03      	bge.n	80062dc <_printf_i+0xd0>
 80062d4:	232d      	movs	r3, #45	@ 0x2d
 80062d6:	426d      	negs	r5, r5
 80062d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062dc:	4858      	ldr	r0, [pc, #352]	@ (8006440 <_printf_i+0x234>)
 80062de:	230a      	movs	r3, #10
 80062e0:	e011      	b.n	8006306 <_printf_i+0xfa>
 80062e2:	6821      	ldr	r1, [r4, #0]
 80062e4:	6833      	ldr	r3, [r6, #0]
 80062e6:	0608      	lsls	r0, r1, #24
 80062e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062ec:	d402      	bmi.n	80062f4 <_printf_i+0xe8>
 80062ee:	0649      	lsls	r1, r1, #25
 80062f0:	bf48      	it	mi
 80062f2:	b2ad      	uxthmi	r5, r5
 80062f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062f6:	4852      	ldr	r0, [pc, #328]	@ (8006440 <_printf_i+0x234>)
 80062f8:	6033      	str	r3, [r6, #0]
 80062fa:	bf14      	ite	ne
 80062fc:	230a      	movne	r3, #10
 80062fe:	2308      	moveq	r3, #8
 8006300:	2100      	movs	r1, #0
 8006302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006306:	6866      	ldr	r6, [r4, #4]
 8006308:	60a6      	str	r6, [r4, #8]
 800630a:	2e00      	cmp	r6, #0
 800630c:	db05      	blt.n	800631a <_printf_i+0x10e>
 800630e:	6821      	ldr	r1, [r4, #0]
 8006310:	432e      	orrs	r6, r5
 8006312:	f021 0104 	bic.w	r1, r1, #4
 8006316:	6021      	str	r1, [r4, #0]
 8006318:	d04b      	beq.n	80063b2 <_printf_i+0x1a6>
 800631a:	4616      	mov	r6, r2
 800631c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006320:	fb03 5711 	mls	r7, r3, r1, r5
 8006324:	5dc7      	ldrb	r7, [r0, r7]
 8006326:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800632a:	462f      	mov	r7, r5
 800632c:	42bb      	cmp	r3, r7
 800632e:	460d      	mov	r5, r1
 8006330:	d9f4      	bls.n	800631c <_printf_i+0x110>
 8006332:	2b08      	cmp	r3, #8
 8006334:	d10b      	bne.n	800634e <_printf_i+0x142>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	07df      	lsls	r7, r3, #31
 800633a:	d508      	bpl.n	800634e <_printf_i+0x142>
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	6861      	ldr	r1, [r4, #4]
 8006340:	4299      	cmp	r1, r3
 8006342:	bfde      	ittt	le
 8006344:	2330      	movle	r3, #48	@ 0x30
 8006346:	f806 3c01 	strble.w	r3, [r6, #-1]
 800634a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800634e:	1b92      	subs	r2, r2, r6
 8006350:	6122      	str	r2, [r4, #16]
 8006352:	f8cd a000 	str.w	sl, [sp]
 8006356:	464b      	mov	r3, r9
 8006358:	aa03      	add	r2, sp, #12
 800635a:	4621      	mov	r1, r4
 800635c:	4640      	mov	r0, r8
 800635e:	f7ff fee7 	bl	8006130 <_printf_common>
 8006362:	3001      	adds	r0, #1
 8006364:	d14a      	bne.n	80063fc <_printf_i+0x1f0>
 8006366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800636a:	b004      	add	sp, #16
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f043 0320 	orr.w	r3, r3, #32
 8006376:	6023      	str	r3, [r4, #0]
 8006378:	4832      	ldr	r0, [pc, #200]	@ (8006444 <_printf_i+0x238>)
 800637a:	2778      	movs	r7, #120	@ 0x78
 800637c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	6831      	ldr	r1, [r6, #0]
 8006384:	061f      	lsls	r7, r3, #24
 8006386:	f851 5b04 	ldr.w	r5, [r1], #4
 800638a:	d402      	bmi.n	8006392 <_printf_i+0x186>
 800638c:	065f      	lsls	r7, r3, #25
 800638e:	bf48      	it	mi
 8006390:	b2ad      	uxthmi	r5, r5
 8006392:	6031      	str	r1, [r6, #0]
 8006394:	07d9      	lsls	r1, r3, #31
 8006396:	bf44      	itt	mi
 8006398:	f043 0320 	orrmi.w	r3, r3, #32
 800639c:	6023      	strmi	r3, [r4, #0]
 800639e:	b11d      	cbz	r5, 80063a8 <_printf_i+0x19c>
 80063a0:	2310      	movs	r3, #16
 80063a2:	e7ad      	b.n	8006300 <_printf_i+0xf4>
 80063a4:	4826      	ldr	r0, [pc, #152]	@ (8006440 <_printf_i+0x234>)
 80063a6:	e7e9      	b.n	800637c <_printf_i+0x170>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	f023 0320 	bic.w	r3, r3, #32
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	e7f6      	b.n	80063a0 <_printf_i+0x194>
 80063b2:	4616      	mov	r6, r2
 80063b4:	e7bd      	b.n	8006332 <_printf_i+0x126>
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	6961      	ldr	r1, [r4, #20]
 80063bc:	1d18      	adds	r0, r3, #4
 80063be:	6030      	str	r0, [r6, #0]
 80063c0:	062e      	lsls	r6, r5, #24
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	d501      	bpl.n	80063ca <_printf_i+0x1be>
 80063c6:	6019      	str	r1, [r3, #0]
 80063c8:	e002      	b.n	80063d0 <_printf_i+0x1c4>
 80063ca:	0668      	lsls	r0, r5, #25
 80063cc:	d5fb      	bpl.n	80063c6 <_printf_i+0x1ba>
 80063ce:	8019      	strh	r1, [r3, #0]
 80063d0:	2300      	movs	r3, #0
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	4616      	mov	r6, r2
 80063d6:	e7bc      	b.n	8006352 <_printf_i+0x146>
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	6032      	str	r2, [r6, #0]
 80063de:	681e      	ldr	r6, [r3, #0]
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	2100      	movs	r1, #0
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7f9 fefb 	bl	80001e0 <memchr>
 80063ea:	b108      	cbz	r0, 80063f0 <_printf_i+0x1e4>
 80063ec:	1b80      	subs	r0, r0, r6
 80063ee:	6060      	str	r0, [r4, #4]
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	6123      	str	r3, [r4, #16]
 80063f4:	2300      	movs	r3, #0
 80063f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063fa:	e7aa      	b.n	8006352 <_printf_i+0x146>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	4632      	mov	r2, r6
 8006400:	4649      	mov	r1, r9
 8006402:	4640      	mov	r0, r8
 8006404:	47d0      	blx	sl
 8006406:	3001      	adds	r0, #1
 8006408:	d0ad      	beq.n	8006366 <_printf_i+0x15a>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	079b      	lsls	r3, r3, #30
 800640e:	d413      	bmi.n	8006438 <_printf_i+0x22c>
 8006410:	68e0      	ldr	r0, [r4, #12]
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	4298      	cmp	r0, r3
 8006416:	bfb8      	it	lt
 8006418:	4618      	movlt	r0, r3
 800641a:	e7a6      	b.n	800636a <_printf_i+0x15e>
 800641c:	2301      	movs	r3, #1
 800641e:	4632      	mov	r2, r6
 8006420:	4649      	mov	r1, r9
 8006422:	4640      	mov	r0, r8
 8006424:	47d0      	blx	sl
 8006426:	3001      	adds	r0, #1
 8006428:	d09d      	beq.n	8006366 <_printf_i+0x15a>
 800642a:	3501      	adds	r5, #1
 800642c:	68e3      	ldr	r3, [r4, #12]
 800642e:	9903      	ldr	r1, [sp, #12]
 8006430:	1a5b      	subs	r3, r3, r1
 8006432:	42ab      	cmp	r3, r5
 8006434:	dcf2      	bgt.n	800641c <_printf_i+0x210>
 8006436:	e7eb      	b.n	8006410 <_printf_i+0x204>
 8006438:	2500      	movs	r5, #0
 800643a:	f104 0619 	add.w	r6, r4, #25
 800643e:	e7f5      	b.n	800642c <_printf_i+0x220>
 8006440:	080085f1 	.word	0x080085f1
 8006444:	08008602 	.word	0x08008602

08006448 <_realloc_r>:
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	4607      	mov	r7, r0
 800644e:	4614      	mov	r4, r2
 8006450:	460d      	mov	r5, r1
 8006452:	b921      	cbnz	r1, 800645e <_realloc_r+0x16>
 8006454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	4611      	mov	r1, r2
 800645a:	f7ff bb99 	b.w	8005b90 <_malloc_r>
 800645e:	b92a      	cbnz	r2, 800646c <_realloc_r+0x24>
 8006460:	f7ff fcc4 	bl	8005dec <_free_r>
 8006464:	4625      	mov	r5, r4
 8006466:	4628      	mov	r0, r5
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	f000 f81a 	bl	80064a4 <_malloc_usable_size_r>
 8006470:	4284      	cmp	r4, r0
 8006472:	4606      	mov	r6, r0
 8006474:	d802      	bhi.n	800647c <_realloc_r+0x34>
 8006476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800647a:	d8f4      	bhi.n	8006466 <_realloc_r+0x1e>
 800647c:	4621      	mov	r1, r4
 800647e:	4638      	mov	r0, r7
 8006480:	f7ff fb86 	bl	8005b90 <_malloc_r>
 8006484:	4680      	mov	r8, r0
 8006486:	b908      	cbnz	r0, 800648c <_realloc_r+0x44>
 8006488:	4645      	mov	r5, r8
 800648a:	e7ec      	b.n	8006466 <_realloc_r+0x1e>
 800648c:	42b4      	cmp	r4, r6
 800648e:	4622      	mov	r2, r4
 8006490:	4629      	mov	r1, r5
 8006492:	bf28      	it	cs
 8006494:	4632      	movcs	r2, r6
 8006496:	f7ff fc9b 	bl	8005dd0 <memcpy>
 800649a:	4629      	mov	r1, r5
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff fca5 	bl	8005dec <_free_r>
 80064a2:	e7f1      	b.n	8006488 <_realloc_r+0x40>

080064a4 <_malloc_usable_size_r>:
 80064a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a8:	1f18      	subs	r0, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bfbc      	itt	lt
 80064ae:	580b      	ldrlt	r3, [r1, r0]
 80064b0:	18c0      	addlt	r0, r0, r3
 80064b2:	4770      	bx	lr

080064b4 <_init>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	bf00      	nop
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr

080064c0 <_fini>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	bf00      	nop
 80064c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c6:	bc08      	pop	{r3}
 80064c8:	469e      	mov	lr, r3
 80064ca:	4770      	bx	lr
