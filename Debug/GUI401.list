
GUI401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002150  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aafc  0800aafc  0000c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab04  0800ab04  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ab04  0800ab04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800ab14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  2000005c  0800ab70  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800ab70  0000cac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a815  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ae1  00000000  00000000  000668a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c30  00000000  00000000  0006c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002d13  00000000  00000000  0006ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b443  00000000  00000000  00072ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000244c7  00000000  00000000  0008e10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae788  00000000  00000000  000b25d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010a1c  00000000  00000000  00160da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001717bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008994 	.word	0x08008994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08008994 	.word	0x08008994

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_Z4maxiii>:
 *      Author: lex
 */

#include "CustomAuxiliary.h"

	int maxi(int x, int y) { return x < y ? y : x; };
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	da01      	bge.n	80005c2 <_Z4maxiii+0x16>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	e000      	b.n	80005c4 <_Z4maxiii+0x18>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_Z4miniii>:
	int mini(int x, int y) { return x < y ? x : y; };
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	da01      	bge.n	80005e6 <_Z4miniii+0x16>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e000      	b.n	80005e8 <_Z4miniii+0x18>
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_Z6boundiiii>:
	int boundi(int minValue, int x, int maxValue) { return mini(maxi(minValue, x), maxValue); };
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffd2 	bl	80005ac <_Z4maxiii>
 8000608:	4603      	mov	r3, r0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffdf 	bl	80005d0 <_Z4miniii>
 8000612:	4603      	mov	r3, r0
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN12VideoChannelC1Ev>:

extern const uint16_t SM137R_Channel_channelTable[9][5];
extern const uint16_t channelFreqTable[];

struct VideoChannel {
	VideoChannel() {};
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	801a      	strh	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	805a      	strh	r2, [r3, #2]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	711a      	strb	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	715a      	strb	r2, [r3, #5]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	719a      	strb	r2, [r3, #6]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <_ZN12VideoChannelC1Etthhh>:
	VideoChannel(uint16_t frequency, uint16_t rssi,  uint8_t lifetime, uint8_t receiver, uint8_t cyclesPresense): frequency(frequency), rssi(rssi), lifetime(lifetime), receiver(receiver), cyclesPresense(cyclesPresense) {};
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	4608      	mov	r0, r1
 800065a:	4611      	mov	r1, r2
 800065c:	461a      	mov	r2, r3
 800065e:	4603      	mov	r3, r0
 8000660:	817b      	strh	r3, [r7, #10]
 8000662:	460b      	mov	r3, r1
 8000664:	813b      	strh	r3, [r7, #8]
 8000666:	4613      	mov	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	897a      	ldrh	r2, [r7, #10]
 800066e:	801a      	strh	r2, [r3, #0]
 8000670:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	805a      	strh	r2, [r3, #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	711a      	strb	r2, [r3, #4]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	7e3a      	ldrb	r2, [r7, #24]
 8000682:	715a      	strb	r2, [r3, #5]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	7f3a      	ldrb	r2, [r7, #28]
 8000688:	719a      	strb	r2, [r3, #6]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_ZL21compareCnannelsByRSSIPKvS0_>:
#include <stdlib.h>
#include <string.h>

#define kChannelLinesCount 2

static int compareCnannelsByRSSI(const void *a, const void *b) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    return ((*(VideoChannel*)a).rssi - (*(VideoChannel*)b).rssi);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006a8:	461a      	mov	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006b0:	1ad3      	subs	r3, r2, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <_ZN18MainViewControllerC1ER11u8g2_struct>:

MainViewController::MainViewController(u8g2_t& u8g2): u8g2(u8g2) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b09a      	sub	sp, #104	@ 0x68
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fac5 	bl	8000c5c <_ZN14ViewControllerC1Ev>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3304      	adds	r3, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 fa94 	bl	8007c04 <_ZN13EventRecieverC1Ev>
 80006dc:	4a5c      	ldr	r2, [pc, #368]	@ (8000850 <_ZN18MainViewControllerC1ER11u8g2_struct+0x190>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000854 <_ZN18MainViewControllerC1ER11u8g2_struct+0x194>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	731a      	strb	r2, [r3, #12]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	739a      	strb	r2, [r3, #14]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	220a      	movs	r2, #10
 80006fe:	73da      	strb	r2, [r3, #15]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	741a      	strb	r2, [r3, #16]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3312      	adds	r3, #18
 800070a:	2409      	movs	r4, #9
 800070c:	461d      	mov	r5, r3
 800070e:	e004      	b.n	800071a <_ZN18MainViewControllerC1ER11u8g2_struct+0x5a>
 8000710:	4628      	mov	r0, r5
 8000712:	f7ff ff83 	bl	800061c <_ZN12VideoChannelC1Ev>
 8000716:	3c01      	subs	r4, #1
 8000718:	3508      	adds	r5, #8
 800071a:	2c00      	cmp	r4, #0
 800071c:	daf8      	bge.n	8000710 <_ZN18MainViewControllerC1ER11u8g2_struct+0x50>
				VideoChannel(5079, 5, 1, 1, 1),
				VideoChannel(4995, -7, 1, 1, 1),
				VideoChannel(5959, 8, 1, 1, 1),
				VideoChannel(6001, 19, 1, 1, 1),
				VideoChannel(6183, 10, 1, 1, 1)
	};
 800071e:	f107 040c 	add.w	r4, r7, #12
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2301      	movs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000730:	f241 61e9 	movw	r1, #5865	@ 0x16e9
 8000734:	4620      	mov	r0, r4
 8000736:	f7ff ff8b 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800073a:	3408      	adds	r4, #8
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	2202      	movs	r2, #2
 8000748:	f241 61f8 	movw	r1, #5880	@ 0x16f8
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ff7f 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 8000752:	3408      	adds	r4, #8
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000762:	f241 618b 	movw	r1, #5771	@ 0x168b
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff ff72 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800076c:	3408      	adds	r4, #8
 800076e:	2301      	movs	r3, #1
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	2301      	movs	r3, #1
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2204      	movs	r2, #4
 800077a:	f241 613f 	movw	r1, #5695	@ 0x163f
 800077e:	4620      	mov	r0, r4
 8000780:	f7ff ff66 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 8000784:	3408      	adds	r4, #8
 8000786:	2301      	movs	r3, #1
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	2206      	movs	r2, #6
 8000792:	f241 5125 	movw	r1, #5413	@ 0x1525
 8000796:	4620      	mov	r0, r4
 8000798:	f7ff ff5a 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 800079c:	3408      	adds	r4, #8
 800079e:	2301      	movs	r3, #1
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	2205      	movs	r2, #5
 80007aa:	f241 31d7 	movw	r1, #5079	@ 0x13d7
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff ff4e 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007b4:	3408      	adds	r4, #8
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	f64f 72f9 	movw	r2, #65529	@ 0xfff9
 80007c4:	f241 3183 	movw	r1, #4995	@ 0x1383
 80007c8:	4620      	mov	r0, r4
 80007ca:	f7ff ff41 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007ce:	3408      	adds	r4, #8
 80007d0:	2301      	movs	r3, #1
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	2208      	movs	r2, #8
 80007dc:	f241 7147 	movw	r1, #5959	@ 0x1747
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff ff35 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007e6:	3408      	adds	r4, #8
 80007e8:	2301      	movs	r3, #1
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2213      	movs	r2, #19
 80007f4:	f241 7171 	movw	r1, #6001	@ 0x1771
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff29 	bl	8000650 <_ZN12VideoChannelC1Etthhh>
 80007fe:	f104 0008 	add.w	r0, r4, #8
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2301      	movs	r3, #1
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	220a      	movs	r2, #10
 800080e:	f641 0127 	movw	r1, #6183	@ 0x1827
 8000812:	f7ff ff1d 	bl	8000650 <_ZN12VideoChannelC1Etthhh>

	size_t n = sizeof(unsortedChannels) / sizeof(unsortedChannels[0]);
 8000816:	230a      	movs	r3, #10
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
	qsort(unsortedChannels, n, sizeof(VideoChannel), compareCnannelsByRSSI);
 800081a:	f107 000c 	add.w	r0, r7, #12
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <_ZN18MainViewControllerC1ER11u8g2_struct+0x198>)
 8000820:	2208      	movs	r2, #8
 8000822:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000824:	f007 fab3 	bl	8007d8e <qsort>
	memcpy(channels, unsortedChannels, mini(sizeof(unsortedChannels), sizeof(channels)));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f103 0412 	add.w	r4, r3, #18
 800082e:	2150      	movs	r1, #80	@ 0x50
 8000830:	2050      	movs	r0, #80	@ 0x50
 8000832:	f7ff fecd 	bl	80005d0 <_Z4miniii>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4620      	mov	r0, r4
 8000842:	f007 fd35 	bl	80082b0 <memcpy>
};
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	3760      	adds	r7, #96	@ 0x60
 800084c:	46bd      	mov	sp, r7
 800084e:	bdb0      	pop	{r4, r5, r7, pc}
 8000850:	08008f5c 	.word	0x08008f5c
 8000854:	08008f70 	.word	0x08008f70
 8000858:	08000699 	.word	0x08000699

0800085c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>:

 void MainViewController::handleEvent(EventSender* eventSender, UserEvent userEvent) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4639      	mov	r1, r7
 8000868:	e881 000c 	stmia.w	r1, {r2, r3}
	 if (userEvent.state == UserEventState::Long) {
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d113      	bne.n	800089a <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x3e>
		 if (userEvent.type == UserEventType::Left) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d106      	bne.n	8000886 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x2a>
			 soundEnabled = false;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2200      	movs	r2, #0
 800087c:	735a      	strb	r2, [r3, #13]
			 isUpdated = false;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	731a      	strb	r2, [r3, #12]
	 	 		 }

	 	 	 	 isUpdated = false;
	 	 	 }
	 	 }
 }
 8000884:	e060      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 else if (userEvent.type == UserEventType::Right) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d15d      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 		 soundEnabled = true;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2201      	movs	r2, #1
 8000890:	735a      	strb	r2, [r3, #13]
	 	 	 isUpdated = false;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	731a      	strb	r2, [r3, #12]
 }
 8000898:	e056      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 else if (userEvent.state == UserEventState::Up) {
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d153      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 if (userEvent.type == UserEventType::Up) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d121      	bne.n	80008ea <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x8e>
	 	 		 selectedItem = boundi(0, selectedItem - 1, channelCount - 1);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	7c1b      	ldrb	r3, [r3, #16]
 80008aa:	1e59      	subs	r1, r3, #1
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	7bdb      	ldrb	r3, [r3, #15]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	461a      	mov	r2, r3
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe9d 	bl	80005f4 <_Z6boundiiii>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	741a      	strb	r2, [r3, #16]
	 	 		 if (selectedItem < currentOffset) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7c1a      	ldrb	r2, [r3, #16]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	7b9b      	ldrb	r3, [r3, #14]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d209      	bcs.n	80008e2 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0x86>
	 	 			currentOffset = maxi(0, selectedItem);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	7c1b      	ldrb	r3, [r3, #16]
 80008d2:	4619      	mov	r1, r3
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fe69 	bl	80005ac <_Z4maxiii>
 80008da:	4603      	mov	r3, r0
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2200      	movs	r2, #0
 80008e6:	731a      	strb	r2, [r3, #12]
 }
 80008e8:	e02e      	b.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 	 else if (userEvent.type == UserEventType::Down) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d12b      	bne.n	8000948 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xec>
	 	 		 selectedItem = boundi(0, selectedItem + 1, channelCount - 1);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	7c1b      	ldrb	r3, [r3, #16]
 80008f4:	1c59      	adds	r1, r3, #1
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	7bdb      	ldrb	r3, [r3, #15]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	461a      	mov	r2, r3
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fe78 	bl	80005f4 <_Z6boundiiii>
 8000904:	4603      	mov	r3, r0
 8000906:	b2da      	uxtb	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	741a      	strb	r2, [r3, #16]
	 	 		 if ((currentOffset + kChannelLinesCount - 1) < selectedItem) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	7b9b      	ldrb	r3, [r3, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	7c12      	ldrb	r2, [r2, #16]
 8000916:	4293      	cmp	r3, r2
 8000918:	da13      	bge.n	8000942 <_ZN18MainViewController11handleEventEP11EventSender9UserEvent+0xe6>
	 	 			 currentOffset = boundi(0, selectedItem - kChannelLinesCount + 1, maxi(0, channelCount - kChannelLinesCount + 1));
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	7c1b      	ldrb	r3, [r3, #16]
 800091e:	1e5c      	subs	r4, r3, #1
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	7bdb      	ldrb	r3, [r3, #15]
 8000924:	3b01      	subs	r3, #1
 8000926:	4619      	mov	r1, r3
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fe3f 	bl	80005ac <_Z4maxiii>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	4621      	mov	r1, r4
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe5d 	bl	80005f4 <_Z6boundiiii>
 800093a:	4603      	mov	r3, r0
 800093c:	b2da      	uxtb	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	739a      	strb	r2, [r3, #14]
	 	 	 	 isUpdated = false;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	731a      	strb	r2, [r3, #12]
 }
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}

08000950 <_ZThn4_N18MainViewController11handleEventEP11EventSender9UserEvent>:

private:
	u8g2_t& u8g2;
	bool isUpdated = false;

	void handleEvent(EventSender* eventSender, UserEvent event);
 8000950:	f1a0 0004 	sub.w	r0, r0, #4
 8000954:	f7ff bf82 	b.w	800085c <_ZN18MainViewController11handleEventEP11EventSender9UserEvent>

08000958 <_ZN18MainViewController6updateEv>:

 void MainViewController::update() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
	 if (isUpdated) { return; };
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7b1b      	ldrb	r3, [r3, #12]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <_ZN18MainViewController6updateEv+0x48>
	 isUpdated = true;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	731a      	strb	r2, [r3, #12]

	 u8g2_ClearBuffer(&u8g2);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f9e6 	bl	8001d44 <u8g2_ClearBuffer>
	 this->drawMainScreen(&u8g2, 50, soundEnabled, false, false, true);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6899      	ldr	r1, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7b5b      	ldrb	r3, [r3, #13]
 8000980:	2201      	movs	r2, #1
 8000982:	9202      	str	r2, [sp, #8]
 8000984:	2200      	movs	r2, #0
 8000986:	9201      	str	r2, [sp, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	2232      	movs	r2, #50	@ 0x32
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f80a 	bl	80009a8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>
	 u8g2_SendBuffer(&u8g2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fa46 	bl	8001e2a <u8g2_SendBuffer>
 800099e:	e000      	b.n	80009a2 <_ZN18MainViewController6updateEv+0x4a>
	 if (isUpdated) { return; };
 80009a0:	bf00      	nop
 }
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb>:

 void MainViewController::drawMainScreen(u8g2_t *u8g2, int batteryLevel, bool soundEnabled, bool isScanning, bool alertState, bool dBmMode) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	@ 0x58
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	70fb      	strb	r3, [r7, #3]
   const uint8_t listStartY = 19;
 80009b6:	2313      	movs	r3, #19
 80009b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
   const uint8_t itemHeight = 8;
 80009bc:	2308      	movs	r3, #8
 80009be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
   uint8_t y = listStartY;
 80009c2:	2313      	movs	r3, #19
 80009c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


   u8g2_SetDrawColor(u8g2, 1);
 80009c8:	2101      	movs	r1, #1
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	f002 f92a 	bl	8002c24 <u8g2_SetDrawColor>
   drawBatteryIndicator(u8g2, 108, 0, batteryLevel);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2200      	movs	r2, #0
 80009d6:	216c      	movs	r1, #108	@ 0x6c
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f003 f8cf 	bl	8003b7c <drawBatteryIndicator>
   drawSoundIcon(u8g2, 88, 0, soundEnabled);
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	2200      	movs	r2, #0
 80009e2:	2158      	movs	r1, #88	@ 0x58
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f003 f9b5 	bl	8003d54 <drawSoundIcon>
   u8g2_SetFont(u8g2, u8g2_font_6x12_t_cyrillic);
 80009ea:	497d      	ldr	r1, [pc, #500]	@ (8000be0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x238>)
 80009ec:	68b8      	ldr	r0, [r7, #8]
 80009ee:	f002 f805 	bl	80029fc <u8g2_SetFont>

   if (isScanning) {
 80009f2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d01a      	beq.n	8000a30 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x88>
     u8g2_SetDrawColor(u8g2, 1);
 80009fa:	2101      	movs	r1, #1
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f002 f911 	bl	8002c24 <u8g2_SetDrawColor>
     u8g2_DrawBox(u8g2, 0, y - itemHeight-2, 128, itemHeight+1);
 8000a02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b0a      	subs	r3, #10
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	2309      	movs	r3, #9
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	2100      	movs	r1, #0
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f001 f902 	bl	8001c1e <u8g2_DrawBox>
     u8g2_SetDrawColor(u8g2, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	f002 f901 	bl	8002c24 <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Сканування...");
 8000a22:	4b70      	ldr	r3, [pc, #448]	@ (8000be4 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x23c>)
 8000a24:	2211      	movs	r2, #17
 8000a26:	2101      	movs	r1, #1
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f001 ff45 	bl	80028b8 <u8g2_DrawUTF8>
 8000a2e:	e009      	b.n	8000a44 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x9c>
   } else {
     u8g2_SetDrawColor(u8g2, 1);
 8000a30:	2101      	movs	r1, #1
 8000a32:	68b8      	ldr	r0, [r7, #8]
 8000a34:	f002 f8f6 	bl	8002c24 <u8g2_SetDrawColor>
     u8g2_DrawUTF8(u8g2, 1, 17, "Обраний канал:");
 8000a38:	4b6b      	ldr	r3, [pc, #428]	@ (8000be8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x240>)
 8000a3a:	2211      	movs	r2, #17
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	f001 ff3a 	bl	80028b8 <u8g2_DrawUTF8>
   }

   y = y - 1;
 8000a44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	7b9b      	ldrb	r3, [r3, #14]
 8000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a54:	e0aa      	b.n	8000bac <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x204>
     if(channels[i].frequency > 0) {
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4413      	add	r3, r2
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 809f 	beq.w	8000ba6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       y += itemHeight;
 8000a68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
       char channelName[24] = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
       getChannelName(channels[i].frequency, channels[i].receiver, channelName);
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a88:	3302      	adds	r3, #2
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	8858      	ldrh	r0, [r3, #2]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a94:	3302      	adds	r3, #2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	79db      	ldrb	r3, [r3, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f007 f8fe 	bl	8007ca4 <_Z14getChannelNametiPc>
       int rssi = channels[i].rssi; //convertRSSIToDBm(channels[i].rssi, batteryVoltage, channels[i].receiver);
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aac:	3302      	adds	r3, #2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ab6:	643b      	str	r3, [r7, #64]	@ 0x40
       if (selectedItem == i) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	7c1b      	ldrb	r3, [r3, #16]
 8000abc:	461a      	mov	r2, r3
 8000abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d114      	bne.n	8000aee <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x146>
    	   u8g2_SetDrawColor(u8g2, 1);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	68b8      	ldr	r0, [r7, #8]
 8000ac8:	f002 f8ac 	bl	8002c24 <u8g2_SetDrawColor>
    	   u8g2_DrawBox(u8g2, 1, y - itemHeight, 128, itemHeight);
 8000acc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2380      	movs	r3, #128	@ 0x80
 8000adc:	2101      	movs	r1, #1
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	f001 f89d 	bl	8001c1e <u8g2_DrawBox>
    	   u8g2_SetDrawColor(u8g2, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f002 f89c 	bl	8002c24 <u8g2_SetDrawColor>
 8000aec:	e003      	b.n	8000af6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x14e>
       } else {
    	   u8g2_SetDrawColor(u8g2, 1);
 8000aee:	2101      	movs	r1, #1
 8000af0:	68b8      	ldr	r0, [r7, #8]
 8000af2:	f002 f897 	bl	8002c24 <u8g2_SetDrawColor>
       }

       char printBuffer[24] = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
       if(dBmMode){
 8000b08:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d01c      	beq.n	8000b4a <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1a2>
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s S:%ddBm", channels[i].frequency, channelName, rssi);
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b14:	3302      	adds	r3, #2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4413      	add	r3, r2
 8000b1a:	885b      	ldrh	r3, [r3, #2]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f107 0010 	add.w	r0, r7, #16
 8000b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x244>)
 8000b30:	2118      	movs	r1, #24
 8000b32:	f007 fb1d 	bl	8008170 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 8000b36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2100      	movs	r1, #0
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f001 fe9e 	bl	8002884 <u8g2_DrawStr>
 8000b48:	e02d      	b.n	8000ba6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x1fe>
       } else {
    	   snprintf(printBuffer, sizeof(printBuffer), "%i %s", channels[i].frequency, channelName);
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b4e:	3302      	adds	r3, #2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f107 0010 	add.w	r0, r7, #16
 8000b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4613      	mov	r3, r2
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x248>)
 8000b66:	2118      	movs	r1, #24
 8000b68:	f007 fb02 	bl	8008170 <sniprintf>
           u8g2_DrawStr(u8g2, 0, y, printBuffer);
 8000b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f001 fe83 	bl	8002884 <u8g2_DrawStr>
    	   drawSignalStrengthIndicator(u8g2, 64, y - itemHeight, rssi, (selectedItem == i + 1) ? true : false);
 8000b7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b82:	f1a3 0208 	sub.w	r2, r3, #8
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	7c1b      	ldrb	r3, [r3, #16]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4299      	cmp	r1, r3
 8000b92:	bf0c      	ite	eq
 8000b94:	2301      	moveq	r3, #1
 8000b96:	2300      	movne	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b9e:	2140      	movs	r1, #64	@ 0x40
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f003 f847 	bl	8003c34 <drawSignalStrengthIndicator>
   for (int i = currentOffset; i < channelCount && i < currentOffset + kChannelLinesCount; i++) {
 8000ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ba8:	3301      	adds	r3, #1
 8000baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	7bdb      	ldrb	r3, [r3, #15]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	da06      	bge.n	8000bc6 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x21e>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7b9b      	ldrb	r3, [r3, #14]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f77f af48 	ble.w	8000a56 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0xae>
       }
     }
   }

   if (alertState) {
 8000bc6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <_ZN18MainViewController14drawMainScreenEP11u8g2_structibbbb+0x230>
 	  drawAlertIcon(u8g2, 0, 51);
 8000bce:	2233      	movs	r2, #51	@ 0x33
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f003 f8f0 	bl	8003db8 <drawAlertIcon>
   }
 }
 8000bd8:	bf00      	nop
 8000bda:	3750      	adds	r7, #80	@ 0x50
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	080097cc 	.word	0x080097cc
 8000be4:	080089ac 	.word	0x080089ac
 8000be8:	080089c4 	.word	0x080089c4
 8000bec:	080089e0 	.word	0x080089e0
 8000bf0:	080089f0 	.word	0x080089f0

08000bf4 <_ZN18MainViewControllerD1Ev>:
class MainViewController: public ViewController, public EventReciever {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <_ZN18MainViewControllerD1Ev+0x30>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <_ZN18MainViewControllerD1Ev+0x34>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f007 f809 	bl	8007c24 <_ZN13EventRecieverD1Ev>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f831 	bl	8000c7c <_ZN14ViewControllerD1Ev>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08008f5c 	.word	0x08008f5c
 8000c28:	08008f70 	.word	0x08008f70

08000c2c <_ZThn4_N18MainViewControllerD1Ev>:
 8000c2c:	f1a0 0004 	sub.w	r0, r0, #4
 8000c30:	e7e0      	b.n	8000bf4 <_ZN18MainViewControllerD1Ev>
 8000c32:	bf00      	nop

08000c34 <_ZN18MainViewControllerD0Ev>:
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffd9 	bl	8000bf4 <_ZN18MainViewControllerD1Ev>
 8000c42:	2164      	movs	r1, #100	@ 0x64
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f007 f865 	bl	8007d14 <_ZdlPvj>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_ZThn4_N18MainViewControllerD0Ev>:
 8000c54:	f1a0 0004 	sub.w	r0, r0, #4
 8000c58:	e7ec      	b.n	8000c34 <_ZN18MainViewControllerD0Ev>
	...

08000c5c <_ZN14ViewControllerC1Ev>:
 *      Author: lex
 */

#include "ViewController.h"

ViewController::ViewController() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <_ZN14ViewControllerC1Ev+0x1c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	08008f84 	.word	0x08008f84

08000c7c <_ZN14ViewControllerD1Ev>:

ViewController::~ViewController() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <_ZN14ViewControllerD1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	08008f84 	.word	0x08008f84

08000c9c <_ZN14ViewControllerD0Ev>:
ViewController::~ViewController() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
}
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe9 	bl	8000c7c <_ZN14ViewControllerD1Ev>
 8000caa:	2104      	movs	r1, #4
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f007 f831 	bl	8007d14 <_ZdlPvj>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f003 f9f7 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f003 fa10 	bl	800410e <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b44      	ldr	r3, [pc, #272]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a43      	ldr	r2, [pc, #268]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a35      	ldr	r2, [pc, #212]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2120      	movs	r1, #32
 8000d86:	4829      	ldr	r0, [pc, #164]	@ (8000e2c <MX_GPIO_Init+0x130>)
 8000d88:	f003 ff24 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <MX_GPIO_Init+0x134>)
 8000da4:	f003 fd7a 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BUTTON_PIN_Pin DOWN_BUTTON_PIN_Pin UP_BUTTON_PIN_Pin LEFT_BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN_Pin|DOWN_BUTTON_PIN_Pin|UP_BUTTON_PIN_Pin|LEFT_BUTTON_PIN_Pin;
 8000da8:	230f      	movs	r3, #15
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dac:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481c      	ldr	r0, [pc, #112]	@ (8000e30 <MX_GPIO_Init+0x134>)
 8000dbe:	f003 fd6d 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <MX_GPIO_Init+0x130>)
 8000dda:	f003 fd5f 	bl	800489c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2006      	movs	r0, #6
 8000de4:	f003 f977 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000de8:	2006      	movs	r0, #6
 8000dea:	f003 f990 	bl	800410e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2007      	movs	r0, #7
 8000df4:	f003 f96f 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000df8:	2007      	movs	r0, #7
 8000dfa:	f003 f988 	bl	800410e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2008      	movs	r0, #8
 8000e04:	f003 f967 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e08:	2008      	movs	r0, #8
 8000e0a:	f003 f980 	bl	800410e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2009      	movs	r0, #9
 8000e14:	f003 f95f 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e18:	2009      	movs	r0, #9
 8000e1a:	f003 f978 	bl	800410e <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <MX_I2C3_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_I2C3_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e72:	f003 fee1 	bl	8004c38 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 f984 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000078 	.word	0x20000078
 8000e88:	40005c00 	.word	0x40005c00
 8000e8c:	00061a80 	.word	0x00061a80

08000e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a48      	ldr	r2, [pc, #288]	@ (8000fd0 <HAL_I2C_MspInit+0x140>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	f040 8089 	bne.w	8000fc6 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a45      	ldr	r2, [pc, #276]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec4:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000efe:	2304      	movs	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4833      	ldr	r0, [pc, #204]	@ (8000fd8 <HAL_I2C_MspInit+0x148>)
 8000f0a:	f003 fcc7 	bl	800489c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000f1e:	2309      	movs	r3, #9
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	482c      	ldr	r0, [pc, #176]	@ (8000fdc <HAL_I2C_MspInit+0x14c>)
 8000f2a:	f003 fcb7 	bl	800489c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a27      	ldr	r2, [pc, #156]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000f38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <HAL_I2C_MspInit+0x144>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <HAL_I2C_MspInit+0x154>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8000f50:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f52:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f5a:	2240      	movs	r2, #64	@ 0x40
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8000f8a:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f8c:	f003 f8da 	bl	8004144 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_I2C_MspInit+0x10a>
    {
      Error_Handler();
 8000f96:	f000 f8f7 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000f9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <HAL_I2C_MspInit+0x150>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2048      	movs	r0, #72	@ 0x48
 8000fac:	f003 f893 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000fb0:	2048      	movs	r0, #72	@ 0x48
 8000fb2:	f003 f8ac 	bl	800410e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2049      	movs	r0, #73	@ 0x49
 8000fbc:	f003 f88b 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000fc0:	2049      	movs	r0, #73	@ 0x49
 8000fc2:	f003 f8a4 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	@ 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40005c00 	.word	0x40005c00
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	200000cc 	.word	0x200000cc
 8000fe4:	40026070 	.word	0x40026070

08000fe8 <_Z9u8g2_Initv>:
    1,
    2,
	3
};

void u8g2_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_i2c_dma, u8x8_gpio_and_delay_stm32);
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <_Z9u8g2_Initv+0x38>)
 8000fee:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <_Z9u8g2_Initv+0x3c>)
 8000ff0:	490d      	ldr	r1, [pc, #52]	@ (8001028 <_Z9u8g2_Initv+0x40>)
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <_Z9u8g2_Initv+0x44>)
 8000ff4:	f000 ff38 	bl	8001e68 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
    u8g2_InitDisplay(&u8g2);
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <_Z9u8g2_Initv+0x44>)
 8000ffa:	f002 fc17 	bl	800382c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000ffe:	2100      	movs	r1, #0
 8001000:	480a      	ldr	r0, [pc, #40]	@ (800102c <_Z9u8g2_Initv+0x44>)
 8001002:	f002 fc22 	bl	800384a <u8x8_SetPowerSave>
    u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8001006:	490a      	ldr	r1, [pc, #40]	@ (8001030 <_Z9u8g2_Initv+0x48>)
 8001008:	4808      	ldr	r0, [pc, #32]	@ (800102c <_Z9u8g2_Initv+0x44>)
 800100a:	f001 fcf7 	bl	80029fc <u8g2_SetFont>

    u8g2_ClearBuffer(&u8g2);
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <_Z9u8g2_Initv+0x44>)
 8001010:	f000 fe98 	bl	8001d44 <u8g2_ClearBuffer>
    u8g2_SendBuffer(&u8g2);
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <_Z9u8g2_Initv+0x44>)
 8001016:	f000 ff08 	bl	8001e2a <u8g2_SendBuffer>
//    u8g2_SendBuffer(&u8g2);

//    ssd1306_SetCursor(5, 5);
//    ssd1306_WriteString("qwerty", Font_16x26, White);
//    ssd1306_UpdateScreen();
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	08003ae5 	.word	0x08003ae5
 8001024:	080039c9 	.word	0x080039c9
 8001028:	0800aa20 	.word	0x0800aa20
 800102c:	2000012c 	.word	0x2000012c
 8001030:	08008fe8 	.word	0x08008fe8

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	@ 0x68
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f002 fedb 	bl	8003df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f81d 	bl	800107c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f7ff fe5b 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f7ff fe39 	bl	8000cbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800104a:	f000 f99b 	bl	8001384 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800104e:	f7ff fef1 	bl	8000e34 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
//  ssd1306_Init();
  u8g2_Init();
 8001052:	f7ff ffc9 	bl	8000fe8 <_Z9u8g2_Initv>
//  u8g2_SendBuffer(&u8g2);

//  ssd1306_Line(10, 5, 108, 5, White);
//  ssd1306_UpdateScreen();

  MainViewController mainViewController = MainViewController(u8g2);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4906      	ldr	r1, [pc, #24]	@ (8001074 <main+0x40>)
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb30 	bl	80006c0 <_ZN18MainViewControllerC1ER11u8g2_struct>
  userActionPanel.eventReciever = &mainViewController;
 8001060:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <main+0x44>)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	3304      	adds	r3, #4
 8001066:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainViewController.update();
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fc74 	bl	8000958 <_ZN18MainViewController6updateEv>
 8001070:	e7fa      	b.n	8001068 <main+0x34>
 8001072:	bf00      	nop
 8001074:	2000012c 	.word	0x2000012c
 8001078:	200001c0 	.word	0x200001c0

0800107c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	@ 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f007 f8cc 	bl	8008228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001160 <_Z18SystemClock_Configv+0xe4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <_Z18SystemClock_Configv+0xe4>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <_Z18SystemClock_Configv+0xe4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <_Z18SystemClock_Configv+0xe8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <_Z18SystemClock_Configv+0xe8>)
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <_Z18SystemClock_Configv+0xe8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010f0:	2310      	movs	r3, #16
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fe:	2307      	movs	r3, #7
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	4618      	mov	r0, r3
 8001108:	f005 fe20 	bl	8006d4c <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf14      	ite	ne
 8001112:	2301      	movne	r3, #1
 8001114:	2300      	moveq	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 800111c:	f000 f834 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2102      	movs	r1, #2
 800113c:	4618      	mov	r0, r3
 800113e:	f006 f87d 	bl	800723c <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001152:	f000 f819 	bl	8001188 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	@ 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	userActionPanel.handleInterrupt(GPIO_Pin);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4619      	mov	r1, r3
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001178:	f000 fa50 	bl	800161c <_ZN15UserActionPanel15handleInterruptEt>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001c0 	.word	0x200001c0

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800119a:	f000 f9c9 	bl	8001530 <_ZN15UserActionPanelC1Ev>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001c0 	.word	0x200001c0

080011a8 <_Z41__static_initialization_and_destruction_1v>:
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
UserActionPanel userActionPanel;
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80011ae:	f000 fa0d 	bl	80015cc <_ZN15UserActionPanelD1Ev>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001c0 	.word	0x200001c0

080011bc <_GLOBAL__sub_I_u8g2>:
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
 80011c0:	f7ff ffe8 	bl	8001194 <_Z41__static_initialization_and_destruction_0v>
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_GLOBAL__sub_D_u8g2>:
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	f7ff ffed 	bl	80011a8 <_Z41__static_initialization_and_destruction_1v>
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f002 fe0f 	bl	8003e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_BUTTON_PIN_Pin);
 8001282:	2001      	movs	r0, #1
 8001284:	f003 fcc0 	bl	8004c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_BUTTON_PIN_Pin);
 8001290:	2002      	movs	r0, #2
 8001292:	f003 fcb9 	bl	8004c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}

0800129a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_BUTTON_PIN_Pin);
 800129e:	2004      	movs	r0, #4
 80012a0:	f003 fcb2 	bl	8004c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_BUTTON_PIN_Pin);
 80012ac:	2008      	movs	r0, #8
 80012ae:	f003 fcab 	bl	8004c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <DMA1_Stream4_IRQHandler+0x10>)
 80012be:	f003 f869 	bl	8004394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000cc 	.word	0x200000cc

080012cc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <I2C3_EV_IRQHandler+0x10>)
 80012d2:	f003 ff37 	bl	8005144 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000078 	.word	0x20000078

080012e0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <I2C3_ER_IRQHandler+0x10>)
 80012e6:	f004 f89e 	bl	8005426 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000078 	.word	0x20000078

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f006 ff98 	bl	8008258 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20018000 	.word	0x20018000
 8001354:	00000400 	.word	0x00000400
 8001358:	2000020c 	.word	0x2000020c
 800135c:	20000ac0 	.word	0x20000ac0

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f006 f95e 	bl	800767c <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f7ff fedf 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000210 	.word	0x20000210
 80013d4:	40004400 	.word	0x40004400

080013d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_UART_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12b      	bne.n	8001452 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001432:	230c      	movs	r3, #12
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <HAL_UART_MspInit+0x8c>)
 800144e:	f003 fa25 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	@ 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40004400 	.word	0x40004400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800146c:	f7ff ff78 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001496:	f006 fee5 	bl	8008264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fdcb 	bl	8001034 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014ac:	0800ab14 	.word	0x0800ab14
  ldr r2, =_sbss
 80014b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014b4:	20000ac0 	.word	0x20000ac0

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>

080014ba <_ZN9UserEventC1E14UserEventState13UserEventType>:
enum class UserEventState { Down, Up, Long };
enum class UserEventType { Down, Up, Left, Right, Enter };

class UserEvent: public Event {
public:
	UserEvent(UserEventState state, UserEventType type): state(state), type(type) { };
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN10UserButtonC1EtP12GPIO_TypeDef>:
	virtual void onButtonLong(UserButton* sender) = 0;
};

class UserButton {
public:
	UserButton(uint16_t pin, GPIO_TypeDef* port): pin(pin), port(port) {}
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	897a      	ldrh	r2, [r7, #10]
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_ZN18UserButtonDelegateC1Ev>:
class UserButtonDelegate {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <_ZN18UserButtonDelegateC1Ev+0x1c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	08008fdc 	.word	0x08008fdc

08001530 <_ZN15UserActionPanelC1Ev>:

#include "UserActionPanel.h"
#include "UserEvent.h"


UserActionPanel::UserActionPanel() {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f006 fb82 	bl	8007c44 <_ZN11EventSenderC1Ev>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ffe3 	bl	8001510 <_ZN18UserButtonDelegateC1Ev>
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <_ZN15UserActionPanelC1Ev+0x90>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <_ZN15UserActionPanelC1Ev+0x94>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	330c      	adds	r3, #12
 800155a:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <_ZN15UserActionPanelC1Ev+0x98>)
 800155c:	2104      	movs	r1, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ffbe 	bl	80014e0 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	331c      	adds	r3, #28
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <_ZN15UserActionPanelC1Ev+0x98>)
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffb7 	bl	80014e0 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	332c      	adds	r3, #44	@ 0x2c
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_ZN15UserActionPanelC1Ev+0x98>)
 8001578:	2108      	movs	r1, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ffb0 	bl	80014e0 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	333c      	adds	r3, #60	@ 0x3c
 8001584:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <_ZN15UserActionPanelC1Ev+0x98>)
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffa9 	bl	80014e0 <_ZN10UserButtonC1EtP12GPIO_TypeDef>
	upButton.delegate = this;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f103 0208 	add.w	r2, r3, #8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	611a      	str	r2, [r3, #16]
	downButton.delegate = this;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f103 0208 	add.w	r2, r3, #8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	621a      	str	r2, [r3, #32]
	leftButton.delegate = this;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f103 0208 	add.w	r2, r3, #8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
	rightButton.delegate = this;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 0208 	add.w	r2, r3, #8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08008fac 	.word	0x08008fac
 80015c4:	08008fc8 	.word	0x08008fc8
 80015c8:	40020800 	.word	0x40020800

080015cc <_ZN15UserActionPanelD1Ev>:

UserActionPanel::~UserActionPanel() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <_ZN15UserActionPanelD1Ev+0x28>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <_ZN15UserActionPanelD1Ev+0x2c>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated destructor stub
}
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f006 fb3e 	bl	8007c64 <_ZN11EventSenderD1Ev>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08008fac 	.word	0x08008fac
 80015f8:	08008fc8 	.word	0x08008fc8

080015fc <_ZN15UserActionPanelD0Ev>:
UserActionPanel::~UserActionPanel() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
}
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffe1 	bl	80015cc <_ZN15UserActionPanelD1Ev>
 800160a:	214c      	movs	r1, #76	@ 0x4c
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f006 fb81 	bl	8007d14 <_ZdlPvj>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN15UserActionPanel15handleInterruptEt>:

void UserActionPanel::handleInterrupt(uint16_t pin) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
	switch (pin) {
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	3b01      	subs	r3, #1
 800162c:	2b07      	cmp	r3, #7
 800162e:	d82b      	bhi.n	8001688 <_ZN15UserActionPanel15handleInterruptEt+0x6c>
 8001630:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <_ZN15UserActionPanel15handleInterruptEt+0x1c>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	0800167d 	.word	0x0800167d
 800163c:	08001665 	.word	0x08001665
 8001640:	08001689 	.word	0x08001689
 8001644:	08001659 	.word	0x08001659
 8001648:	08001689 	.word	0x08001689
 800164c:	08001689 	.word	0x08001689
 8001650:	08001689 	.word	0x08001689
 8001654:	08001671 	.word	0x08001671
		case UP_BUTTON_PIN_Pin: upButton.handleInterrupt(); break;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	330c      	adds	r3, #12
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f9b1 	bl	80019c4 <_ZN10UserButton15handleInterruptEv>
 8001662:	e012      	b.n	800168a <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case DOWN_BUTTON_PIN_Pin: downButton.handleInterrupt(); break;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	331c      	adds	r3, #28
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f9ab 	bl	80019c4 <_ZN10UserButton15handleInterruptEv>
 800166e:	e00c      	b.n	800168a <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case LEFT_BUTTON_PIN_Pin: leftButton.handleInterrupt(); break;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	332c      	adds	r3, #44	@ 0x2c
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f9a5 	bl	80019c4 <_ZN10UserButton15handleInterruptEv>
 800167a:	e006      	b.n	800168a <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    case RIGHT_BUTTON_PIN_Pin: rightButton.handleInterrupt(); break;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	333c      	adds	r3, #60	@ 0x3c
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f99f 	bl	80019c4 <_ZN10UserButton15handleInterruptEv>
 8001686:	e000      	b.n	800168a <_ZN15UserActionPanel15handleInterruptEt+0x6e>
	    default: break;
 8001688:	bf00      	nop
	}
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop

08001694 <_ZN15UserActionPanel12onButtonDownEP10UserButton>:

void UserActionPanel::onButtonDown(UserButton* sender) {
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	b08b      	sub	sp, #44	@ 0x2c
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d073      	beq.n	800178c <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d071      	beq.n	8001790 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0xfc>

	switch (sender->pin) {
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d86e      	bhi.n	8001794 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x100>
 80016b6:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x28>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	08001761 	.word	0x08001761
 80016c0:	08001709 	.word	0x08001709
 80016c4:	08001795 	.word	0x08001795
 80016c8:	080016dd 	.word	0x080016dd
 80016cc:	08001795 	.word	0x08001795
 80016d0:	08001795 	.word	0x08001795
 80016d4:	08001795 	.word	0x08001795
 80016d8:	08001735 	.word	0x08001735
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Up)); break;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685d      	ldr	r5, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3308      	adds	r3, #8
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	687e      	ldr	r6, [r7, #4]
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2201      	movs	r2, #1
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fee0 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	cb0c      	ldmia	r3, {r2, r3}
 8001700:	4631      	mov	r1, r6
 8001702:	4628      	mov	r0, r5
 8001704:	47a0      	blx	r4
 8001706:	e046      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Down)); break;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685d      	ldr	r5, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3308      	adds	r3, #8
 8001714:	681c      	ldr	r4, [r3, #0]
 8001716:	687e      	ldr	r6, [r7, #4]
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff feca 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	cb0c      	ldmia	r3, {r2, r3}
 800172c:	4631      	mov	r1, r6
 800172e:	4628      	mov	r0, r5
 8001730:	47a0      	blx	r4
 8001732:	e030      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Left)); break;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685d      	ldr	r5, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3308      	adds	r3, #8
 8001740:	681c      	ldr	r4, [r3, #0]
 8001742:	687e      	ldr	r6, [r7, #4]
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	2202      	movs	r2, #2
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff feb4 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	cb0c      	ldmia	r3, {r2, r3}
 8001758:	4631      	mov	r1, r6
 800175a:	4628      	mov	r0, r5
 800175c:	47a0      	blx	r4
 800175e:	e01a      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Down, UserEventType::Right)); break;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685d      	ldr	r5, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3308      	adds	r3, #8
 800176c:	681c      	ldr	r4, [r3, #0]
 800176e:	687e      	ldr	r6, [r7, #4]
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	2203      	movs	r2, #3
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fe9e 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	cb0c      	ldmia	r3, {r2, r3}
 8001784:	4631      	mov	r1, r6
 8001786:	4628      	mov	r0, r5
 8001788:	47a0      	blx	r4
 800178a:	e004      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!sender) { return; };
 800178c:	bf00      	nop
 800178e:	e002      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
	if (!eventReciever) { return; };
 8001790:	bf00      	nop
 8001792:	e000      	b.n	8001796 <_ZN15UserActionPanel12onButtonDownEP10UserButton+0x102>
		default: break;
 8001794:	bf00      	nop
	}
}
 8001796:	372c      	adds	r7, #44	@ 0x2c
 8001798:	46bd      	mov	sp, r7
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800179c <_ZThn8_N15UserActionPanel12onButtonDownEP10UserButton>:
	UserButton upButton = UserButton(UP_BUTTON_PIN_Pin, UP_BUTTON_PIN_GPIO_Port);
	UserButton downButton = UserButton(DOWN_BUTTON_PIN_Pin, DOWN_BUTTON_PIN_GPIO_Port);
	UserButton leftButton = UserButton(LEFT_BUTTON_PIN_Pin, LEFT_BUTTON_PIN_GPIO_Port);
	UserButton rightButton = UserButton(RIGHT_BUTTON_PIN_Pin, RIGHT_BUTTON_PIN_GPIO_Port);

	virtual void onButtonDown(UserButton* sender);
 800179c:	f1a0 0008 	sub.w	r0, r0, #8
 80017a0:	f7ff bf78 	b.w	8001694 <_ZN15UserActionPanel12onButtonDownEP10UserButton>

080017a4 <_ZN15UserActionPanel10onButtonUpEP10UserButton>:

void UserActionPanel::onButtonUp(UserButton* sender) {
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	b08b      	sub	sp, #44	@ 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d073      	beq.n	800189c <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d071      	beq.n	80018a0 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0xfc>

	switch (sender->pin) {
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	2b07      	cmp	r3, #7
 80017c4:	d86e      	bhi.n	80018a4 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x100>
 80017c6:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x28>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	08001871 	.word	0x08001871
 80017d0:	08001819 	.word	0x08001819
 80017d4:	080018a5 	.word	0x080018a5
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	080018a5 	.word	0x080018a5
 80017e0:	080018a5 	.word	0x080018a5
 80017e4:	080018a5 	.word	0x080018a5
 80017e8:	08001845 	.word	0x08001845
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Up)); break;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685d      	ldr	r5, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3308      	adds	r3, #8
 80017f8:	681c      	ldr	r4, [r3, #0]
 80017fa:	687e      	ldr	r6, [r7, #4]
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	2201      	movs	r2, #1
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fe58 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	cb0c      	ldmia	r3, {r2, r3}
 8001810:	4631      	mov	r1, r6
 8001812:	4628      	mov	r0, r5
 8001814:	47a0      	blx	r4
 8001816:	e046      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Down)); break;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685d      	ldr	r5, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3308      	adds	r3, #8
 8001824:	681c      	ldr	r4, [r3, #0]
 8001826:	687e      	ldr	r6, [r7, #4]
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2200      	movs	r2, #0
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe42 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	cb0c      	ldmia	r3, {r2, r3}
 800183c:	4631      	mov	r1, r6
 800183e:	4628      	mov	r0, r5
 8001840:	47a0      	blx	r4
 8001842:	e030      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Left)); break;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685d      	ldr	r5, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3308      	adds	r3, #8
 8001850:	681c      	ldr	r4, [r3, #0]
 8001852:	687e      	ldr	r6, [r7, #4]
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	2202      	movs	r2, #2
 800185a:	2101      	movs	r1, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe2c 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	cb0c      	ldmia	r3, {r2, r3}
 8001868:	4631      	mov	r1, r6
 800186a:	4628      	mov	r0, r5
 800186c:	47a0      	blx	r4
 800186e:	e01a      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Up, UserEventType::Right)); break;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685d      	ldr	r5, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3308      	adds	r3, #8
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	687e      	ldr	r6, [r7, #4]
 8001880:	f107 0320 	add.w	r3, r7, #32
 8001884:	2203      	movs	r2, #3
 8001886:	2101      	movs	r1, #1
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe16 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	cb0c      	ldmia	r3, {r2, r3}
 8001894:	4631      	mov	r1, r6
 8001896:	4628      	mov	r0, r5
 8001898:	47a0      	blx	r4
 800189a:	e004      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!sender) { return; };
 800189c:	bf00      	nop
 800189e:	e002      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
	if (!eventReciever) { return; };
 80018a0:	bf00      	nop
 80018a2:	e000      	b.n	80018a6 <_ZN15UserActionPanel10onButtonUpEP10UserButton+0x102>
		default: break;
 80018a4:	bf00      	nop
	}
}
 80018a6:	372c      	adds	r7, #44	@ 0x2c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ac <_ZThn8_N15UserActionPanel10onButtonUpEP10UserButton>:
	virtual void onButtonUp(UserButton* sender);
 80018ac:	f1a0 0008 	sub.w	r0, r0, #8
 80018b0:	f7ff bf78 	b.w	80017a4 <_ZN15UserActionPanel10onButtonUpEP10UserButton>

080018b4 <_ZN15UserActionPanel12onButtonLongEP10UserButton>:

void UserActionPanel::onButtonLong(UserButton* sender) {
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b08b      	sub	sp, #44	@ 0x2c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	if (!sender) { return; };
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d073      	beq.n	80019ac <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xf8>
	if (!eventReciever) { return; };
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d071      	beq.n	80019b0 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0xfc>

	switch (sender->pin) {
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d86e      	bhi.n	80019b4 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x100>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x28>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	08001981 	.word	0x08001981
 80018e0:	08001929 	.word	0x08001929
 80018e4:	080019b5 	.word	0x080019b5
 80018e8:	080018fd 	.word	0x080018fd
 80018ec:	080019b5 	.word	0x080019b5
 80018f0:	080019b5 	.word	0x080019b5
 80018f4:	080019b5 	.word	0x080019b5
 80018f8:	08001955 	.word	0x08001955
		case UP_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Up)); break;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685d      	ldr	r5, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3308      	adds	r3, #8
 8001908:	681c      	ldr	r4, [r3, #0]
 800190a:	687e      	ldr	r6, [r7, #4]
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	2201      	movs	r2, #1
 8001912:	2102      	movs	r1, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fdd0 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	cb0c      	ldmia	r3, {r2, r3}
 8001920:	4631      	mov	r1, r6
 8001922:	4628      	mov	r0, r5
 8001924:	47a0      	blx	r4
 8001926:	e046      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case DOWN_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Down)); break;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685d      	ldr	r5, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3308      	adds	r3, #8
 8001934:	681c      	ldr	r4, [r3, #0]
 8001936:	687e      	ldr	r6, [r7, #4]
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	2102      	movs	r1, #2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fdba 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	cb0c      	ldmia	r3, {r2, r3}
 800194c:	4631      	mov	r1, r6
 800194e:	4628      	mov	r0, r5
 8001950:	47a0      	blx	r4
 8001952:	e030      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case LEFT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Left)); break;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685d      	ldr	r5, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3308      	adds	r3, #8
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	687e      	ldr	r6, [r7, #4]
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	2202      	movs	r2, #2
 800196a:	2102      	movs	r1, #2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fda4 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	cb0c      	ldmia	r3, {r2, r3}
 8001978:	4631      	mov	r1, r6
 800197a:	4628      	mov	r0, r5
 800197c:	47a0      	blx	r4
 800197e:	e01a      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		case RIGHT_BUTTON_PIN_Pin: eventReciever->handleEvent(this, UserEvent(UserEventState::Long, UserEventType::Right)); break;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685d      	ldr	r5, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3308      	adds	r3, #8
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	687e      	ldr	r6, [r7, #4]
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	2203      	movs	r2, #3
 8001996:	2102      	movs	r1, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd8e 	bl	80014ba <_ZN9UserEventC1E14UserEventState13UserEventType>
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	cb0c      	ldmia	r3, {r2, r3}
 80019a4:	4631      	mov	r1, r6
 80019a6:	4628      	mov	r0, r5
 80019a8:	47a0      	blx	r4
 80019aa:	e004      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!sender) { return; };
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
	if (!eventReciever) { return; };
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <_ZN15UserActionPanel12onButtonLongEP10UserButton+0x102>
		default: break;
 80019b4:	bf00      	nop
	}
}
 80019b6:	372c      	adds	r7, #44	@ 0x2c
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019bc <_ZThn8_N15UserActionPanel12onButtonLongEP10UserButton>:
	virtual void onButtonLong(UserButton* sender);
 80019bc:	f1a0 0008 	sub.w	r0, r0, #8
 80019c0:	f7ff bf78 	b.w	80018b4 <_ZN15UserActionPanel12onButtonLongEP10UserButton>

080019c4 <_ZN10UserButton15handleInterruptEv>:
#include <UserEvent.h>

#define DEBOUNCE_TIME_MS 50
#define LONG_PRESS_TIME_MS 1000  // (1 секунда)

void UserButton::handleInterrupt() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if (!delegate) { return; };
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d04d      	beq.n	8001a70 <_ZN10UserButton15handleInterruptEv+0xac>

	uint32_t currentTime = HAL_GetTick();
 80019d4:	f002 fa74 	bl	8003ec0 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]
	if ((currentTime - lastActionTime) < DEBOUNCE_TIME_MS) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b31      	cmp	r3, #49	@ 0x31
 80019e4:	d803      	bhi.n	80019ee <_ZN10UserButton15handleInterruptEv+0x2a>
		lastActionTime = currentTime;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]
		return;
 80019ec:	e041      	b.n	8001a72 <_ZN10UserButton15handleInterruptEv+0xae>
	}

	bool isPressed = HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f003 f8d3 	bl	8004ba4 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	72fb      	strb	r3, [r7, #11]
	if (isPressed) {
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <_ZN10UserButton15handleInterruptEv+0x60>
		delegate->onButtonDown(this);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4798      	blx	r3
 8001a22:	e021      	b.n	8001a68 <_ZN10UserButton15handleInterruptEv+0xa4>
	}
	else {
		bool isLong = LONG_PRESS_TIME_MS < (currentTime - lastActionTime);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	bf8c      	ite	hi
 8001a32:	2301      	movhi	r3, #1
 8001a34:	2300      	movls	r3, #0
 8001a36:	72bb      	strb	r3, [r7, #10]
		if (isLong) {
 8001a38:	7abb      	ldrb	r3, [r7, #10]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <_ZN10UserButton15handleInterruptEv+0x90>
			delegate->onButtonLong(this);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3308      	adds	r3, #8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4798      	blx	r3
 8001a52:	e009      	b.n	8001a68 <_ZN10UserButton15handleInterruptEv+0xa4>
		}
		else {
			delegate->onButtonUp(this);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3
		}
	}

	lastActionTime = currentTime;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	e000      	b.n	8001a72 <_ZN10UserButton15handleInterruptEv+0xae>
	if (!delegate) { return; };
 8001a70:	bf00      	nop
}
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	817b      	strh	r3, [r7, #10]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	813b      	strh	r3, [r7, #8]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001a98:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001a9a:	7cfb      	ldrb	r3, [r7, #19]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001aa8:	897a      	ldrh	r2, [r7, #10]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4413      	add	r3, r2
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	893b      	ldrh	r3, [r7, #8]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	893a      	ldrh	r2, [r7, #8]
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4603      	mov	r3, r0
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f001 f8fa 	bl	8002cb8 <u8g2_IsIntersection>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d062      	beq.n	8001b90 <u8g2_DrawHXBMP+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 8001ace:	e057      	b.n	8001b80 <u8g2_DrawHXBMP+0x108>
  {
    uint8_t current_bit = u8x8_pgm_read(b) & mask;
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001ade:	e013      	b.n	8001b08 <u8g2_DrawHXBMP+0x90>
    {
        run_length++;
 8001ae0:	8abb      	ldrh	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	82bb      	strh	r3, [r7, #20]
        x++;
 8001ae6:	897b      	ldrh	r3, [r7, #10]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d104      	bne.n	8001b02 <u8g2_DrawHXBMP+0x8a>
        {
            mask = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	75fb      	strb	r3, [r7, #23]
            b++;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	3301      	adds	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
        }
        len--;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? ((u8x8_pgm_read(b) & mask) == 0) : ((u8x8_pgm_read(b) & mask) != 0 )  ))
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d011      	beq.n	8001b32 <u8g2_DrawHXBMP+0xba>
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <u8g2_DrawHXBMP+0xac>
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0de      	beq.n	8001ae0 <u8g2_DrawHXBMP+0x68>
 8001b22:	e006      	b.n	8001b32 <u8g2_DrawHXBMP+0xba>
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1d6      	bne.n	8001ae0 <u8g2_DrawHXBMP+0x68>
    }
    if (current_bit)
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00f      	beq.n	8001b58 <u8g2_DrawHXBMP+0xe0>
    {
        u8g2->draw_color = color;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	7cfa      	ldrb	r2, [r7, #19]
 8001b3c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8001b40:	897a      	ldrh	r2, [r7, #10]
 8001b42:	8abb      	ldrh	r3, [r7, #20]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b299      	uxth	r1, r3
 8001b48:	8abb      	ldrh	r3, [r7, #20]
 8001b4a:	893a      	ldrh	r2, [r7, #8]
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	9000      	str	r0, [sp, #0]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 ffdc 	bl	8002b0e <u8g2_DrawHVLine>
 8001b56:	e013      	b.n	8001b80 <u8g2_DrawHXBMP+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <u8g2_DrawHXBMP+0x108>
    {
        u8g2->draw_color = ncolor;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	7cba      	ldrb	r2, [r7, #18]
 8001b66:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8001b6a:	897a      	ldrh	r2, [r7, #10]
 8001b6c:	8abb      	ldrh	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	b299      	uxth	r1, r3
 8001b72:	8abb      	ldrh	r3, [r7, #20]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	2000      	movs	r0, #0
 8001b78:	9000      	str	r0, [sp, #0]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 ffc7 	bl	8002b0e <u8g2_DrawHVLine>
  while(len > 0)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1a4      	bne.n	8001ad0 <u8g2_DrawHXBMP+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	7cfa      	ldrb	r2, [r7, #19]
 8001b8a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001b8e:	e000      	b.n	8001b92 <u8g2_DrawHXBMP+0x11a>
    return;
 8001b90:	bf00      	nop
}
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	817b      	strh	r3, [r7, #10]
 8001baa:	460b      	mov	r3, r1
 8001bac:	813b      	strh	r3, [r7, #8]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001bb6:	8afb      	ldrh	r3, [r7, #22]
 8001bb8:	3307      	adds	r3, #7
 8001bba:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001bbc:	8afb      	ldrh	r3, [r7, #22]
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001bc2:	897a      	ldrh	r2, [r7, #10]
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b298      	uxth	r0, r3
 8001bca:	893a      	ldrh	r2, [r7, #8]
 8001bcc:	8c3b      	ldrh	r3, [r7, #32]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	893a      	ldrh	r2, [r7, #8]
 8001bd4:	8979      	ldrh	r1, [r7, #10]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	4603      	mov	r3, r0
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f001 f86c 	bl	8002cb8 <u8g2_IsIntersection>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d017      	beq.n	8001c16 <u8g2_DrawXBMP+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001be6:	e012      	b.n	8001c0e <u8g2_DrawXBMP+0x76>
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
 8001be8:	88f8      	ldrh	r0, [r7, #6]
 8001bea:	893a      	ldrh	r2, [r7, #8]
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7ff ff3f 	bl	8001a78 <u8g2_DrawHXBMP>
    bitmap += blen;
 8001bfa:	8afb      	ldrh	r3, [r7, #22]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfe:	4413      	add	r3, r2
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001c02:	893b      	ldrh	r3, [r7, #8]
 8001c04:	3301      	adds	r3, #1
 8001c06:	813b      	strh	r3, [r7, #8]
    h--;
 8001c08:	8c3b      	ldrh	r3, [r7, #32]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001c0e:	8c3b      	ldrh	r3, [r7, #32]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e9      	bne.n	8001be8 <u8g2_DrawXBMP+0x50>
 8001c14:	e000      	b.n	8001c18 <u8g2_DrawXBMP+0x80>
    return;
 8001c16:	bf00      	nop
  }
}
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	817b      	strh	r3, [r7, #10]
 8001c30:	460b      	mov	r3, r1
 8001c32:	813b      	strh	r3, [r7, #8]
 8001c34:	4613      	mov	r3, r2
 8001c36:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001c38:	897a      	ldrh	r2, [r7, #10]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	893a      	ldrh	r2, [r7, #8]
 8001c42:	8b3b      	ldrh	r3, [r7, #24]
 8001c44:	4413      	add	r3, r2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	893a      	ldrh	r2, [r7, #8]
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f001 f831 	bl	8002cb8 <u8g2_IsIntersection>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d012      	beq.n	8001c82 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001c5c:	e00d      	b.n	8001c7a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	8979      	ldrh	r1, [r7, #10]
 8001c64:	2000      	movs	r0, #0
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 ff50 	bl	8002b0e <u8g2_DrawHVLine>
    y++;    
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	813b      	strh	r3, [r7, #8]
    h--;
 8001c74:	8b3b      	ldrh	r3, [r7, #24]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001c7a:	8b3b      	ldrh	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <u8g2_DrawBox+0x40>
 8001c80:	e000      	b.n	8001c84 <u8g2_DrawBox+0x66>
    return;
 8001c82:	bf00      	nop
  }
}
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b088      	sub	sp, #32
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	4608      	mov	r0, r1
 8001c94:	4611      	mov	r1, r2
 8001c96:	461a      	mov	r2, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	813b      	strh	r3, [r7, #8]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ca8:	897a      	ldrh	r2, [r7, #10]
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	4413      	add	r3, r2
 8001cae:	b298      	uxth	r0, r3
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8c3b      	ldrh	r3, [r7, #32]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	8979      	ldrh	r1, [r7, #10]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fff9 	bl	8002cb8 <u8g2_IsIntersection>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d037      	beq.n	8001d3c <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	893a      	ldrh	r2, [r7, #8]
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	9000      	str	r0, [sp, #0]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 ff19 	bl	8002b0e <u8g2_DrawHVLine>
  if (h >= 2) {
 8001cdc:	8c3b      	ldrh	r3, [r7, #32]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d92d      	bls.n	8001d3e <u8g2_DrawFrame+0xb4>
    h-=2;
 8001ce2:	8c3b      	ldrh	r3, [r7, #32]
 8001ce4:	3b02      	subs	r3, #2
 8001ce6:	843b      	strh	r3, [r7, #32]
    y++;
 8001ce8:	893b      	ldrh	r3, [r7, #8]
 8001cea:	3301      	adds	r3, #1
 8001cec:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001cee:	8c3b      	ldrh	r3, [r7, #32]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01a      	beq.n	8001d2a <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001cf4:	8c3b      	ldrh	r3, [r7, #32]
 8001cf6:	893a      	ldrh	r2, [r7, #8]
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	9000      	str	r0, [sp, #0]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 ff05 	bl	8002b0e <u8g2_DrawHVLine>
      x+=w;
 8001d04:	897a      	ldrh	r2, [r7, #10]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4413      	add	r3, r2
 8001d0a:	817b      	strh	r3, [r7, #10]
      x--;
 8001d0c:	897b      	ldrh	r3, [r7, #10]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	8979      	ldrh	r1, [r7, #10]
 8001d18:	2001      	movs	r0, #1
 8001d1a:	9000      	str	r0, [sp, #0]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fef6 	bl	8002b0e <u8g2_DrawHVLine>
      y+=h;
 8001d22:	893a      	ldrh	r2, [r7, #8]
 8001d24:	8c3b      	ldrh	r3, [r7, #32]
 8001d26:	4413      	add	r3, r2
 8001d28:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	8af9      	ldrh	r1, [r7, #22]
 8001d30:	2000      	movs	r0, #0
 8001d32:	9000      	str	r0, [sp, #0]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 feea 	bl	8002b0e <u8g2_DrawHVLine>
 8001d3a:	e000      	b.n	8001d3e <u8g2_DrawFrame+0xb4>
    return;
 8001d3c:	bf00      	nop
  }
}
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	7c1b      	ldrb	r3, [r3, #16]
 8001d52:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f006 fa58 	bl	8008228 <memset>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	7c1b      	ldrb	r3, [r3, #16]
 8001d96:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da0:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	89ba      	ldrh	r2, [r7, #12]
 8001da8:	fb12 f303 	smulbb	r3, r2, r3
 8001dac:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001dae:	89bb      	ldrh	r3, [r7, #12]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001db4:	89bb      	ldrh	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001dbc:	7bf9      	ldrb	r1, [r7, #15]
 8001dbe:	78ba      	ldrb	r2, [r7, #2]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f001 fcfe 	bl	80037ca <u8x8_DrawTile>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001de8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001df0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	7c5b      	ldrb	r3, [r3, #17]
 8001df8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001dfa:	7bba      	ldrb	r2, [r7, #14]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffbd 	bl	8001d80 <u8g2_send_tile_row>
    src_row++;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	7b7b      	ldrb	r3, [r7, #13]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d203      	bcs.n	8001e22 <u8g2_send_buffer+0x4c>
 8001e1a:	7bba      	ldrb	r2, [r7, #14]
 8001e1c:	7b3b      	ldrb	r3, [r7, #12]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d3eb      	bcc.n	8001dfa <u8g2_send_buffer+0x24>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffcf 	bl	8001dd6 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f001 fd17 	bl	800386c <u8x8_RefreshDisplay>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2204      	movs	r2, #4
 8001e54:	701a      	strb	r2, [r3, #0]
  return buf;
 8001e56:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20000258 	.word	0x20000258

08001e68 <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8001e7e:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f001 fd53 	bl	800392c <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 8001e86:	f107 0313 	add.w	r3, r7, #19
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ffdc 	bl	8001e48 <u8g2_m_16_4_f>
 8001e90:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001e92:	7cfa      	ldrb	r2, [r7, #19]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 8001e9a:	6979      	ldr	r1, [r7, #20]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fff5 	bl	8002e8c <u8g2_SetupBuffer>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800347d 	.word	0x0800347d
 8001eb0:	080036e9 	.word	0x080036e9
 8001eb4:	08002d0f 	.word	0x08002d0f

08001eb8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	81fb      	strh	r3, [r7, #14]
    font++;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001efc:	89fb      	ldrh	r3, [r7, #14]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	89fb      	ldrh	r3, [r7, #14]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001f26:	2100      	movs	r1, #0
 8001f28:	6838      	ldr	r0, [r7, #0]
 8001f2a:	f7ff ffc5 	bl	8001eb8 <u8g2_font_get_byte>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f7ff ffbd 	bl	8001eb8 <u8g2_font_get_byte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001f46:	2102      	movs	r1, #2
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	f7ff ffb5 	bl	8001eb8 <u8g2_font_get_byte>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001f56:	2103      	movs	r1, #3
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f7ff ffad 	bl	8001eb8 <u8g2_font_get_byte>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001f66:	2104      	movs	r1, #4
 8001f68:	6838      	ldr	r0, [r7, #0]
 8001f6a:	f7ff ffa5 	bl	8001eb8 <u8g2_font_get_byte>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001f76:	2105      	movs	r1, #5
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f7ff ff9d 	bl	8001eb8 <u8g2_font_get_byte>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001f86:	2106      	movs	r1, #6
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f7ff ff95 	bl	8001eb8 <u8g2_font_get_byte>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001f96:	2107      	movs	r1, #7
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f7ff ff8d 	bl	8001eb8 <u8g2_font_get_byte>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f7ff ff85 	bl	8001eb8 <u8g2_font_get_byte>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001fb6:	2109      	movs	r1, #9
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f7ff ff7d 	bl	8001eb8 <u8g2_font_get_byte>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b25a      	sxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001fc6:	210a      	movs	r1, #10
 8001fc8:	6838      	ldr	r0, [r7, #0]
 8001fca:	f7ff ff75 	bl	8001eb8 <u8g2_font_get_byte>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001fd6:	210b      	movs	r1, #11
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f7ff ff6d 	bl	8001eb8 <u8g2_font_get_byte>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001fe6:	210c      	movs	r1, #12
 8001fe8:	6838      	ldr	r0, [r7, #0]
 8001fea:	f7ff ff65 	bl	8001eb8 <u8g2_font_get_byte>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001ff6:	210d      	movs	r1, #13
 8001ff8:	6838      	ldr	r0, [r7, #0]
 8001ffa:	f7ff ff5d 	bl	8001eb8 <u8g2_font_get_byte>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b25a      	sxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002006:	210e      	movs	r1, #14
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7ff ff55 	bl	8001eb8 <u8g2_font_get_byte>
 800200e:	4603      	mov	r3, r0
 8002010:	b25a      	sxtb	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002016:	210f      	movs	r1, #15
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f7ff ff4d 	bl	8001eb8 <u8g2_font_get_byte>
 800201e:	4603      	mov	r3, r0
 8002020:	b25a      	sxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002026:	2110      	movs	r1, #16
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	f7ff ff45 	bl	8001eb8 <u8g2_font_get_byte>
 800202e:	4603      	mov	r3, r0
 8002030:	b25a      	sxtb	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002036:	2111      	movs	r1, #17
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f7ff ff4f 	bl	8001edc <u8g2_font_get_word>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002046:	2113      	movs	r1, #19
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f7ff ff47 	bl	8001edc <u8g2_font_get_word>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002056:	2115      	movs	r1, #21
 8002058:	6838      	ldr	r0, [r7, #0]
 800205a:	f7ff ff3f 	bl	8001edc <u8g2_font_get_word>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	82da      	strh	r2, [r3, #22]
#endif
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7b1b      	ldrb	r3, [r3, #12]
 800207e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	7b7b      	ldrb	r3, [r7, #13]
 800208c:	fa42 f303 	asr.w	r3, r2, r3
 8002090:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002092:	7b7b      	ldrb	r3, [r7, #13]
 8002094:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002096:	7bba      	ldrb	r2, [r7, #14]
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	4413      	add	r3, r2
 800209c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800209e:	7bbb      	ldrb	r3, [r7, #14]
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	d91a      	bls.n	80020da <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80020a4:	2308      	movs	r3, #8
 80020a6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80020a8:	7b3a      	ldrb	r2, [r7, #12]
 80020aa:	7b7b      	ldrb	r3, [r7, #13]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	7b3b      	ldrb	r3, [r7, #12]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	b25a      	sxtb	r2, r3
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	3b08      	subs	r3, #8
 80020d8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	4013      	ands	r3, r2
 80020ee:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7bba      	ldrb	r2, [r7, #14]
 80020f4:	731a      	strb	r2, [r3, #12]
  return val;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffaa 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	3b01      	subs	r3, #1
 8002126:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002128:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73fb      	strb	r3, [r7, #15]
  return v;
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800214a:	b490      	push	{r4, r7}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4604      	mov	r4, r0
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4623      	mov	r3, r4
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	4603      	mov	r3, r0
 800215e:	717b      	strb	r3, [r7, #5]
 8002160:	460b      	mov	r3, r1
 8002162:	713b      	strb	r3, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d014      	beq.n	8002198 <u8g2_add_vector_y+0x4e>
 800216e:	2b02      	cmp	r3, #2
 8002170:	dc19      	bgt.n	80021a6 <u8g2_add_vector_y+0x5c>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <u8g2_add_vector_y+0x32>
 8002176:	2b01      	cmp	r3, #1
 8002178:	d007      	beq.n	800218a <u8g2_add_vector_y+0x40>
 800217a:	e014      	b.n	80021a6 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800217c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002180:	b29a      	uxth	r2, r3
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4413      	add	r3, r2
 8002186:	80fb      	strh	r3, [r7, #6]
      break;
 8002188:	e014      	b.n	80021b4 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800218a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800218e:	b29a      	uxth	r2, r3
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4413      	add	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
      break;
 8002196:	e00d      	b.n	80021b4 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8002198:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	80fb      	strh	r3, [r7, #6]
      break;
 80021a4:	e006      	b.n	80021b4 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80021a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	80fb      	strh	r3, [r7, #6]
      break;      
 80021b2:	bf00      	nop
  }
  return dy;
 80021b4:	88fb      	ldrh	r3, [r7, #6]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc90      	pop	{r4, r7}
 80021be:	4770      	bx	lr

080021c0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4603      	mov	r3, r0
 80021d4:	717b      	strb	r3, [r7, #5]
 80021d6:	460b      	mov	r3, r1
 80021d8:	713b      	strb	r3, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d014      	beq.n	800220e <u8g2_add_vector_x+0x4e>
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	dc19      	bgt.n	800221c <u8g2_add_vector_x+0x5c>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <u8g2_add_vector_x+0x32>
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d007      	beq.n	8002200 <u8g2_add_vector_x+0x40>
 80021f0:	e014      	b.n	800221c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80021f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4413      	add	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
      break;
 80021fe:	e014      	b.n	800222a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8002200:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002204:	b29b      	uxth	r3, r3
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	80fb      	strh	r3, [r7, #6]
      break;
 800220c:	e00d      	b.n	800222a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800220e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002212:	b29b      	uxth	r3, r3
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	80fb      	strh	r3, [r7, #6]
      break;
 800221a:	e006      	b.n	800222a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800221c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002220:	b29a      	uxth	r2, r3
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4413      	add	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
      break;      
 8002228:	bf00      	nop
  }
  return dx;
 800222a:	88fb      	ldrh	r3, [r7, #6]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bc90      	pop	{r4, r7}
 8002234:	4770      	bx	lr

08002236 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af02      	add	r7, sp, #8
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
 8002242:	4613      	mov	r3, r2
 8002244:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3360      	adds	r3, #96	@ 0x60
 800224a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002256:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800225e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002266:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	7d7b      	ldrb	r3, [r7, #21]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002274:	7dfa      	ldrb	r2, [r7, #23]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	429a      	cmp	r2, r3
 800227a:	d201      	bcs.n	8002280 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	889b      	ldrh	r3, [r3, #4]
 8002284:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	88db      	ldrh	r3, [r3, #6]
 800228a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800228c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002290:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	7c1b      	ldrb	r3, [r3, #16]
 8002298:	89b8      	ldrh	r0, [r7, #12]
 800229a:	f7ff ff91 	bl	80021c0 <u8g2_add_vector_x>
 800229e:	4603      	mov	r3, r0
 80022a0:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80022a2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80022a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	7c1b      	ldrb	r3, [r3, #16]
 80022ae:	8978      	ldrh	r0, [r7, #10]
 80022b0:	f7ff ff4b 	bl	800214a <u8g2_add_vector_y>
 80022b4:	4603      	mov	r3, r0
 80022b6:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80022b8:	78bb      	ldrb	r3, [r7, #2]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	7b9a      	ldrb	r2, [r3, #14]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80022c8:	7dbb      	ldrb	r3, [r7, #22]
 80022ca:	b298      	uxth	r0, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	7c1b      	ldrb	r3, [r3, #16]
 80022d0:	897a      	ldrh	r2, [r7, #10]
 80022d2:	89b9      	ldrh	r1, [r7, #12]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4603      	mov	r3, r0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fc18 	bl	8002b0e <u8g2_DrawHVLine>
 80022de:	e013      	b.n	8002308 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	7b5b      	ldrb	r3, [r3, #13]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	7bda      	ldrb	r2, [r3, #15]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80022f2:	7dbb      	ldrb	r3, [r7, #22]
 80022f4:	b298      	uxth	r0, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	7c1b      	ldrb	r3, [r3, #16]
 80022fa:	897a      	ldrh	r2, [r7, #10]
 80022fc:	89b9      	ldrh	r1, [r7, #12]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4603      	mov	r3, r0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fc03 	bl	8002b0e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002308:	7dfa      	ldrb	r2, [r7, #23]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	429a      	cmp	r2, r3
 800230e:	d309      	bcc.n	8002324 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8002310:	7dfa      	ldrb	r2, [r7, #23]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	757b      	strb	r3, [r7, #21]
    ly++;
 800231c:	7d3b      	ldrb	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002322:	e79d      	b.n	8002260 <u8g2_font_decode_len+0x2a>
      break;
 8002324:	bf00      	nop
  }
  lx += cnt;
 8002326:	7d7a      	ldrb	r2, [r7, #21]
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	4413      	add	r3, r2
 800232c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800232e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8002336:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	725a      	strb	r2, [r3, #9]
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3360      	adds	r3, #96	@ 0x60
 8002354:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002368:	4619      	mov	r1, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fe7f 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 8002370:	4603      	mov	r3, r0
 8002372:	b25a      	sxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800237e:	4619      	mov	r1, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fe74 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 8002386:	4603      	mov	r3, r0
 8002388:	b25a      	sxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	7b9b      	ldrb	r3, [r3, #14]
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	73da      	strb	r2, [r3, #15]
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3360      	adds	r3, #96	@ 0x60
 80023c2:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffbd 	bl	8002346 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80023d2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80023da:	4619      	mov	r1, r3
 80023dc:	6978      	ldr	r0, [r7, #20]
 80023de:	f7ff fe91 	bl	8002104 <u8g2_font_decode_get_signed_bits>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80023ec:	4619      	mov	r1, r3
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff fe88 	bl	8002104 <u8g2_font_decode_get_signed_bits>
 80023f4:	4603      	mov	r3, r0
 80023f6:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80023fe:	4619      	mov	r1, r3
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f7ff fe7f 	bl	8002104 <u8g2_font_decode_get_signed_bits>
 8002406:	4603      	mov	r3, r0
 8002408:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f340 80d7 	ble.w	80025c4 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	8898      	ldrh	r0, [r3, #4]
 800241a:	7cfa      	ldrb	r2, [r7, #19]
 800241c:	7c7b      	ldrb	r3, [r7, #17]
 800241e:	4413      	add	r3, r2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	425b      	negs	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	b25a      	sxtb	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	7c1b      	ldrb	r3, [r3, #16]
 800242c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002430:	f7ff fec6 	bl	80021c0 <u8g2_add_vector_x>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	88d8      	ldrh	r0, [r3, #6]
 8002440:	7cfa      	ldrb	r2, [r7, #19]
 8002442:	7c7b      	ldrb	r3, [r7, #17]
 8002444:	4413      	add	r3, r2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	425b      	negs	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	b25a      	sxtb	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	7c1b      	ldrb	r3, [r3, #16]
 8002452:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002456:	f7ff fe78 	bl	800214a <u8g2_add_vector_y>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	88db      	ldrh	r3, [r3, #6]
 800246c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800246e:	8bfb      	ldrh	r3, [r7, #30]
 8002470:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8002472:	8b7b      	ldrh	r3, [r7, #26]
 8002474:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	7c1b      	ldrb	r3, [r3, #16]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d85a      	bhi.n	8002534 <u8g2_font_decode_glyph+0x180>
 800247e:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <u8g2_font_decode_glyph+0xd0>)
 8002480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002484:	08002495 	.word	0x08002495
 8002488:	080024b1 	.word	0x080024b1
 800248c:	080024d9 	.word	0x080024d9
 8002490:	0800250d 	.word	0x0800250d
      {
	case 0:
	    x1 += decode->glyph_width;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800249a:	b29a      	uxth	r2, r3
 800249c:	8bbb      	ldrh	r3, [r7, #28]
 800249e:	4413      	add	r3, r2
 80024a0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80024a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	8b3b      	ldrh	r3, [r7, #24]
 80024aa:	4413      	add	r3, r2
 80024ac:	833b      	strh	r3, [r7, #24]
	    break;
 80024ae:	e041      	b.n	8002534 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80024b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8bfa      	ldrh	r2, [r7, #30]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024bc:	8bfb      	ldrh	r3, [r7, #30]
 80024be:	3301      	adds	r3, #1
 80024c0:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80024c2:	8bbb      	ldrh	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	8b3b      	ldrh	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	833b      	strh	r3, [r7, #24]
	    break;
 80024d6:	e02d      	b.n	8002534 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	8bfa      	ldrh	r2, [r7, #30]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024e6:	8bfb      	ldrh	r3, [r7, #30]
 80024e8:	3301      	adds	r3, #1
 80024ea:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80024ec:	8bbb      	ldrh	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80024f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8b7a      	ldrh	r2, [r7, #26]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	3301      	adds	r3, #1
 8002502:	837b      	strh	r3, [r7, #26]
	    y1++;
 8002504:	8b3b      	ldrh	r3, [r7, #24]
 8002506:	3301      	adds	r3, #1
 8002508:	833b      	strh	r3, [r7, #24]
	    break;	  
 800250a:	e013      	b.n	8002534 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800250c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002510:	b29a      	uxth	r2, r3
 8002512:	8bbb      	ldrh	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800251e:	b29b      	uxth	r3, r3
 8002520:	8b7a      	ldrh	r2, [r7, #26]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	3301      	adds	r3, #1
 800252a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800252c:	8b3b      	ldrh	r3, [r7, #24]
 800252e:	3301      	adds	r3, #1
 8002530:	833b      	strh	r3, [r7, #24]
	    break;	  
 8002532:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002534:	8bb8      	ldrh	r0, [r7, #28]
 8002536:	8b7a      	ldrh	r2, [r7, #26]
 8002538:	8bf9      	ldrh	r1, [r7, #30]
 800253a:	8b3b      	ldrh	r3, [r7, #24]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4603      	mov	r3, r0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fbb9 	bl	8002cb8 <u8g2_IsIntersection>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <u8g2_font_decode_glyph+0x19e>
	return d;
 800254c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002550:	e03a      	b.n	80025c8 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2200      	movs	r2, #0
 800255c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002564:	4619      	mov	r1, r3
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff fd81 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002576:	4619      	mov	r1, r3
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f7ff fd78 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 800257e:	4603      	mov	r3, r0
 8002580:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fe54 	bl	8002236 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	2201      	movs	r2, #1
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fe4e 	bl	8002236 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800259a:	2101      	movs	r1, #1
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff fd66 	bl	800206e <u8g2_font_decode_get_unsigned_bits>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ec      	bne.n	8002582 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80025ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dd00      	ble.n	80025b8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80025b6:	e7d2      	b.n	800255e <u8g2_font_decode_glyph+0x1aa>
	break;
 80025b8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	7b9a      	ldrb	r2, [r3, #14]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 80025c4:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3317      	adds	r3, #23
 80025e6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	d82a      	bhi.n	8002644 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	2b60      	cmp	r3, #96	@ 0x60
 80025f2:	d907      	bls.n	8002604 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80025fa:	461a      	mov	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e009      	b.n	8002618 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	2b40      	cmp	r3, #64	@ 0x40
 8002608:	d906      	bls.n	8002618 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8002610:	461a      	mov	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04e      	beq.n	80026c0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4293      	cmp	r3, r2
 800262c:	d102      	bne.n	8002634 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3302      	adds	r3, #2
 8002632:	e049      	b.n	80026c8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002642:	e7e9      	b.n	8002618 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800264a:	461a      	mov	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4413      	add	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002656:	2100      	movs	r1, #0
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f7ff fc3f 	bl	8001edc <u8g2_font_get_word>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4413      	add	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002668:	2102      	movs	r1, #2
 800266a:	6938      	ldr	r0, [r7, #16]
 800266c:	f7ff fc36 	bl	8001edc <u8g2_font_get_word>
 8002670:	4603      	mov	r3, r0
 8002672:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	3304      	adds	r3, #4
 8002678:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800267a:	89fa      	ldrh	r2, [r7, #14]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3e9      	bcc.n	8002656 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	89fb      	ldrh	r3, [r7, #14]
 8002698:	4313      	orrs	r3, r2
 800269a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80026a2:	89fa      	ldrh	r2, [r7, #14]
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d102      	bne.n	80026b0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3303      	adds	r3, #3
 80026ae:	e00b      	b.n	80026c8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3302      	adds	r3, #2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80026be:	e7e0      	b.n	8002682 <u8g2_font_get_glyph_data+0xb2>
	break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <u8g2_font_get_glyph_data+0xf6>
	break;
 80026c4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	897a      	ldrh	r2, [r7, #10]
 80026f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	893a      	ldrh	r2, [r7, #8]
 80026fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4619      	mov	r1, r3
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f7ff ff64 	bl	80025d0 <u8g2_font_get_glyph_data>
 8002708:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fe4e 	bl	80023b4 <u8g2_font_decode_glyph>
 8002718:	4603      	mov	r3, r0
 800271a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800271c:	8afb      	ldrh	r3, [r7, #22]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002748:	2b03      	cmp	r3, #3
 800274a:	d833      	bhi.n	80027b4 <u8g2_DrawGlyph+0x8c>
 800274c:	a201      	add	r2, pc, #4	@ (adr r2, 8002754 <u8g2_DrawGlyph+0x2c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002765 	.word	0x08002765
 8002758:	08002779 	.word	0x08002779
 800275c:	0800278d 	.word	0x0800278d
 8002760:	080027a1 	.word	0x080027a1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	4798      	blx	r3
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	893b      	ldrh	r3, [r7, #8]
 8002772:	4413      	add	r3, r2
 8002774:	813b      	strh	r3, [r7, #8]
      break;
 8002776:	e01d      	b.n	80027b4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	4798      	blx	r3
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	817b      	strh	r3, [r7, #10]
      break;
 800278a:	e013      	b.n	80027b4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	4798      	blx	r3
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	813b      	strh	r3, [r7, #8]
      break;
 800279e:	e009      	b.n	80027b4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	4798      	blx	r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	4413      	add	r3, r2
 80027b0:	817b      	strh	r3, [r7, #10]
      break;
 80027b2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	893a      	ldrh	r2, [r7, #8]
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ff88 	bl	80026d0 <u8g2_font_draw_glyph>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	817b      	strh	r3, [r7, #10]
 80027da:	4613      	mov	r3, r2
 80027dc:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fc9a 	bl	8003118 <u8x8_utf8_init>
  sum = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	4611      	mov	r1, r2
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	4798      	blx	r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002800:	4293      	cmp	r3, r2
 8002802:	d038      	beq.n	8002876 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3301      	adds	r3, #1
 8002808:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800280a:	8abb      	ldrh	r3, [r7, #20]
 800280c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002810:	4293      	cmp	r3, r2
 8002812:	d0e9      	beq.n	80027e8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002814:	8abb      	ldrh	r3, [r7, #20]
 8002816:	893a      	ldrh	r2, [r7, #8]
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff84 	bl	8002728 <u8g2_DrawGlyph>
 8002820:	4603      	mov	r3, r0
 8002822:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800282a:	2b03      	cmp	r3, #3
 800282c:	d81e      	bhi.n	800286c <u8g2_draw_string+0xa0>
 800282e:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <u8g2_draw_string+0x68>)
 8002830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002834:	08002845 	.word	0x08002845
 8002838:	0800284f 	.word	0x0800284f
 800283c:	08002859 	.word	0x08002859
 8002840:	08002863 	.word	0x08002863
      {
	case 0:
	  x += delta;
 8002844:	897a      	ldrh	r2, [r7, #10]
 8002846:	8a7b      	ldrh	r3, [r7, #18]
 8002848:	4413      	add	r3, r2
 800284a:	817b      	strh	r3, [r7, #10]
	  break;
 800284c:	e00e      	b.n	800286c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800284e:	893a      	ldrh	r2, [r7, #8]
 8002850:	8a7b      	ldrh	r3, [r7, #18]
 8002852:	4413      	add	r3, r2
 8002854:	813b      	strh	r3, [r7, #8]
	  break;
 8002856:	e009      	b.n	800286c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002858:	897a      	ldrh	r2, [r7, #10]
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	817b      	strh	r3, [r7, #10]
	  break;
 8002860:	e004      	b.n	800286c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002862:	893a      	ldrh	r2, [r7, #8]
 8002864:	8a7b      	ldrh	r3, [r7, #18]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	813b      	strh	r3, [r7, #8]
	  break;
 800286a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800286c:	8afa      	ldrh	r2, [r7, #22]
 800286e:	8a7b      	ldrh	r3, [r7, #18]
 8002870:	4413      	add	r3, r2
 8002872:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002874:	e7b8      	b.n	80027e8 <u8g2_draw_string+0x1c>
      break;
 8002876:	bf00      	nop
    }
  }
  return sum;
 8002878:	8afb      	ldrh	r3, [r7, #22]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop

08002884 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	4613      	mov	r3, r2
 8002894:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a06      	ldr	r2, [pc, #24]	@ (80028b4 <u8g2_DrawStr+0x30>)
 800289a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff ff92 	bl	80027cc <u8g2_draw_string>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	08003135 	.word	0x08003135

080028b8 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	4613      	mov	r3, r2
 80028c8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a06      	ldr	r2, [pc, #24]	@ (80028e8 <u8g2_DrawUTF8+0x30>)
 80028ce:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff ff78 	bl	80027cc <u8g2_draw_string>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	08003163 	.word	0x08003163

080028ec <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05d      	beq.n	80029b8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04d      	beq.n	80029ba <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002924:	2b01      	cmp	r3, #1
 8002926:	d11c      	bne.n	8002962 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002934:	429a      	cmp	r2, r3
 8002936:	da05      	bge.n	8002944 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002950:	429a      	cmp	r2, r3
 8002952:	dd32      	ble.n	80029ba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002960:	e02b      	b.n	80029ba <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002970:	4619      	mov	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002978:	440b      	add	r3, r1
 800297a:	429a      	cmp	r2, r3
 800297c:	da0d      	bge.n	800299a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002984:	b2da      	uxtb	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4413      	add	r3, r2
 8002990:	b2db      	uxtb	r3, r3
 8002992:	b25a      	sxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dd07      	ble.n	80029ba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80029b6:	e000      	b.n	80029ba <u8g2_UpdateRefHeight+0xce>
    return;
 80029b8:	bf00      	nop
  }  
}
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <u8g2_SetFontPosBaseline+0x1c>)
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	080029c5 	.word	0x080029c5

080029fc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d00b      	beq.n	8002a28 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3374      	adds	r3, #116	@ 0x74
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fa7d 	bl	8001f1c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff62 	bl	80028ec <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	80fb      	strh	r3, [r7, #6]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	8abb      	ldrh	r3, [r7, #20]
 8002a56:	4413      	add	r3, r2
 8002a58:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002a5a:	8afa      	ldrh	r2, [r7, #22]
 8002a5c:	8abb      	ldrh	r3, [r7, #20]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90b      	bls.n	8002a7a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002a62:	8afa      	ldrh	r2, [r7, #22]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d205      	bcs.n	8002a76 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	82bb      	strh	r3, [r7, #20]
      b--;
 8002a6e:	8abb      	ldrh	r3, [r7, #20]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	82bb      	strh	r3, [r7, #20]
 8002a74:	e001      	b.n	8002a7a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002a7a:	8afa      	ldrh	r2, [r7, #22]
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d301      	bcc.n	8002a86 <u8g2_clip_intersection2+0x56>
    return 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e01c      	b.n	8002ac0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002a86:	8aba      	ldrh	r2, [r7, #20]
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d801      	bhi.n	8002a92 <u8g2_clip_intersection2+0x62>
    return 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e016      	b.n	8002ac0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002a92:	8afa      	ldrh	r2, [r7, #22]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d201      	bcs.n	8002a9e <u8g2_clip_intersection2+0x6e>
    a = c;
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002a9e:	8aba      	ldrh	r2, [r7, #20]
 8002aa0:	88bb      	ldrh	r3, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d901      	bls.n	8002aaa <u8g2_clip_intersection2+0x7a>
    b = d;
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8afa      	ldrh	r2, [r7, #22]
 8002aae:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002ab0:	8aba      	ldrh	r2, [r7, #20]
 8002ab2:	8afb      	ldrh	r3, [r7, #22]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	8aba      	ldrh	r2, [r7, #20]
 8002abc:	801a      	strh	r2, [r3, #0]
  return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aea:	893a      	ldrh	r2, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002af4:	88f8      	ldrh	r0, [r7, #6]
 8002af6:	893a      	ldrh	r2, [r7, #8]
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4603      	mov	r3, r0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	47a0      	blx	r4
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}

08002b0e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b0e:	b590      	push	{r4, r7, lr}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af02      	add	r7, sp, #8
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	4608      	mov	r0, r1
 8002b18:	4611      	mov	r1, r2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	817b      	strh	r3, [r7, #10]
 8002b20:	460b      	mov	r3, r1
 8002b22:	813b      	strh	r3, [r7, #8]
 8002b24:	4613      	mov	r3, r2
 8002b26:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d072      	beq.n	8002c1e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d91a      	bls.n	8002b74 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d109      	bne.n	8002b5a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002b46:	897a      	ldrh	r2, [r7, #10]
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	817b      	strh	r3, [r7, #10]
	  x++;
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	e00c      	b.n	8002b74 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d108      	bne.n	8002b74 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002b62:	893a      	ldrh	r2, [r7, #8]
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	813b      	strh	r3, [r7, #8]
	  y++;
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002b74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11a      	bne.n	8002bbe <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002b8e:	893b      	ldrh	r3, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d83b      	bhi.n	8002c0c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d937      	bls.n	8002c10 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002bac:	1db9      	adds	r1, r7, #6
 8002bae:	f107 000a 	add.w	r0, r7, #10
 8002bb2:	f7ff ff3d 	bl	8002a30 <u8g2_clip_intersection2>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11a      	bne.n	8002bf2 <u8g2_DrawHVLine+0xe4>
	  return;
 8002bbc:	e02f      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002bc4:	897b      	ldrh	r3, [r7, #10]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d824      	bhi.n	8002c14 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d920      	bls.n	8002c18 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002be2:	1db9      	adds	r1, r7, #6
 8002be4:	f107 0008 	add.w	r0, r7, #8
 8002be8:	f7ff ff22 	bl	8002a30 <u8g2_clip_intersection2>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	689c      	ldr	r4, [r3, #8]
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	893a      	ldrh	r2, [r7, #8]
 8002bfc:	88f8      	ldrh	r0, [r7, #6]
 8002bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	47a0      	blx	r4
 8002c0a:	e008      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
	  return;
 8002c0c:	bf00      	nop
 8002c0e:	e006      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
	  return;
 8002c10:	bf00      	nop
 8002c12:	e004      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
	  return;
 8002c14:	bf00      	nop
 8002c16:	e002      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
	  return;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <u8g2_DrawHVLine+0x110>
	  return;
 8002c1c:	bf00      	nop
    }
}
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d903      	bls.n	8002c46 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002c52:	b490      	push	{r4, r7}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4623      	mov	r3, r4
 8002c62:	80fb      	strh	r3, [r7, #6]
 8002c64:	4603      	mov	r3, r0
 8002c66:	80bb      	strh	r3, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	88bb      	ldrh	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d20d      	bcs.n	8002c94 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002c78:	883a      	ldrh	r2, [r7, #0]
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d901      	bls.n	8002c84 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e014      	b.n	8002cae <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002c84:	887a      	ldrh	r2, [r7, #2]
 8002c86:	883b      	ldrh	r3, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d901      	bls.n	8002c90 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e00e      	b.n	8002cae <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e00c      	b.n	8002cae <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002c94:	883a      	ldrh	r2, [r7, #0]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d907      	bls.n	8002cac <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	883b      	ldrh	r3, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d901      	bls.n	8002ca8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e002      	b.n	8002cae <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002cac:	2300      	movs	r3, #0
    }
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc90      	pop	{r4, r7}
 8002cb6:	4770      	bx	lr

08002cb8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002cde:	8b3b      	ldrh	r3, [r7, #24]
 8002ce0:	893a      	ldrh	r2, [r7, #8]
 8002ce2:	f7ff ffb6 	bl	8002c52 <u8g2_is_intersection_decision_tree>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <u8g2_IsIntersection+0x38>
    return 0; 
 8002cec:	2300      	movs	r3, #0
 8002cee:	e00a      	b.n	8002d06 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	897a      	ldrh	r2, [r7, #10]
 8002d00:	f7ff ffa7 	bl	8002c52 <u8g2_is_intersection_decision_tree>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b089      	sub	sp, #36	@ 0x24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	4608      	mov	r0, r1
 8002d18:	4611      	mov	r1, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	817b      	strh	r3, [r7, #10]
 8002d20:	460b      	mov	r3, r1
 8002d22:	813b      	strh	r3, [r7, #8]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002d2c:	7efb      	ldrb	r3, [r7, #27]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002d38:	7e3a      	ldrb	r2, [r7, #24]
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d801      	bhi.n	8002d58 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002d54:	7e3b      	ldrb	r3, [r7, #24]
 8002d56:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002d62:	7e3b      	ldrb	r3, [r7, #24]
 8002d64:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002d66:	893b      	ldrh	r3, [r7, #8]
 8002d68:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002d6a:	8afb      	ldrh	r3, [r7, #22]
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	7c1b      	ldrb	r3, [r3, #16]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	8afb      	ldrh	r3, [r7, #22]
 8002d7c:	fb13 f302 	smulbb	r3, r3, r2
 8002d80:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002d88:	8afb      	ldrh	r3, [r7, #22]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002d90:	897b      	ldrh	r3, [r7, #10]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002d98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d117      	bne.n	8002dd0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	7ebb      	ldrb	r3, [r7, #26]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	7e7b      	ldrb	r3, [r7, #25]
 8002db4:	4053      	eors	r3, r2
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
	len--;
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e8      	bne.n	8002da0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002dce:	e038      	b.n	8002e42 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	7ebb      	ldrb	r3, [r7, #26]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	7e7b      	ldrb	r3, [r7, #25]
 8002de4:	4053      	eors	r3, r2
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002dec:	7efb      	ldrb	r3, [r7, #27]
 8002dee:	3301      	adds	r3, #1
 8002df0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002df2:	7efb      	ldrb	r3, [r7, #27]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	76fb      	strb	r3, [r7, #27]
      len--;
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e00:	7efb      	ldrb	r3, [r7, #27]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d114      	bne.n	8002e30 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d801      	bhi.n	8002e20 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d008      	beq.n	8002e3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	767b      	strb	r3, [r7, #25]
 8002e2e:	e005      	b.n	8002e3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002e30:	7ebb      	ldrb	r3, [r7, #26]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002e36:	7e7b      	ldrb	r3, [r7, #25]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1c6      	bne.n	8002dd0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	@ 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	79fa      	ldrb	r2, [r7, #7]
 8002eb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ffa9 	bl	8002e4e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff fd6d 	bl	80029dc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f26:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	89fa      	ldrh	r2, [r7, #14]
 8002f32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	7c1b      	ldrb	r3, [r3, #16]
 8002f38:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	89fa      	ldrh	r2, [r7, #14]
 8002f44:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002f4c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	89fa      	ldrh	r2, [r7, #14]
 8002f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f60:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002f6a:	4413      	add	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	7c52      	ldrb	r2, [r2, #17]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	dd07      	ble.n	8002f84 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	7c5b      	ldrb	r3, [r3, #17]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f84:	89fb      	ldrh	r3, [r7, #14]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	8a9a      	ldrh	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	8ada      	ldrh	r2, [r3, #22]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe5e 	bl	8002cb8 <u8g2_IsIntersection>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800300a:	e03b      	b.n	8003084 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003020:	429a      	cmp	r2, r3
 8003022:	d205      	bcs.n	8003030 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800303c:	429a      	cmp	r2, r3
 800303e:	d905      	bls.n	800304c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003058:	429a      	cmp	r2, r3
 800305a:	d205      	bcs.n	8003068 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003074:	429a      	cmp	r2, r3
 8003076:	d905      	bls.n	8003084 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff3c 	bl	8002f12 <u8g2_update_dimension_common>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ff7b 	bl	8002fd2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80030fe:	88f8      	ldrh	r0, [r7, #6]
 8003100:	893a      	ldrh	r2, [r7, #8]
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	7e3b      	ldrb	r3, [r7, #24]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4603      	mov	r3, r0
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fcde 	bl	8002acc <u8g2_draw_hv_line_2dir>
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <u8x8_ascii_next+0x18>
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	2b0a      	cmp	r3, #10
 800314a:	d102      	bne.n	8003152 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800314c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003150:	e001      	b.n	8003156 <u8x8_ascii_next+0x22>
  return b;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	b29b      	uxth	r3, r3
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <u8x8_utf8_next+0x18>
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d102      	bne.n	8003180 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800317a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800317e:	e06e      	b.n	800325e <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003186:	2b00      	cmp	r3, #0
 8003188:	d145      	bne.n	8003216 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	2bfb      	cmp	r3, #251	@ 0xfb
 800318e:	d908      	bls.n	80031a2 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 1;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	70fb      	strb	r3, [r7, #3]
 80031a0:	e032      	b.n	8003208 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	2bf7      	cmp	r3, #247	@ 0xf7
 80031a6:	d908      	bls.n	80031ba <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 3;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	70fb      	strb	r3, [r7, #3]
 80031b8:	e026      	b.n	8003208 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	2bef      	cmp	r3, #239	@ 0xef
 80031be:	d908      	bls.n	80031d2 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 7;      
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	70fb      	strb	r3, [r7, #3]
 80031d0:	e01a      	b.n	8003208 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	2bdf      	cmp	r3, #223	@ 0xdf
 80031d6:	d908      	bls.n	80031ea <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 15;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	70fb      	strb	r3, [r7, #3]
 80031e8:	e00e      	b.n	8003208 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2bbf      	cmp	r3, #191	@ 0xbf
 80031ee:	d908      	bls.n	8003202 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
      b &= 0x01f;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	70fb      	strb	r3, [r7, #3]
 8003200:	e002      	b.n	8003208 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	b29b      	uxth	r3, r3
 8003206:	e02a      	b.n	800325e <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003210:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003214:	e023      	b.n	800325e <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800321c:	3b01      	subs	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8c1b      	ldrh	r3, [r3, #32]
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003238:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8c1a      	ldrh	r2, [r3, #32]
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003254:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003258:	e001      	b.n	800325e <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8c1b      	ldrh	r3, [r3, #32]
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800326a:	b590      	push	{r4, r7, lr}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	460b      	mov	r3, r1
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691c      	ldr	r4, [r3, #16]
 800327c:	7afa      	ldrb	r2, [r7, #11]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2117      	movs	r1, #23
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	47a0      	blx	r4
 8003286:	4603      	mov	r3, r0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bd90      	pop	{r4, r7, pc}

08003290 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800329c:	1cfb      	adds	r3, r7, #3
 800329e:	461a      	mov	r2, r3
 80032a0:	2101      	movs	r1, #1
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffe1 	bl	800326a <u8x8_byte_SendBytes>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80032b2:	b590      	push	{r4, r7, lr}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691c      	ldr	r4, [r3, #16]
 80032be:	2300      	movs	r3, #0
 80032c0:	2200      	movs	r2, #0
 80032c2:	2118      	movs	r1, #24
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	47a0      	blx	r4
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}

080032d2 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80032d2:	b590      	push	{r4, r7, lr}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691c      	ldr	r4, [r3, #16]
 80032de:	2300      	movs	r3, #0
 80032e0:	2200      	movs	r2, #0
 80032e2:	2119      	movs	r1, #25
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	47a0      	blx	r4
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68dc      	ldr	r4, [r3, #12]
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	2300      	movs	r3, #0
 8003306:	2115      	movs	r1, #21
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	47a0      	blx	r4
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bd90      	pop	{r4, r7, pc}

08003316 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003316:	b590      	push	{r4, r7, lr}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68dc      	ldr	r4, [r3, #12]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	2300      	movs	r3, #0
 800332a:	2116      	movs	r1, #22
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	47a0      	blx	r4
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	460b      	mov	r3, r1
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68dc      	ldr	r4, [r3, #12]
 800334c:	7afa      	ldrb	r2, [r7, #11]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2117      	movs	r1, #23
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	47a0      	blx	r4
 8003356:	4603      	mov	r3, r0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68dc      	ldr	r4, [r3, #12]
 800336c:	2300      	movs	r3, #0
 800336e:	2200      	movs	r2, #0
 8003370:	2118      	movs	r1, #24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	47a0      	blx	r4
 8003376:	4603      	mov	r3, r0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68dc      	ldr	r4, [r3, #12]
 800338c:	2300      	movs	r3, #0
 800338e:	2200      	movs	r2, #0
 8003390:	2119      	movs	r1, #25
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	47a0      	blx	r4
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	73fb      	strb	r3, [r7, #15]
    data++;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80033ba:	d031      	beq.n	8003420 <u8x8_cad_SendSequence+0x80>
 80033bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80033be:	dc3d      	bgt.n	800343c <u8x8_cad_SendSequence+0x9c>
 80033c0:	2b19      	cmp	r3, #25
 80033c2:	dc3b      	bgt.n	800343c <u8x8_cad_SendSequence+0x9c>
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	da23      	bge.n	8003410 <u8x8_cad_SendSequence+0x70>
 80033c8:	2b16      	cmp	r3, #22
 80033ca:	dc02      	bgt.n	80033d2 <u8x8_cad_SendSequence+0x32>
 80033cc:	2b15      	cmp	r3, #21
 80033ce:	da03      	bge.n	80033d8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80033d0:	e034      	b.n	800343c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80033d2:	2b17      	cmp	r3, #23
 80033d4:	d00e      	beq.n	80033f4 <u8x8_cad_SendSequence+0x54>
	return;
 80033d6:	e031      	b.n	800343c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68dc      	ldr	r4, [r3, #12]
 80033e2:	7bba      	ldrb	r2, [r7, #14]
 80033e4:	7bf9      	ldrb	r1, [r7, #15]
 80033e6:	2300      	movs	r3, #0
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	47a0      	blx	r4
	  data++;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
	  break;
 80033f2:	e022      	b.n	800343a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80033fa:	f107 030e 	add.w	r3, r7, #14
 80033fe:	461a      	mov	r2, r3
 8003400:	2101      	movs	r1, #1
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff99 	bl	800333a <u8x8_cad_SendData>
	  data++;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	603b      	str	r3, [r7, #0]
	  break;
 800340e:	e014      	b.n	800343a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68dc      	ldr	r4, [r3, #12]
 8003414:	7bf9      	ldrb	r1, [r7, #15]
 8003416:	2300      	movs	r3, #0
 8003418:	2200      	movs	r2, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	47a0      	blx	r4
	  break;
 800341e:	e00c      	b.n	800343a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003426:	7bbb      	ldrb	r3, [r7, #14]
 8003428:	461a      	mov	r2, r3
 800342a:	2129      	movs	r1, #41	@ 0x29
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa2c 	bl	800388a <u8x8_gpio_call>
	  data++;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	603b      	str	r3, [r7, #0]
	  break;
 8003438:	bf00      	nop
    cmd = *data;
 800343a:	e7b6      	b.n	80033aa <u8x8_cad_SendSequence+0xa>
	return;
 800343c:	bf00      	nop
    }
  }
}
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}

08003444 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	460b      	mov	r3, r1
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff2d 	bl	80032b2 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8003458:	2140      	movs	r1, #64	@ 0x40
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff18 	bl	8003290 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691c      	ldr	r4, [r3, #16]
 8003464:	7afa      	ldrb	r2, [r7, #11]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2117      	movs	r1, #23
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff ff2f 	bl	80032d2 <u8x8_byte_EndTransfer>
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	72fb      	strb	r3, [r7, #11]
 800348a:	4613      	mov	r3, r2
 800348c:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	3b14      	subs	r3, #20
 8003492:	2b05      	cmp	r3, #5
 8003494:	d86e      	bhi.n	8003574 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	08003533 	.word	0x08003533
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034e3 	.word	0x080034e3
 80034a8:	080034ef 	.word	0x080034ef
 80034ac:	08003557 	.word	0x08003557
 80034b0:	0800355f 	.word	0x0800355f
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80034b4:	4b33      	ldr	r3, [pc, #204]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <u8x8_cad_ssd13xx_fast_i2c+0x46>
    	  u8x8_byte_EndTransfer(u8x8);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff ff08 	bl	80032d2 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fef5 	bl	80032b2 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80034c8:	2100      	movs	r1, #0
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fee0 	bl	8003290 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80034d0:	7abb      	ldrb	r3, [r7, #10]
 80034d2:	4619      	mov	r1, r3
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fedb 	bl	8003290 <u8x8_byte_SendByte>
      in_transfer = 1;
 80034da:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80034e0:	e04a      	b.n	8003578 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80034e2:	7abb      	ldrb	r3, [r7, #10]
 80034e4:	4619      	mov	r1, r3
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fed2 	bl	8003290 <u8x8_byte_SendByte>
      break;      
 80034ec:	e044      	b.n	8003578 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80034ee:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff feeb 	bl	80032d2 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003500:	e00a      	b.n	8003518 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	2118      	movs	r1, #24
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff ff9c 	bl	8003444 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800350c:	7abb      	ldrb	r3, [r7, #10]
 800350e:	3b18      	subs	r3, #24
 8003510:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3318      	adds	r3, #24
 8003516:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003518:	7abb      	ldrb	r3, [r7, #10]
 800351a:	2b18      	cmp	r3, #24
 800351c:	d8f1      	bhi.n	8003502 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800351e:	7abb      	ldrb	r3, [r7, #10]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff8d 	bl	8003444 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800352a:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
      break;
 8003530:	e022      	b.n	8003578 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003538:	2bff      	cmp	r3, #255	@ 0xff
 800353a:	d103      	bne.n	8003544 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    	  u8x8->i2c_address = 0x078;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2278      	movs	r2, #120	@ 0x78
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691c      	ldr	r4, [r3, #16]
 8003548:	7aba      	ldrb	r2, [r7, #10]
 800354a:	7af9      	ldrb	r1, [r7, #11]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	47a0      	blx	r4
 8003552:	4603      	mov	r3, r0
 8003554:	e011      	b.n	800357a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
      break;
 800355c:	e00c      	b.n	8003578 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff feb3 	bl	80032d2 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800356c:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
      break;
 8003572:	e001      	b.n	8003578 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}
 8003582:	bf00      	nop
 8003584:	20000458 	.word	0x20000458

08003588 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	72fb      	strb	r3, [r7, #11]
 8003596:	4613      	mov	r3, r2
 8003598:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	3b0a      	subs	r3, #10
 800359e:	2b05      	cmp	r3, #5
 80035a0:	f200 8090 	bhi.w	80036c4 <u8x8_d_ssd1306_128x32_generic+0x13c>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <u8x8_d_ssd1306_128x32_generic+0x24>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035c5 	.word	0x080035c5
 80035b0:	080035d5 	.word	0x080035d5
 80035b4:	080036c5 	.word	0x080036c5
 80035b8:	080035ef 	.word	0x080035ef
 80035bc:	08003621 	.word	0x08003621
 80035c0:	08003641 	.word	0x08003641
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f8c3 	bl	8003750 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 80035ca:	4942      	ldr	r1, [pc, #264]	@ (80036d4 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff fee7 	bl	80033a0 <u8x8_cad_SendSequence>
      break;
 80035d2:	e079      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80035d4:	7abb      	ldrb	r3, [r7, #10]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 80035da:	493f      	ldr	r1, [pc, #252]	@ (80036d8 <u8x8_d_ssd1306_128x32_generic+0x150>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fedf 	bl	80033a0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 80035e2:	e071      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 80035e4:	493d      	ldr	r1, [pc, #244]	@ (80036dc <u8x8_d_ssd1306_128x32_generic+0x154>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff feda 	bl	80033a0 <u8x8_cad_SendSequence>
      break;
 80035ec:	e06c      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80035ee:	7abb      	ldrb	r3, [r7, #10]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 80035f4:	493a      	ldr	r1, [pc, #232]	@ (80036e0 <u8x8_d_ssd1306_128x32_generic+0x158>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff fed2 	bl	80033a0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	7c9a      	ldrb	r2, [r3, #18]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003608:	e05e      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 800360a:	4936      	ldr	r1, [pc, #216]	@ (80036e4 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fec7 	bl	80033a0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	7cda      	ldrb	r2, [r3, #19]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800361e:	e053      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fe9d 	bl	8003360 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003626:	2181      	movs	r1, #129	@ 0x81
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fe62 	bl	80032f2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800362e:	7abb      	ldrb	r3, [r7, #10]
 8003630:	4619      	mov	r1, r3
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff fe6f 	bl	8003316 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fea1 	bl	8003380 <u8x8_cad_EndTransfer>
      break;
 800363e:	e043      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff fe8d 	bl	8003360 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	795b      	ldrb	r3, [r3, #5]
 800364a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	4413      	add	r3, r2
 800365c:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	b2db      	uxtb	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff fe40 	bl	80032f2 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4619      	mov	r1, r3
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fe38 	bl	80032f2 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	799b      	ldrb	r3, [r3, #6]
 8003686:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fe2f 	bl	80032f2 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	791b      	ldrb	r3, [r3, #4]
 8003698:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80036a0:	7dbb      	ldrb	r3, [r7, #22]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4619      	mov	r1, r3
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fe45 	bl	800333a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80036b0:	7abb      	ldrb	r3, [r7, #10]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80036b6:	7abb      	ldrb	r3, [r7, #10]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1eb      	bne.n	8003694 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fe5f 	bl	8003380 <u8x8_cad_EndTransfer>
      break;
 80036c2:	e001      	b.n	80036c8 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 80036c8:	2301      	movs	r3, #1
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	0800aa2c 	.word	0x0800aa2c
 80036d8:	0800aa64 	.word	0x0800aa64
 80036dc:	0800aa6c 	.word	0x0800aa6c
 80036e0:	0800aa74 	.word	0x0800aa74
 80036e4:	0800aa7c 	.word	0x0800aa7c

080036e8 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	72fb      	strb	r3, [r7, #11]
 80036f6:	4613      	mov	r3, r2
 80036f8:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 80036fa:	7afb      	ldrb	r3, [r7, #11]
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d105      	bne.n	800370c <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8003700:	4908      	ldr	r1, [pc, #32]	@ (8003724 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f810 	bl	8003728 <u8x8_d_helper_display_setup_memory>
      return 1;
 8003708:	2301      	movs	r3, #1
 800370a:	e006      	b.n	800371a <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 800370c:	7aba      	ldrb	r2, [r7, #10]
 800370e:	7af9      	ldrb	r1, [r7, #11]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff ff38 	bl	8003588 <u8x8_d_ssd1306_128x32_generic>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	0800aa84 	.word	0x0800aa84

08003728 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	7c9a      	ldrb	r2, [r3, #18]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695c      	ldr	r4, [r3, #20]
 800375c:	2300      	movs	r3, #0
 800375e:	2200      	movs	r2, #0
 8003760:	2128      	movs	r1, #40	@ 0x28
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68dc      	ldr	r4, [r3, #12]
 800376a:	2300      	movs	r3, #0
 800376c:	2200      	movs	r2, #0
 800376e:	2114      	movs	r1, #20
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003774:	2201      	movs	r2, #1
 8003776:	214b      	movs	r1, #75	@ 0x4b
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f886 	bl	800388a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	791b      	ldrb	r3, [r3, #4]
 8003784:	461a      	mov	r2, r3
 8003786:	2129      	movs	r1, #41	@ 0x29
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f87e 	bl	800388a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	214b      	movs	r1, #75	@ 0x4b
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f879 	bl	800388a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	791b      	ldrb	r3, [r3, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	2129      	movs	r1, #41	@ 0x29
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f871 	bl	800388a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80037a8:	2201      	movs	r2, #1
 80037aa:	214b      	movs	r1, #75	@ 0x4b
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f86c 	bl	800388a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	795b      	ldrb	r3, [r3, #5]
 80037b8:	461a      	mov	r2, r3
 80037ba:	2129      	movs	r1, #41	@ 0x29
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f864 	bl	800388a <u8x8_gpio_call>
}    
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}

080037ca <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80037ca:	b590      	push	{r4, r7, lr}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	4608      	mov	r0, r1
 80037d4:	4611      	mov	r1, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	70fb      	strb	r3, [r7, #3]
 80037dc:	460b      	mov	r3, r1
 80037de:	70bb      	strb	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80037e8:	78bb      	ldrb	r3, [r7, #2]
 80037ea:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689c      	ldr	r4, [r3, #8]
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	2201      	movs	r2, #1
 80037fe:	210f      	movs	r1, #15
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	47a0      	blx	r4
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bd90      	pop	{r4, r7, pc}

0800380e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800380e:	b590      	push	{r4, r7, lr}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689c      	ldr	r4, [r3, #8]
 800381a:	2300      	movs	r3, #0
 800381c:	2200      	movs	r2, #0
 800381e:	2109      	movs	r1, #9
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	47a0      	blx	r4
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bd90      	pop	{r4, r7, pc}

0800382c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689c      	ldr	r4, [r3, #8]
 8003838:	2300      	movs	r3, #0
 800383a:	2200      	movs	r2, #0
 800383c:	210a      	movs	r1, #10
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}

0800384a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800384a:	b590      	push	{r4, r7, lr}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689c      	ldr	r4, [r3, #8]
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	2300      	movs	r3, #0
 800385e:	210b      	movs	r1, #11
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	47a0      	blx	r4
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}

0800386c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689c      	ldr	r4, [r3, #8]
 8003878:	2300      	movs	r3, #0
 800387a:	2200      	movs	r2, #0
 800387c:	2110      	movs	r1, #16
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	47a0      	blx	r4
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}

0800388a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
 8003896:	4613      	mov	r3, r2
 8003898:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695c      	ldr	r4, [r3, #20]
 800389e:	78ba      	ldrb	r2, [r7, #2]
 80038a0:	78f9      	ldrb	r1, [r7, #3]
 80038a2:	2300      	movs	r3, #0
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	47a0      	blx	r4
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	72fb      	strb	r3, [r7, #11]
 80038be:	4613      	mov	r3, r2
 80038c0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a11      	ldr	r2, [pc, #68]	@ (8003928 <u8x8_SetupDefaults+0x58>)
 80038e2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a10      	ldr	r2, [pc, #64]	@ (8003928 <u8x8_SetupDefaults+0x58>)
 80038e8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003928 <u8x8_SetupDefaults+0x58>)
 80038ee:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003928 <u8x8_SetupDefaults+0x58>)
 80038f4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	22ff      	movs	r2, #255	@ 0xff
 8003910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	22ff      	movs	r2, #255	@ 0xff
 8003918:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	080038b1 	.word	0x080038b1

0800392c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff ffc8 	bl	80038d0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ff58 	bl	800380e <u8x8_SetupMemory>
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <sendI2cBuffer>:

static I2cBuffer i2cBuffers[kI2cBuffersCount];
static uint8_t i2cBuffersProducerPtr = 0;
static uint8_t i2cBuffersConsumerPtr = 0;

uint8_t sendI2cBuffer() {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	if (i2cBuffersConsumerPtr != i2cBuffersProducerPtr) {
 800396c:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <sendI2cBuffer+0x50>)
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <sendI2cBuffer+0x54>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d01c      	beq.n	80039b2 <sendI2cBuffer+0x4a>
		return HAL_OK == HAL_I2C_Master_Transmit_DMA(&hi2c3, (0x3C << 1), (uint8_t*)i2cBuffers[i2cBuffersConsumerPtr].buffer, i2cBuffers[i2cBuffersConsumerPtr].bufferCounter);
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <sendI2cBuffer+0x50>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	231a      	movs	r3, #26
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <sendI2cBuffer+0x58>)
 8003986:	441a      	add	r2, r3
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <sendI2cBuffer+0x50>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	490c      	ldr	r1, [pc, #48]	@ (80039c0 <sendI2cBuffer+0x58>)
 8003990:	231a      	movs	r3, #26
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	440b      	add	r3, r1
 8003998:	3319      	adds	r3, #25
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2178      	movs	r1, #120	@ 0x78
 800399e:	4809      	ldr	r0, [pc, #36]	@ (80039c4 <sendI2cBuffer+0x5c>)
 80039a0:	f001 faa4 	bl	8004eec <HAL_I2C_Master_Transmit_DMA>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e000      	b.n	80039b4 <sendI2cBuffer+0x4c>
	}

	return 0;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000971 	.word	0x20000971
 80039bc:	20000970 	.word	0x20000970
 80039c0:	2000045c 	.word	0x2000045c
 80039c4:	20000078 	.word	0x20000078

080039c8 <u8x8_byte_i2c_dma>:

uint8_t u8x8_byte_i2c_dma(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	72fb      	strb	r3, [r7, #11]
 80039d6:	4613      	mov	r3, r2
 80039d8:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	3b14      	subs	r3, #20
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d872      	bhi.n	8003ac8 <u8x8_byte_i2c_dma+0x100>
 80039e2:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <u8x8_byte_i2c_dma+0x20>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003acd 	.word	0x08003acd
 80039ec:	08003ac9 	.word	0x08003ac9
 80039f0:	08003ac9 	.word	0x08003ac9
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a7f 	.word	0x08003a7f
 80039fc:	08003ac1 	.word	0x08003ac1
 8003a00:	08003ac9 	.word	0x08003ac9
 8003a04:	08003ac9 	.word	0x08003ac9
 8003a08:	08003ac9 	.word	0x08003ac9
 8003a0c:	08003ac9 	.word	0x08003ac9
 8003a10:	08003ac9 	.word	0x08003ac9
 8003a14:	08003ac9 	.word	0x08003ac9
 8003a18:	08003acd 	.word	0x08003acd
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SEND:

        	memcpy(i2cBuffers[i2cBuffersProducerPtr].buffer + i2cBuffers[i2cBuffersProducerPtr].bufferCounter, arg_ptr, arg_int);
 8003a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	231a      	movs	r3, #26
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <u8x8_byte_i2c_dma+0x114>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	4610      	mov	r0, r2
 8003a32:	492a      	ldr	r1, [pc, #168]	@ (8003adc <u8x8_byte_i2c_dma+0x114>)
 8003a34:	221a      	movs	r2, #26
 8003a36:	fb00 f202 	mul.w	r2, r0, r2
 8003a3a:	440a      	add	r2, r1
 8003a3c:	3219      	adds	r2, #25
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	7aba      	ldrb	r2, [r7, #10]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 fc32 	bl	80082b0 <memcpy>
        	i2cBuffers[i2cBuffersProducerPtr].bufferCounter += arg_int;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <u8x8_byte_i2c_dma+0x114>)
 8003a54:	231a      	movs	r3, #26
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3319      	adds	r3, #25
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	7abb      	ldrb	r3, [r7, #10]
 8003a68:	4413      	add	r3, r2
 8003a6a:	b2d9      	uxtb	r1, r3
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003adc <u8x8_byte_i2c_dma+0x114>)
 8003a6e:	231a      	movs	r3, #26
 8003a70:	fb00 f303 	mul.w	r3, r0, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3319      	adds	r3, #25
 8003a78:	460a      	mov	r2, r1
 8003a7a:	701a      	strb	r2, [r3, #0]
        	break;
 8003a7c:	e027      	b.n	8003ace <u8x8_byte_i2c_dma+0x106>
        case U8X8_MSG_BYTE_SET_DC:

        	break;
        case U8X8_MSG_BYTE_START_TRANSFER:
        	++i2cBuffersProducerPtr;
 8003a7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3301      	adds	r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a88:	701a      	strb	r2, [r3, #0]
        	if (kI2cBuffersCount <= i2cBuffersProducerPtr) {
 8003a8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b31      	cmp	r3, #49	@ 0x31
 8003a90:	d902      	bls.n	8003a98 <u8x8_byte_i2c_dma+0xd0>
        		i2cBuffersProducerPtr = 0;
 8003a92:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
        	}

        	if (i2cBuffersProducerPtr == i2cBuffersConsumerPtr) {
 8003a98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <u8x8_byte_i2c_dma+0x118>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d101      	bne.n	8003aa8 <u8x8_byte_i2c_dma+0xe0>
        		return 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e013      	b.n	8003ad0 <u8x8_byte_i2c_dma+0x108>
        	}

        	i2cBuffers[i2cBuffersProducerPtr].bufferCounter = 0;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <u8x8_byte_i2c_dma+0x110>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4619      	mov	r1, r3
 8003aae:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <u8x8_byte_i2c_dma+0x114>)
 8003ab0:	231a      	movs	r3, #26
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3319      	adds	r3, #25
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
        	break;
 8003abe:	e006      	b.n	8003ace <u8x8_byte_i2c_dma+0x106>
        case U8X8_MSG_BYTE_END_TRANSFER:
        	return sendI2cBuffer();
 8003ac0:	f7ff ff52 	bl	8003968 <sendI2cBuffer>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e003      	b.n	8003ad0 <u8x8_byte_i2c_dma+0x108>
 //       	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY);
        	break;
        default:
        	return 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e001      	b.n	8003ad0 <u8x8_byte_i2c_dma+0x108>
            break;
 8003acc:	bf00      	nop
    }

    return 1;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000970 	.word	0x20000970
 8003adc:	2000045c 	.word	0x2000045c
 8003ae0:	20000971 	.word	0x20000971

08003ae4 <u8x8_gpio_and_delay_stm32>:
    }

    return 1;
}

uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
 8003af2:	4613      	mov	r3, r2
 8003af4:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	2b2c      	cmp	r3, #44	@ 0x2c
 8003afa:	dc0d      	bgt.n	8003b18 <u8x8_gpio_and_delay_stm32+0x34>
 8003afc:	2b2b      	cmp	r3, #43	@ 0x2b
 8003afe:	da08      	bge.n	8003b12 <u8x8_gpio_and_delay_stm32+0x2e>
 8003b00:	2b28      	cmp	r3, #40	@ 0x28
 8003b02:	d008      	beq.n	8003b16 <u8x8_gpio_and_delay_stm32+0x32>
 8003b04:	2b29      	cmp	r3, #41	@ 0x29
 8003b06:	d107      	bne.n	8003b18 <u8x8_gpio_and_delay_stm32+0x34>
    	case U8X8_MSG_GPIO_AND_DELAY_INIT:
    		break;
        case U8X8_MSG_DELAY_MILLI:
            HAL_Delay(arg_int);
 8003b08:	7abb      	ldrb	r3, [r7, #10]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f9e4 	bl	8003ed8 <HAL_Delay>
            break;
 8003b10:	e002      	b.n	8003b18 <u8x8_gpio_and_delay_stm32+0x34>
        case U8X8_MSG_DELAY_NANO:
        case U8X8_MSG_DELAY_100NANO:
            __NOP();
 8003b12:	bf00      	nop
            break;
 8003b14:	e000      	b.n	8003b18 <u8x8_gpio_and_delay_stm32+0x34>
    		break;
 8003b16:	bf00      	nop
    }

    return 1;
 8003b18:	2301      	movs	r3, #1
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C3) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10e      	bne.n	8003b54 <HAL_I2C_MasterTxCpltCallback+0x30>
    	++i2cBuffersConsumerPtr;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8003b40:	701a      	strb	r2, [r3, #0]
    	if (kI2cBuffersCount <= i2cBuffersConsumerPtr) {
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b31      	cmp	r3, #49	@ 0x31
 8003b48:	d902      	bls.n	8003b50 <HAL_I2C_MasterTxCpltCallback+0x2c>
    		i2cBuffersConsumerPtr = 0;
 8003b4a:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
    	}

    	sendI2cBuffer();
 8003b50:	f7ff ff0a 	bl	8003968 <sendI2cBuffer>
    }
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40005c00 	.word	0x40005c00
 8003b60:	20000971 	.word	0x20000971

08003b64 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        //
    }
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <drawBatteryIndicator>:
 */

#include "ui_controls.h"
#include "resources.h"

void drawBatteryIndicator(u8g2_t *u8g2, int x, int y, uint8_t level) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	70fb      	strb	r3, [r7, #3]
    u8g2_DrawFrame(u8g2, x, y, 16, 8);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	2308      	movs	r3, #8
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2310      	movs	r3, #16
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7fe f876 	bl	8001c8a <u8g2_DrawFrame>
    u8g2_DrawBox(u8g2, x + 16, y + 2, 2, 4);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	b299      	uxth	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3302      	adds	r3, #2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	2304      	movs	r3, #4
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7fe f832 	bl	8001c1e <u8g2_DrawBox>
    int fillWidth = (level * 14) / 100;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c00 <drawBatteryIndicator+0x84>)
 8003bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bca:	1152      	asrs	r2, r2, #5
 8003bcc:	17db      	asrs	r3, r3, #31
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
    if (fillWidth > 0) u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	dd0e      	ble.n	8003bf6 <drawBatteryIndicator+0x7a>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b299      	uxth	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2006      	movs	r0, #6
 8003bee:	9000      	str	r0, [sp, #0]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7fe f814 	bl	8001c1e <u8g2_DrawBox>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <constrain>:

int constrain(int x, int a, int b) {
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
    return (x < a) ? ((a < b) ? a : b) : x;
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	da05      	bge.n	8003c24 <constrain+0x20>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfa8      	it	ge
 8003c20:	4613      	movge	r3, r2
 8003c22:	e000      	b.n	8003c26 <constrain+0x22>
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <drawSignalStrengthIndicator>:

void drawSignalStrengthIndicator(u8g2_t *u8g2, int x, int y, int dBm, bool isInverted) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	@ 0x30
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]

    dBm = constrain(dBm, -80, 5);
 8003c42:	2205      	movs	r2, #5
 8003c44:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f7ff ffdb 	bl	8003c04 <constrain>
 8003c4e:	6038      	str	r0, [r7, #0]

    int signalRange = 85;
 8003c50:	2355      	movs	r3, #85	@ 0x55
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
    int shiftedDBm = dBm + 80;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3350      	adds	r3, #80	@ 0x50
 8003c58:	623b      	str	r3, [r7, #32]
    int fillPercentage = (shiftedDBm * 100) / signalRange;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2264      	movs	r2, #100	@ 0x64
 8003c5e:	fb03 f202 	mul.w	r2, r3, r2
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c68:	61fb      	str	r3, [r7, #28]


    int fillWidth = (fillPercentage * 60) / 100;
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a36      	ldr	r2, [pc, #216]	@ (8003d50 <drawSignalStrengthIndicator+0x11c>)
 8003c76:	fb82 1203 	smull	r1, r2, r2, r3
 8003c7a:	1152      	asrs	r2, r2, #5
 8003c7c:	17db      	asrs	r3, r3, #31
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	61bb      	str	r3, [r7, #24]
    fillWidth = constrain(fillWidth, 0, 60);
 8003c82:	223c      	movs	r2, #60	@ 0x3c
 8003c84:	2100      	movs	r1, #0
 8003c86:	69b8      	ldr	r0, [r7, #24]
 8003c88:	f7ff ffbc 	bl	8003c04 <constrain>
 8003c8c:	61b8      	str	r0, [r7, #24]


    uint8_t currentColor = u8g2_GetDrawColor(u8g2);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003c94:	75fb      	strb	r3, [r7, #23]

    if (fillWidth > 0) {
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd50      	ble.n	8003d3e <drawSignalStrengthIndicator+0x10a>
        if (isInverted) {
 8003c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02f      	beq.n	8003d04 <drawSignalStrengthIndicator+0xd0>

            u8g2_SetDrawColor(u8g2, 0);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7fe ffbc 	bl	8002c24 <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	b299      	uxth	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2340      	movs	r3, #64	@ 0x40
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7fd ffe5 	bl	8001c8a <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, 60, 6);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	233c      	movs	r3, #60	@ 0x3c
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7fd ffa1 	bl	8001c1e <u8g2_DrawBox>
            u8g2_SetDrawColor(u8g2, 1);
 8003cdc:	2101      	movs	r1, #1
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7fe ffa0 	bl	8002c24 <u8g2_SetDrawColor>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b299      	uxth	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2006      	movs	r0, #6
 8003cfa:	9000      	str	r0, [sp, #0]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7fd ff8e 	bl	8001c1e <u8g2_DrawBox>
 8003d02:	e01c      	b.n	8003d3e <drawSignalStrengthIndicator+0x10a>
        } else {

            u8g2_SetDrawColor(u8g2, 1);
 8003d04:	2101      	movs	r1, #1
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f7fe ff8c 	bl	8002c24 <u8g2_SetDrawColor>
            u8g2_DrawFrame(u8g2, x, y, 64, 8);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	2308      	movs	r3, #8
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2340      	movs	r3, #64	@ 0x40
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7fd ffb5 	bl	8001c8a <u8g2_DrawFrame>
            u8g2_DrawBox(u8g2, x + 1, y + 1, fillWidth, 6);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	b299      	uxth	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2006      	movs	r0, #6
 8003d36:	9000      	str	r0, [sp, #0]
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7fd ff70 	bl	8001c1e <u8g2_DrawBox>
        }
    }


    u8g2_SetDrawColor(u8g2, currentColor);
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	4619      	mov	r1, r3
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fe ff6e 	bl	8002c24 <u8g2_SetDrawColor>
}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	@ 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	51eb851f 	.word	0x51eb851f

08003d54 <drawSoundIcon>:

void drawSoundIcon(u8g2_t *u8g2, uint8_t x, uint8_t y, bool enabled) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	70fb      	strb	r3, [r7, #3]
 8003d66:	460b      	mov	r3, r1
 8003d68:	70bb      	strb	r3, [r7, #2]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	707b      	strb	r3, [r7, #1]
    if (enabled) {
 8003d6e:	787b      	ldrb	r3, [r7, #1]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <drawSoundIcon+0x3a>
        u8g2_DrawXBMP(u8g2, x, y, sound_off_image_width, sound_off_image_height, sound_off_image_bits);
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	b299      	uxth	r1, r3
 8003d78:	78bb      	ldrb	r3, [r7, #2]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <drawSoundIcon+0x5c>)
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2308      	movs	r3, #8
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2310      	movs	r3, #16
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd ff06 	bl	8001b98 <u8g2_DrawXBMP>
    } else {
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
    }
}
 8003d8c:	e00b      	b.n	8003da6 <drawSoundIcon+0x52>
    	u8g2_DrawXBMP(u8g2, x, y, sound_on_image_width, sound_on_image_height, sound_on_image_bits);
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	b299      	uxth	r1, r3
 8003d92:	78bb      	ldrb	r3, [r7, #2]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <drawSoundIcon+0x60>)
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2310      	movs	r3, #16
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fef9 	bl	8001b98 <u8g2_DrawXBMP>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08008d88 	.word	0x08008d88
 8003db4:	08008d78 	.word	0x08008d78

08003db8 <drawAlertIcon>:

void drawAlertIcon(u8g2_t *u8g2, uint8_t x, uint8_t y) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	70bb      	strb	r3, [r7, #2]
    u8g2_SetDrawColor(u8g2, 0);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe ff2a 	bl	8002c24 <u8g2_SetDrawColor>
    u8g2_DrawXBMP(u8g2, x, y, alert_width, alert_height, alert_bits);
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	b299      	uxth	r1, r3
 8003dd4:	78bb      	ldrb	r3, [r7, #2]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <drawAlertIcon+0x38>)
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	230e      	movs	r3, #14
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fed8 	bl	8001b98 <u8g2_DrawXBMP>
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08008c98 	.word	0x08008c98

08003df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e34 <HAL_Init+0x40>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_Init+0x40>)
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_Init+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <HAL_Init+0x40>)
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_Init+0x40>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <HAL_Init+0x40>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f000 f94f 	bl	80040c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f000 f808 	bl	8003e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e28:	f7fd f9d2 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00

08003e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_InitTick+0x54>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_InitTick+0x58>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f967 	bl	800412a <HAL_SYSTICK_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00e      	b.n	8003e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d80a      	bhi.n	8003e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e74:	f000 f92f 	bl	80040d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e78:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <HAL_InitTick+0x5c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	20000008 	.word	0x20000008
 8003e94:	20000004 	.word	0x20000004

08003e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_IncTick+0x20>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <HAL_IncTick+0x24>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <HAL_IncTick+0x24>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	20000974 	.word	0x20000974

08003ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <HAL_GetTick+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000974 	.word	0x20000974

08003ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff ffee 	bl	8003ec0 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef0:	d005      	beq.n	8003efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <HAL_Delay+0x44>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003efe:	bf00      	nop
 8003f00:	f7ff ffde 	bl	8003ec0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f7      	bhi.n	8003f00 <HAL_Delay+0x28>
  {
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000008 	.word	0x20000008

08003f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__NVIC_GetPriorityGrouping+0x18>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0307 	and.w	r3, r3, #7
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db0b      	blt.n	8003fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4907      	ldr	r1, [pc, #28]	@ (8003fbc <__NVIC_EnableIRQ+0x38>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	@ (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	@ (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	@ 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
         );
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	@ 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800408c:	d301      	bcc.n	8004092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408e:	2301      	movs	r3, #1
 8004090:	e00f      	b.n	80040b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004092:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <SysTick_Config+0x40>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409a:	210f      	movs	r1, #15
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040a0:	f7ff ff8e 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <SysTick_Config+0x40>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040aa:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <SysTick_Config+0x40>)
 80040ac:	2207      	movs	r2, #7
 80040ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	e000e010 	.word	0xe000e010

080040c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff29 	bl	8003f20 <__NVIC_SetPriorityGrouping>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e8:	f7ff ff3e 	bl	8003f68 <__NVIC_GetPriorityGrouping>
 80040ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff8e 	bl	8004014 <NVIC_EncodePriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff5d 	bl	8003fc0 <__NVIC_SetPriority>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff31 	bl	8003f84 <__NVIC_EnableIRQ>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ffa2 	bl	800407c <SysTick_Config>
 8004138:	4603      	mov	r3, r0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff feb6 	bl	8003ec0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e099      	b.n	8004294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004180:	e00f      	b.n	80041a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004182:	f7ff fe9d 	bl	8003ec0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b05      	cmp	r3, #5
 800418e:	d908      	bls.n	80041a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2203      	movs	r2, #3
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e078      	b.n	8004294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e8      	bne.n	8004182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4b38      	ldr	r3, [pc, #224]	@ (800429c <HAL_DMA_Init+0x158>)
 80041bc:	4013      	ands	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d107      	bne.n	800420c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	4313      	orrs	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b04      	cmp	r3, #4
 8004234:	d117      	bne.n	8004266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 faab 	bl	80047a4 <DMA_CheckFifoParam>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2240      	movs	r2, #64	@ 0x40
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004262:	2301      	movs	r3, #1
 8004264:	e016      	b.n	8004294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa62 	bl	8004738 <DMA_CalcBaseAndBitshift>
 8004274:	4603      	mov	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	223f      	movs	r2, #63	@ 0x3f
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	f010803f 	.word	0xf010803f

080042a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_Start_IT+0x26>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e040      	b.n	8004348 <HAL_DMA_Start_IT+0xa8>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d12f      	bne.n	800433a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f9f4 	bl	80046dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	223f      	movs	r2, #63	@ 0x3f
 80042fa:	409a      	lsls	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0216 	orr.w	r2, r2, #22
 800430e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e005      	b.n	8004346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d004      	beq.n	800436e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e00c      	b.n	8004388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2205      	movs	r2, #5
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043a0:	4b8e      	ldr	r3, [pc, #568]	@ (80045dc <HAL_DMA_IRQHandler+0x248>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a8e      	ldr	r2, [pc, #568]	@ (80045e0 <HAL_DMA_IRQHandler+0x24c>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	2208      	movs	r2, #8
 80043c0:	409a      	lsls	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	2208      	movs	r2, #8
 80043ee:	409a      	lsls	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	2201      	movs	r2, #1
 8004406:	409a      	lsls	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	2201      	movs	r2, #1
 8004424:	409a      	lsls	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	2204      	movs	r2, #4
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d012      	beq.n	800446c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004458:	2204      	movs	r2, #4
 800445a:	409a      	lsls	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	2210      	movs	r2, #16
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d043      	beq.n	8004504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d03c      	beq.n	8004504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	2210      	movs	r2, #16
 8004490:	409a      	lsls	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d018      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d024      	beq.n	8004504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
 80044c2:	e01f      	b.n	8004504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01b      	beq.n	8004504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
 80044d4:	e016      	b.n	8004504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0208 	bic.w	r2, r2, #8
 80044f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	2220      	movs	r2, #32
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 808f 	beq.w	8004634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8087 	beq.w	8004634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	2220      	movs	r2, #32
 800452c:	409a      	lsls	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b05      	cmp	r3, #5
 800453c:	d136      	bne.n	80045ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0216 	bic.w	r2, r2, #22
 800454c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800455c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_DMA_IRQHandler+0x1da>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	223f      	movs	r2, #63	@ 0x3f
 8004584:	409a      	lsls	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d07e      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
        }
        return;
 80045aa:	e079      	b.n	80046a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01d      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
 80045d8:	e02c      	b.n	8004634 <HAL_DMA_IRQHandler+0x2a0>
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000
 80045e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e01e      	b.n	8004634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10f      	bne.n	8004624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0210 	bic.w	r2, r2, #16
 8004612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d032      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d022      	beq.n	800468e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2205      	movs	r2, #5
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	3301      	adds	r3, #1
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	d307      	bcc.n	800467c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f2      	bne.n	8004660 <HAL_DMA_IRQHandler+0x2cc>
 800467a:	e000      	b.n	800467e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800467c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	e000      	b.n	80046a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80046a0:	bf00      	nop
    }
  }
}
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046b6:	b2db      	uxtb	r3, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d108      	bne.n	800471c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800471a:	e007      	b.n	800472c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3b10      	subs	r3, #16
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <DMA_CalcBaseAndBitshift+0x64>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004752:	4a13      	ldr	r2, [pc, #76]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d909      	bls.n	800477a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	659a      	str	r2, [r3, #88]	@ 0x58
 8004778:	e007      	b.n	800478a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004782:	f023 0303 	bic.w	r3, r3, #3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	aaaaaaab 	.word	0xaaaaaaab
 80047a0:	0800aa9c 	.word	0x0800aa9c

080047a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11f      	bne.n	80047fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d856      	bhi.n	8004872 <DMA_CheckFifoParam+0xce>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <DMA_CheckFifoParam+0x28>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047ef 	.word	0x080047ef
 80047d4:	080047dd 	.word	0x080047dd
 80047d8:	08004873 	.word	0x08004873
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d046      	beq.n	8004876 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ec:	e043      	b.n	8004876 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047f6:	d140      	bne.n	800487a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fc:	e03d      	b.n	800487a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004806:	d121      	bne.n	800484c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d837      	bhi.n	800487e <DMA_CheckFifoParam+0xda>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <DMA_CheckFifoParam+0x70>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004825 	.word	0x08004825
 8004818:	0800482b 	.word	0x0800482b
 800481c:	08004825 	.word	0x08004825
 8004820:	0800483d 	.word	0x0800483d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e030      	b.n	800488c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d025      	beq.n	8004882 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483a:	e022      	b.n	8004882 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004844:	d11f      	bne.n	8004886 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800484a:	e01c      	b.n	8004886 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d903      	bls.n	800485a <DMA_CheckFifoParam+0xb6>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d003      	beq.n	8004860 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004858:	e018      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
      break;
 800485e:	e015      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e00b      	b.n	800488a <DMA_CheckFifoParam+0xe6>
      break;
 8004872:	bf00      	nop
 8004874:	e00a      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;
 8004876:	bf00      	nop
 8004878:	e008      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;
 800487a:	bf00      	nop
 800487c:	e006      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;
 800487e:	bf00      	nop
 8004880:	e004      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;   
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <DMA_CheckFifoParam+0xe8>
      break;
 800488a:	bf00      	nop
    }
  } 
  
  return status; 
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop

0800489c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	@ 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e159      	b.n	8004b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048b8:	2201      	movs	r2, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	f040 8148 	bne.w	8004b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d005      	beq.n	80048ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d130      	bne.n	8004950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	2203      	movs	r2, #3
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004924:	2201      	movs	r2, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 0201 	and.w	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d017      	beq.n	800498c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	2203      	movs	r2, #3
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d123      	bne.n	80049e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	08da      	lsrs	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3208      	adds	r2, #8
 80049a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	220f      	movs	r2, #15
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	08da      	lsrs	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3208      	adds	r2, #8
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a2 	beq.w	8004b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b57      	ldr	r3, [pc, #348]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	4a56      	ldr	r2, [pc, #344]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a32:	4b54      	ldr	r3, [pc, #336]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a52      	ldr	r2, [pc, #328]	@ (8004b88 <HAL_GPIO_Init+0x2ec>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a49      	ldr	r2, [pc, #292]	@ (8004b8c <HAL_GPIO_Init+0x2f0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d019      	beq.n	8004a9e <HAL_GPIO_Init+0x202>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a48      	ldr	r2, [pc, #288]	@ (8004b90 <HAL_GPIO_Init+0x2f4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_Init+0x1fe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a47      	ldr	r2, [pc, #284]	@ (8004b94 <HAL_GPIO_Init+0x2f8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_GPIO_Init+0x1fa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a46      	ldr	r2, [pc, #280]	@ (8004b98 <HAL_GPIO_Init+0x2fc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <HAL_GPIO_Init+0x1f6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a45      	ldr	r2, [pc, #276]	@ (8004b9c <HAL_GPIO_Init+0x300>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_Init+0x1f2>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	e008      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a92:	2303      	movs	r3, #3
 8004a94:	e004      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e002      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	f002 0203 	and.w	r2, r2, #3
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	4093      	lsls	r3, r2
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ab0:	4935      	ldr	r1, [pc, #212]	@ (8004b88 <HAL_GPIO_Init+0x2ec>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004abe:	4b38      	ldr	r3, [pc, #224]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b12:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b60:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	f67f aea2 	bls.w	80048b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	40020400 	.word	0x40020400
 8004b94:	40020800 	.word	0x40020800
 8004b98:	40020c00 	.word	0x40020c00
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40013c00 	.word	0x40013c00

08004ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e001      	b.n	8004bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
 8004be0:	4613      	mov	r3, r2
 8004be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf0:	e003      	b.n	8004bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bf2:	887b      	ldrh	r3, [r7, #2]
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	619a      	str	r2, [r3, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c1e:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fa9e 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e12b      	b.n	8004ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc f916 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	@ 0x24
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f002 fcc6 	bl	800762c <HAL_RCC_GetPCLK1Freq>
 8004ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4a81      	ldr	r2, [pc, #516]	@ (8004eac <HAL_I2C_Init+0x274>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d807      	bhi.n	8004cbc <HAL_I2C_Init+0x84>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a80      	ldr	r2, [pc, #512]	@ (8004eb0 <HAL_I2C_Init+0x278>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	bf94      	ite	ls
 8004cb4:	2301      	movls	r3, #1
 8004cb6:	2300      	movhi	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e006      	b.n	8004cca <HAL_I2C_Init+0x92>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8004eb4 <HAL_I2C_Init+0x27c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	bf94      	ite	ls
 8004cc4:	2301      	movls	r3, #1
 8004cc6:	2300      	movhi	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0e7      	b.n	8004ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a78      	ldr	r2, [pc, #480]	@ (8004eb8 <HAL_I2C_Init+0x280>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	0c9b      	lsrs	r3, r3, #18
 8004cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a6a      	ldr	r2, [pc, #424]	@ (8004eac <HAL_I2C_Init+0x274>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d802      	bhi.n	8004d0c <HAL_I2C_Init+0xd4>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	e009      	b.n	8004d20 <HAL_I2C_Init+0xe8>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	4a69      	ldr	r2, [pc, #420]	@ (8004ebc <HAL_I2C_Init+0x284>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	3301      	adds	r3, #1
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	495c      	ldr	r1, [pc, #368]	@ (8004eac <HAL_I2C_Init+0x274>)
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	d819      	bhi.n	8004d74 <HAL_I2C_Init+0x13c>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1e59      	subs	r1, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d54:	400b      	ands	r3, r1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_I2C_Init+0x138>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1e59      	subs	r1, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6e:	e051      	b.n	8004e14 <HAL_I2C_Init+0x1dc>
 8004d70:	2304      	movs	r3, #4
 8004d72:	e04f      	b.n	8004e14 <HAL_I2C_Init+0x1dc>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d111      	bne.n	8004da0 <HAL_I2C_Init+0x168>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e58      	subs	r0, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6859      	ldr	r1, [r3, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	440b      	add	r3, r1
 8004d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e012      	b.n	8004dc6 <HAL_I2C_Init+0x18e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1e58      	subs	r0, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	0099      	lsls	r1, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Init+0x196>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e022      	b.n	8004e14 <HAL_I2C_Init+0x1dc>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10e      	bne.n	8004df4 <HAL_I2C_Init+0x1bc>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1e58      	subs	r0, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	440b      	add	r3, r1
 8004de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de8:	3301      	adds	r3, #1
 8004dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df2:	e00f      	b.n	8004e14 <HAL_I2C_Init+0x1dc>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1e58      	subs	r0, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	0099      	lsls	r1, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	6809      	ldr	r1, [r1, #0]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69da      	ldr	r2, [r3, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6911      	ldr	r1, [r2, #16]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68d2      	ldr	r2, [r2, #12]
 8004e4e:	4311      	orrs	r1, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	000186a0 	.word	0x000186a0
 8004eb0:	001e847f 	.word	0x001e847f
 8004eb4:	003d08ff 	.word	0x003d08ff
 8004eb8:	431bde83 	.word	0x431bde83
 8004ebc:	10624dd3 	.word	0x10624dd3

08004ec0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed2:	2b80      	cmp	r3, #128	@ 0x80
 8004ed4:	d103      	bne.n	8004ede <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	611a      	str	r2, [r3, #16]
  }
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	817b      	strh	r3, [r7, #10]
 8004efc:	4613      	mov	r3, r2
 8004efe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	f040 8109 	bne.w	8005124 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f12:	4b87      	ldr	r3, [pc, #540]	@ (8005130 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	08db      	lsrs	r3, r3, #3
 8004f18:	4a86      	ldr	r2, [pc, #536]	@ (8005134 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0a1a      	lsrs	r2, r3, #8
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d112      	bne.n	8004f5e <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0e3      	b.n	8005126 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d0df      	beq.n	8004f2c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0d5      	b.n	8005126 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d007      	beq.n	8004fa0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2221      	movs	r2, #33	@ 0x21
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	893a      	ldrh	r2, [r7, #8]
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a56      	ldr	r2, [pc, #344]	@ (8005138 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004fe2:	897a      	ldrh	r2, [r7, #10]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d07b      	beq.n	80050e8 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02a      	beq.n	800504e <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800513c <HAL_I2C_Master_Transmit_DMA+0x250>)
 8004ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005004:	4a4e      	ldr	r2, [pc, #312]	@ (8005140 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8005006:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500c:	2200      	movs	r2, #0
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005014:	2200      	movs	r2, #0
 8005016:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501c:	2200      	movs	r2, #0
 800501e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	2200      	movs	r2, #0
 8005026:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	4619      	mov	r1, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3310      	adds	r3, #16
 8005038:	461a      	mov	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	f7ff f92f 	bl	80042a0 <HAL_DMA_Start_IT>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d139      	bne.n	80050c0 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 800504c:	e013      	b.n	8005076 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e057      	b.n	8005126 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800508c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800509c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050ac:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e02f      	b.n	8005120 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	f043 0210 	orr.w	r2, r3, #16
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e01e      	b.n	8005126 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050f6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005106:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800511e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000000 	.word	0x20000000
 8005134:	14f8b589 	.word	0x14f8b589
 8005138:	ffff0000 	.word	0xffff0000
 800513c:	08006929 	.word	0x08006929
 8005140:	08006ae7 	.word	0x08006ae7

08005144 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005164:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d003      	beq.n	800517c <HAL_I2C_EV_IRQHandler+0x38>
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	f040 80c1 	bne.w	80052fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10d      	bne.n	80051b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800519c:	d003      	beq.n	80051a6 <HAL_I2C_EV_IRQHandler+0x62>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80051a4:	d101      	bne.n	80051aa <HAL_I2C_EV_IRQHandler+0x66>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_I2C_EV_IRQHandler+0x68>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f000 8132 	beq.w	8005416 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_I2C_EV_IRQHandler+0x92>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	0a5b      	lsrs	r3, r3, #9
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d006      	beq.n	80051d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 fda3 	bl	8006d14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fd8b 	bl	8005cea <I2C_Master_SB>
 80051d4:	e092      	b.n	80052fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	0a5b      	lsrs	r3, r3, #9
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fe01 	bl	8005df6 <I2C_Master_ADD10>
 80051f4:	e082      	b.n	80052fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0xd2>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	0a5b      	lsrs	r3, r3, #9
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fe1b 	bl	8005e4a <I2C_Master_ADDR>
 8005214:	e072      	b.n	80052fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03b      	beq.n	800529a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800522c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005230:	f000 80f3 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	09db      	lsrs	r3, r3, #7
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00f      	beq.n	8005260 <HAL_I2C_EV_IRQHandler+0x11c>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	0a9b      	lsrs	r3, r3, #10
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <HAL_I2C_EV_IRQHandler+0x11c>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9df 	bl	800561c <I2C_MasterTransmit_TXE>
 800525e:	e04d      	b.n	80052fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	089b      	lsrs	r3, r3, #2
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80d6 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	0a5b      	lsrs	r3, r3, #9
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80cf 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	2b21      	cmp	r3, #33	@ 0x21
 8005280:	d103      	bne.n	800528a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa66 	bl	8005754 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005288:	e0c7      	b.n	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b40      	cmp	r3, #64	@ 0x40
 800528e:	f040 80c4 	bne.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fad4 	bl	8005840 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005298:	e0bf      	b.n	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052a8:	f000 80b7 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	099b      	lsrs	r3, r3, #6
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <HAL_I2C_EV_IRQHandler+0x194>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	0a9b      	lsrs	r3, r3, #10
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <HAL_I2C_EV_IRQHandler+0x194>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fb4d 	bl	8005970 <I2C_MasterReceive_RXNE>
 80052d6:	e011      	b.n	80052fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 809a 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	0a5b      	lsrs	r3, r3, #9
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8093 	beq.w	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fc03 	bl	8005b00 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fa:	e08e      	b.n	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
 80052fc:	e08d      	b.n	800541a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e007      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d012      	beq.n	8005352 <HAL_I2C_EV_IRQHandler+0x20e>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	0a5b      	lsrs	r3, r3, #9
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00c      	beq.n	8005352 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005348:	69b9      	ldr	r1, [r7, #24]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 ffcc 	bl	80062e8 <I2C_Slave_ADDR>
 8005350:	e066      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_I2C_EV_IRQHandler+0x22e>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	0a5b      	lsrs	r3, r3, #9
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 f806 	bl	800637c <I2C_Slave_STOPF>
 8005370:	e056      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b21      	cmp	r3, #33	@ 0x21
 8005376:	d002      	beq.n	800537e <HAL_I2C_EV_IRQHandler+0x23a>
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	2b29      	cmp	r3, #41	@ 0x29
 800537c:	d125      	bne.n	80053ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00f      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x266>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	0a9b      	lsrs	r3, r3, #10
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x266>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fee2 	bl	800616c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053a8:	e039      	b.n	800541e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	089b      	lsrs	r3, r3, #2
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d033      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0x2da>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	0a5b      	lsrs	r3, r3, #9
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d02d      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 ff0f 	bl	80061e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053c8:	e029      	b.n	800541e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00f      	beq.n	80053f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	0a9b      	lsrs	r3, r3, #10
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 ff1a 	bl	8006228 <I2C_SlaveReceive_RXNE>
 80053f4:	e014      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	0a5b      	lsrs	r3, r3, #9
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 ff48 	bl	80062a4 <I2C_SlaveReceive_BTF>
 8005414:	e004      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800541e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b08a      	sub	sp, #40	@ 0x28
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005448:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <HAL_I2C_ER_IRQHandler+0x4e>
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005472:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <HAL_I2C_ER_IRQHandler+0x78>
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	f043 0302 	orr.w	r3, r3, #2
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800549c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	0a9b      	lsrs	r3, r3, #10
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d03f      	beq.n	800552a <HAL_I2C_ER_IRQHandler+0x104>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d039      	beq.n	800552a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80054b6:	7efb      	ldrb	r3, [r7, #27]
 80054b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80054d0:	7ebb      	ldrb	r3, [r7, #26]
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d112      	bne.n	80054fc <HAL_I2C_ER_IRQHandler+0xd6>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10f      	bne.n	80054fc <HAL_I2C_ER_IRQHandler+0xd6>
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b21      	cmp	r3, #33	@ 0x21
 80054e0:	d008      	beq.n	80054f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b29      	cmp	r3, #41	@ 0x29
 80054e6:	d005      	beq.n	80054f4 <HAL_I2C_ER_IRQHandler+0xce>
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b28      	cmp	r3, #40	@ 0x28
 80054ec:	d106      	bne.n	80054fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b21      	cmp	r3, #33	@ 0x21
 80054f2:	d103      	bne.n	80054fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 f871 	bl	80065dc <I2C_Slave_AF>
 80054fa:	e016      	b.n	800552a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005504:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800550e:	7efb      	ldrb	r3, [r7, #27]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d002      	beq.n	800551a <HAL_I2C_ER_IRQHandler+0xf4>
 8005514:	7efb      	ldrb	r3, [r7, #27]
 8005516:	2b40      	cmp	r3, #64	@ 0x40
 8005518:	d107      	bne.n	800552a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005528:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	0adb      	lsrs	r3, r3, #11
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <HAL_I2C_ER_IRQHandler+0x12e>
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	f043 0308 	orr.w	r3, r3, #8
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005552:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 f8ac 	bl	80066c4 <I2C_ITError>
  }
}
 800556c:	bf00      	nop
 800556e:	3728      	adds	r7, #40	@ 0x28
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
 80055bc:	4613      	mov	r3, r2
 80055be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005632:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d150      	bne.n	80056e4 <I2C_MasterTransmit_TXE+0xc8>
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b21      	cmp	r3, #33	@ 0x21
 8005646:	d14d      	bne.n	80056e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d01d      	beq.n	800568a <I2C_MasterTransmit_TXE+0x6e>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b20      	cmp	r3, #32
 8005652:	d01a      	beq.n	800568a <I2C_MasterTransmit_TXE+0x6e>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800565a:	d016      	beq.n	800568a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800566a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2211      	movs	r2, #17
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fe fa4e 	bl	8003b24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005688:	e060      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005698:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d107      	bne.n	80056d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff87 	bl	80055e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d2:	e03b      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fe fa21 	bl	8003b24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056e2:	e033      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b21      	cmp	r3, #33	@ 0x21
 80056e8:	d005      	beq.n	80056f6 <I2C_MasterTransmit_TXE+0xda>
 80056ea:	7bbb      	ldrb	r3, [r7, #14]
 80056ec:	2b40      	cmp	r3, #64	@ 0x40
 80056ee:	d12d      	bne.n	800574c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b22      	cmp	r3, #34	@ 0x22
 80056f4:	d12a      	bne.n	800574c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005710:	e01c      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d103      	bne.n	8005726 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f88e 	bl	8005840 <I2C_MemoryTransmit_TXE_BTF>
}
 8005724:	e012      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800574a:	e7ff      	b.n	800574c <I2C_MasterTransmit_TXE+0x130>
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b21      	cmp	r3, #33	@ 0x21
 800576c:	d164      	bne.n	8005838 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800579c:	e04c      	b.n	8005838 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d01d      	beq.n	80057e0 <I2C_MasterTransmit_BTF+0x8c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	d01a      	beq.n	80057e0 <I2C_MasterTransmit_BTF+0x8c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057b0:	d016      	beq.n	80057e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2211      	movs	r2, #17
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fe f9a3 	bl	8003b24 <HAL_I2C_MasterTxCpltCallback>
}
 80057de:	e02b      	b.n	8005838 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b40      	cmp	r3, #64	@ 0x40
 8005818:	d107      	bne.n	800582a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fedc 	bl	80055e0 <HAL_I2C_MemTxCpltCallback>
}
 8005828:	e006      	b.n	8005838 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fe f976 	bl	8003b24 <HAL_I2C_MasterTxCpltCallback>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11d      	bne.n	8005894 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d10b      	bne.n	8005878 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005864:	b2da      	uxtb	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005870:	1c9a      	adds	r2, r3, #2
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005876:	e077      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	b29b      	uxth	r3, r3
 800587e:	121b      	asrs	r3, r3, #8
 8005880:	b2da      	uxtb	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005892:	e069      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10b      	bne.n	80058b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058b2:	e059      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d152      	bne.n	8005962 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b22      	cmp	r3, #34	@ 0x22
 80058c0:	d10d      	bne.n	80058de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058dc:	e044      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b21      	cmp	r3, #33	@ 0x21
 80058ec:	d112      	bne.n	8005914 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005912:	e029      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d124      	bne.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b21      	cmp	r3, #33	@ 0x21
 8005922:	d121      	bne.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005932:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005942:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fe40 	bl	80055e0 <HAL_I2C_MemTxCpltCallback>
}
 8005960:	e002      	b.n	8005968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff faac 	bl	8004ec0 <I2C_Flush_DR>
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b22      	cmp	r3, #34	@ 0x22
 8005982:	f040 80b9 	bne.w	8005af8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d921      	bls.n	80059de <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	f040 8096 	bne.w	8005af8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059da:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80059dc:	e08c      	b.n	8005af8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d07f      	beq.n	8005ae6 <I2C_MasterReceive_RXNE+0x176>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d002      	beq.n	80059f2 <I2C_MasterReceive_RXNE+0x82>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d179      	bne.n	8005ae6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 f95c 	bl	8006cb0 <I2C_WaitOnSTOPRequestThroughIT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d14c      	bne.n	8005a98 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d10a      	bne.n	8005a6e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fdc4 	bl	80055f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a6c:	e044      	b.n	8005af8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d002      	beq.n	8005a82 <I2C_MasterReceive_RXNE+0x112>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d103      	bne.n	8005a8a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a88:	e002      	b.n	8005a90 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2212      	movs	r2, #18
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fd6f 	bl	8005574 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a96:	e02f      	b.n	8005af8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aa6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fe f840 	bl	8003b64 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ae4:	e008      	b.n	8005af8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af4:	605a      	str	r2, [r3, #4]
}
 8005af6:	e7ff      	b.n	8005af8 <I2C_MasterReceive_RXNE+0x188>
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d11b      	bne.n	8005b50 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b26:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b4e:	e0c8      	b.n	8005ce2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d129      	bne.n	8005bae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b68:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d00a      	beq.n	8005b86 <I2C_MasterReceive_BTF+0x86>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d007      	beq.n	8005b86 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005bac:	e099      	b.n	8005ce2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f040 8081 	bne.w	8005cbc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d002      	beq.n	8005bc6 <I2C_MasterReceive_BTF+0xc6>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d108      	bne.n	8005bd8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e019      	b.n	8005c0c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d002      	beq.n	8005be4 <I2C_MasterReceive_BTF+0xe4>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d108      	bne.n	8005bf6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e00a      	b.n	8005c0c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d007      	beq.n	8005c0c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005c66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b40      	cmp	r3, #64	@ 0x40
 8005c7a:	d10a      	bne.n	8005c92 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fcb2 	bl	80055f4 <HAL_I2C_MemRxCpltCallback>
}
 8005c90:	e027      	b.n	8005ce2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d002      	beq.n	8005ca6 <I2C_MasterReceive_BTF+0x1a6>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d103      	bne.n	8005cae <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cac:	e002      	b.n	8005cb4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2212      	movs	r2, #18
 8005cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fc5d 	bl	8005574 <HAL_I2C_MasterRxCpltCallback>
}
 8005cba:	e012      	b.n	8005ce2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d117      	bne.n	8005d2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d18:	e067      	b.n	8005dea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]
}
 8005d2c:	e05d      	b.n	8005dea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d36:	d133      	bne.n	8005da0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b21      	cmp	r3, #33	@ 0x21
 8005d42:	d109      	bne.n	8005d58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d54:	611a      	str	r2, [r3, #16]
 8005d56:	e008      	b.n	8005d6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <I2C_Master_SB+0x92>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d108      	bne.n	8005d8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d032      	beq.n	8005dea <I2C_Master_SB+0x100>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02d      	beq.n	8005dea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d9c:	605a      	str	r2, [r3, #4]
}
 8005d9e:	e024      	b.n	8005dea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10e      	bne.n	8005dc6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	11db      	asrs	r3, r3, #7
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0306 	and.w	r3, r3, #6
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f063 030f 	orn	r3, r3, #15
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	611a      	str	r2, [r3, #16]
}
 8005dc4:	e011      	b.n	8005dea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10d      	bne.n	8005dea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	11db      	asrs	r3, r3, #7
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 0306 	and.w	r3, r3, #6
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f063 030e 	orn	r3, r3, #14
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <I2C_Master_ADD10+0x26>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d108      	bne.n	8005e2e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <I2C_Master_ADD10+0x48>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e3c:	605a      	str	r2, [r3, #4]
  }
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b091      	sub	sp, #68	@ 0x44
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b22      	cmp	r3, #34	@ 0x22
 8005e72:	f040 8169 	bne.w	8006148 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10f      	bne.n	8005e9e <I2C_Master_ADDR+0x54>
 8005e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	d10b      	bne.n	8005e9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	e160      	b.n	8006160 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11d      	bne.n	8005ee2 <I2C_Master_ADDR+0x98>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005eae:	d118      	bne.n	8005ee2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ee0:	e13e      	b.n	8006160 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eec:	2300      	movs	r3, #0
 8005eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e115      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	f040 808a 	bne.w	8006034 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f26:	d137      	bne.n	8005f98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f46:	d113      	bne.n	8005f70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	e0e7      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f70:	2300      	movs	r3, #0
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e0d3      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d02e      	beq.n	8005ffc <I2C_Master_ADDR+0x1b2>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d02b      	beq.n	8005ffc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa6:	2b12      	cmp	r3, #18
 8005fa8:	d102      	bne.n	8005fb0 <I2C_Master_ADDR+0x166>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d125      	bne.n	8005ffc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d00e      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d00b      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d008      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e007      	b.n	8005fe4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fe2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	e0a1      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800600a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e085      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d14d      	bne.n	80060da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	2b04      	cmp	r3, #4
 8006042:	d016      	beq.n	8006072 <I2C_Master_ADDR+0x228>
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	2b02      	cmp	r3, #2
 8006048:	d013      	beq.n	8006072 <I2C_Master_ADDR+0x228>
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	2b10      	cmp	r3, #16
 800604e:	d010      	beq.n	8006072 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e007      	b.n	8006082 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006090:	d117      	bne.n	80060c2 <I2C_Master_ADDR+0x278>
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006098:	d00b      	beq.n	80060b2 <I2C_Master_ADDR+0x268>
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d008      	beq.n	80060b2 <I2C_Master_ADDR+0x268>
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d005      	beq.n	80060b2 <I2C_Master_ADDR+0x268>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d002      	beq.n	80060b2 <I2C_Master_ADDR+0x268>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d107      	bne.n	80060c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	e032      	b.n	8006140 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060f8:	d117      	bne.n	800612a <I2C_Master_ADDR+0x2e0>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006100:	d00b      	beq.n	800611a <I2C_Master_ADDR+0x2d0>
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	2b01      	cmp	r3, #1
 8006106:	d008      	beq.n	800611a <I2C_Master_ADDR+0x2d0>
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	2b08      	cmp	r3, #8
 800610c:	d005      	beq.n	800611a <I2C_Master_ADDR+0x2d0>
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	2b10      	cmp	r3, #16
 8006112:	d002      	beq.n	800611a <I2C_Master_ADDR+0x2d0>
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	2b20      	cmp	r3, #32
 8006118:	d107      	bne.n	800612a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006128:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006146:	e00b      	b.n	8006160 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
}
 800615e:	e7ff      	b.n	8006160 <I2C_Master_ADDR+0x316>
 8006160:	bf00      	nop
 8006162:	3744      	adds	r7, #68	@ 0x44
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02b      	beq.n	80061de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d114      	bne.n	80061de <I2C_SlaveTransmit_TXE+0x72>
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b29      	cmp	r3, #41	@ 0x29
 80061b8:	d111      	bne.n	80061de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2221      	movs	r2, #33	@ 0x21
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2228      	movs	r2, #40	@ 0x28
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff f9d5 	bl	8005588 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d011      	beq.n	800621c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006236:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d02c      	beq.n	800629c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d114      	bne.n	800629c <I2C_SlaveReceive_RXNE+0x74>
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b2a      	cmp	r3, #42	@ 0x2a
 8006276:	d111      	bne.n	800629c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2222      	movs	r2, #34	@ 0x22
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2228      	movs	r2, #40	@ 0x28
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff f980 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d012      	beq.n	80062dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006302:	2b28      	cmp	r3, #40	@ 0x28
 8006304:	d127      	bne.n	8006356 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006314:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	81bb      	strh	r3, [r7, #12]
 8006338:	e002      	b.n	8006340 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006348:	89ba      	ldrh	r2, [r7, #12]
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff f92e 	bl	80055b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006354:	e00e      	b.n	8006374 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800639a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d8:	d172      	bne.n	80064c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b22      	cmp	r3, #34	@ 0x22
 80063de:	d002      	beq.n	80063e6 <I2C_Slave_STOPF+0x6a>
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e4:	d135      	bne.n	8006452 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006418:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe f942 	bl	80046a8 <HAL_DMA_GetState>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d049      	beq.n	80064be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	4a69      	ldr	r2, [pc, #420]	@ (80065d4 <I2C_Slave_STOPF+0x258>)
 8006430:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd ff8a 	bl	8004350 <HAL_DMA_Abort_IT>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03d      	beq.n	80064be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006450:	e035      	b.n	80064be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f043 0204 	orr.w	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006484:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe f90c 	bl	80046a8 <HAL_DMA_GetState>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d014      	beq.n	80064c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649a:	4a4e      	ldr	r2, [pc, #312]	@ (80065d4 <I2C_Slave_STOPF+0x258>)
 800649c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd ff54 	bl	8004350 <HAL_DMA_Abort_IT>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
 80064bc:	e000      	b.n	80064c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03e      	beq.n	8006548 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d112      	bne.n	80064fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	d112      	bne.n	8006532 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	f043 0204 	orr.w	r2, r3, #4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8b7 	bl	80066c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006556:	e039      	b.n	80065cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b2a      	cmp	r3, #42	@ 0x2a
 800655c:	d109      	bne.n	8006572 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2228      	movs	r2, #40	@ 0x28
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff f815 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b28      	cmp	r3, #40	@ 0x28
 800657c:	d111      	bne.n	80065a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <I2C_Slave_STOPF+0x25c>)
 8006582:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f816 	bl	80055cc <HAL_I2C_ListenCpltCallback>
}
 80065a0:	e014      	b.n	80065cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	2b22      	cmp	r3, #34	@ 0x22
 80065a8:	d002      	beq.n	80065b0 <I2C_Slave_STOPF+0x234>
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b22      	cmp	r3, #34	@ 0x22
 80065ae:	d10d      	bne.n	80065cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fe ffe8 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08006b61 	.word	0x08006b61
 80065d8:	ffff0000 	.word	0xffff0000

080065dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d002      	beq.n	80065fe <I2C_Slave_AF+0x22>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d129      	bne.n	8006652 <I2C_Slave_AF+0x76>
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b28      	cmp	r3, #40	@ 0x28
 8006602:	d126      	bne.n	8006652 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a2e      	ldr	r2, [pc, #184]	@ (80066c0 <I2C_Slave_AF+0xe4>)
 8006608:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006618:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006622:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006632:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fe ffbe 	bl	80055cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006650:	e031      	b.n	80066b6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b21      	cmp	r3, #33	@ 0x21
 8006656:	d129      	bne.n	80066ac <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a19      	ldr	r2, [pc, #100]	@ (80066c0 <I2C_Slave_AF+0xe4>)
 800665c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2221      	movs	r2, #33	@ 0x21
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006682:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800668c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fe fc0e 	bl	8004ec0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fe ff6f 	bl	8005588 <HAL_I2C_SlaveTxCpltCallback>
}
 80066aa:	e004      	b.n	80066b6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066b4:	615a      	str	r2, [r3, #20]
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	ffff0000 	.word	0xffff0000

080066c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d002      	beq.n	80066e8 <I2C_ITError+0x24>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	d10a      	bne.n	80066fe <I2C_ITError+0x3a>
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b22      	cmp	r3, #34	@ 0x22
 80066ec:	d107      	bne.n	80066fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006704:	2b28      	cmp	r3, #40	@ 0x28
 8006706:	d107      	bne.n	8006718 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2228      	movs	r2, #40	@ 0x28
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006716:	e015      	b.n	8006744 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006726:	d00a      	beq.n	800673e <I2C_ITError+0x7a>
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b60      	cmp	r3, #96	@ 0x60
 800672c:	d007      	beq.n	800673e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800674e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006752:	d162      	bne.n	800681a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006762:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d020      	beq.n	80067b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006776:	4a6a      	ldr	r2, [pc, #424]	@ (8006920 <I2C_ITError+0x25c>)
 8006778:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd fde6 	bl	8004350 <HAL_DMA_Abort_IT>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8089 	beq.w	800689e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067ae:	4610      	mov	r0, r2
 80067b0:	4798      	blx	r3
 80067b2:	e074      	b.n	800689e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	4a59      	ldr	r2, [pc, #356]	@ (8006920 <I2C_ITError+0x25c>)
 80067ba:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fd fdc5 	bl	8004350 <HAL_DMA_Abort_IT>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d068      	beq.n	800689e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d6:	2b40      	cmp	r3, #64	@ 0x40
 80067d8:	d10b      	bne.n	80067f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	e041      	b.n	800689e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b60      	cmp	r3, #96	@ 0x60
 8006824:	d125      	bne.n	8006872 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d10b      	bne.n	800685a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fe fecc 	bl	8005608 <HAL_I2C_AbortCpltCallback>
 8006870:	e015      	b.n	800689e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d10b      	bne.n	8006898 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fd f963 	bl	8003b64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10e      	bne.n	80068cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d113      	bne.n	8006918 <I2C_ITError+0x254>
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b28      	cmp	r3, #40	@ 0x28
 80068f4:	d110      	bne.n	8006918 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <I2C_ITError+0x260>)
 80068fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fe fe5a 	bl	80055cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	08006b61 	.word	0x08006b61
 8006924:	ffff0000 	.word	0xffff0000

08006928 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006934:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800693c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006944:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800695a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006968:	2200      	movs	r2, #0
 800696a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800697c:	7cfb      	ldrb	r3, [r7, #19]
 800697e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006982:	2b21      	cmp	r3, #33	@ 0x21
 8006984:	d007      	beq.n	8006996 <I2C_DMAXferCplt+0x6e>
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800698c:	2b22      	cmp	r3, #34	@ 0x22
 800698e:	d131      	bne.n	80069f4 <I2C_DMAXferCplt+0xcc>
 8006990:	7cbb      	ldrb	r3, [r7, #18]
 8006992:	2b20      	cmp	r3, #32
 8006994:	d12e      	bne.n	80069f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069ac:	7cfb      	ldrb	r3, [r7, #19]
 80069ae:	2b29      	cmp	r3, #41	@ 0x29
 80069b0:	d10a      	bne.n	80069c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2221      	movs	r2, #33	@ 0x21
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2228      	movs	r2, #40	@ 0x28
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069c0:	6978      	ldr	r0, [r7, #20]
 80069c2:	f7fe fde1 	bl	8005588 <HAL_I2C_SlaveTxCpltCallback>
 80069c6:	e00c      	b.n	80069e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
 80069ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80069cc:	d109      	bne.n	80069e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2222      	movs	r2, #34	@ 0x22
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2228      	movs	r2, #40	@ 0x28
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069dc:	6978      	ldr	r0, [r7, #20]
 80069de:	f7fe fddd 	bl	800559c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80069f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069f2:	e074      	b.n	8006ade <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d06e      	beq.n	8006ade <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a18:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006a28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a30:	d009      	beq.n	8006a46 <I2C_DMAXferCplt+0x11e>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d006      	beq.n	8006a46 <I2C_DMAXferCplt+0x11e>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006a3e:	d002      	beq.n	8006a46 <I2C_DMAXferCplt+0x11e>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d107      	bne.n	8006a56 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a64:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a74:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006a84:	6978      	ldr	r0, [r7, #20]
 8006a86:	f7fd f86d 	bl	8003b64 <HAL_I2C_ErrorCallback>
}
 8006a8a:	e028      	b.n	8006ade <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b40      	cmp	r3, #64	@ 0x40
 8006a9e:	d10a      	bne.n	8006ab6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f7fe fda0 	bl	80055f4 <HAL_I2C_MemRxCpltCallback>
}
 8006ab4:	e013      	b.n	8006ade <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d002      	beq.n	8006aca <I2C_DMAXferCplt+0x1a2>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d103      	bne.n	8006ad2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ad0:	e002      	b.n	8006ad8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2212      	movs	r2, #18
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ad8:	6978      	ldr	r0, [r7, #20]
 8006ada:	f7fe fd4b 	bl	8005574 <HAL_I2C_MasterRxCpltCallback>
}
 8006ade:	bf00      	nop
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b00:	2200      	movs	r2, #0
 8006b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	2200      	movs	r2, #0
 8006b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fd fdd5 	bl	80046c4 <HAL_DMA_GetError>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d01b      	beq.n	8006b58 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b2e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	f043 0210 	orr.w	r2, r3, #16
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fd f806 	bl	8003b64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca8 <I2C_DMAAbort+0x148>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	4a4a      	ldr	r2, [pc, #296]	@ (8006cac <I2C_DMAAbort+0x14c>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	0a1a      	lsrs	r2, r3, #8
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00da      	lsls	r2, r3, #3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006ba6:	e00a      	b.n	8006bbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bbc:	d0ea      	beq.n	8006b94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bca:	2200      	movs	r2, #0
 8006bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	2200      	movs	r2, #0
 8006bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c00:	2200      	movs	r2, #0
 8006c02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	2200      	movs	r2, #0
 8006c12:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b60      	cmp	r3, #96	@ 0x60
 8006c2e:	d10e      	bne.n	8006c4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2200      	movs	r2, #0
 8006c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7fe fcde 	bl	8005608 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c4c:	e027      	b.n	8006c9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c4e:	7cfb      	ldrb	r3, [r7, #19]
 8006c50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c54:	2b28      	cmp	r3, #40	@ 0x28
 8006c56:	d117      	bne.n	8006c88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2228      	movs	r2, #40	@ 0x28
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c86:	e007      	b.n	8006c98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006c98:	6978      	ldr	r0, [r7, #20]
 8006c9a:	f7fc ff63 	bl	8003b64 <HAL_I2C_ErrorCallback>
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	14f8b589 	.word	0x14f8b589

08006cb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cbc:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	08db      	lsrs	r3, r3, #3
 8006cc2:	4a13      	ldr	r2, [pc, #76]	@ (8006d10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0a1a      	lsrs	r2, r3, #8
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e008      	b.n	8006d00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cfc:	d0e9      	beq.n	8006cd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	20000000 	.word	0x20000000
 8006d10:	14f8b589 	.word	0x14f8b589

08006d14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006d24:	d103      	bne.n	8006d2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d2c:	e007      	b.n	8006d3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006d36:	d102      	bne.n	8006d3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e267      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d075      	beq.n	8006e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d6a:	4b88      	ldr	r3, [pc, #544]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d00c      	beq.n	8006d90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d76:	4b85      	ldr	r3, [pc, #532]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d112      	bne.n	8006da8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d82:	4b82      	ldr	r3, [pc, #520]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d8e:	d10b      	bne.n	8006da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d90:	4b7e      	ldr	r3, [pc, #504]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05b      	beq.n	8006e54 <HAL_RCC_OscConfig+0x108>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d157      	bne.n	8006e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e242      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x74>
 8006db2:	4b76      	ldr	r3, [pc, #472]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a75      	ldr	r2, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e01d      	b.n	8006dfc <HAL_RCC_OscConfig+0xb0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x98>
 8006dca:	4b70      	ldr	r3, [pc, #448]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6f      	ldr	r2, [pc, #444]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a6c      	ldr	r2, [pc, #432]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e00b      	b.n	8006dfc <HAL_RCC_OscConfig+0xb0>
 8006de4:	4b69      	ldr	r3, [pc, #420]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a68      	ldr	r2, [pc, #416]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	4b66      	ldr	r3, [pc, #408]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a65      	ldr	r2, [pc, #404]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d013      	beq.n	8006e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e04:	f7fd f85c 	bl	8003ec0 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e0c:	f7fd f858 	bl	8003ec0 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b64      	cmp	r3, #100	@ 0x64
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e207      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0xc0>
 8006e2a:	e014      	b.n	8006e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2c:	f7fd f848 	bl	8003ec0 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e34:	f7fd f844 	bl	8003ec0 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b64      	cmp	r3, #100	@ 0x64
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e1f3      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e46:	4b51      	ldr	r3, [pc, #324]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0xe8>
 8006e52:	e000      	b.n	8006e56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d063      	beq.n	8006f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e62:	4b4a      	ldr	r3, [pc, #296]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 030c 	and.w	r3, r3, #12
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e6e:	4b47      	ldr	r3, [pc, #284]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d11c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e7a:	4b44      	ldr	r3, [pc, #272]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d116      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e86:	4b41      	ldr	r3, [pc, #260]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_RCC_OscConfig+0x152>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d001      	beq.n	8006e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e1c7      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4937      	ldr	r1, [pc, #220]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eb2:	e03a      	b.n	8006f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ebc:	4b34      	ldr	r3, [pc, #208]	@ (8006f90 <HAL_RCC_OscConfig+0x244>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec2:	f7fc fffd 	bl	8003ec0 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eca:	f7fc fff9 	bl	8003ec0 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e1a8      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006edc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0f0      	beq.n	8006eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee8:	4b28      	ldr	r3, [pc, #160]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	4925      	ldr	r1, [pc, #148]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	600b      	str	r3, [r1, #0]
 8006efc:	e015      	b.n	8006f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <HAL_RCC_OscConfig+0x244>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f04:	f7fc ffdc 	bl	8003ec0 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f0c:	f7fc ffd8 	bl	8003ec0 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e187      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d036      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f3e:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <HAL_RCC_OscConfig+0x248>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f44:	f7fc ffbc 	bl	8003ec0 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4c:	f7fc ffb8 	bl	8003ec0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e167      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <HAL_RCC_OscConfig+0x240>)
 8006f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x200>
 8006f6a:	e01b      	b.n	8006fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6c:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_RCC_OscConfig+0x248>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f72:	f7fc ffa5 	bl	8003ec0 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f78:	e00e      	b.n	8006f98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7a:	f7fc ffa1 	bl	8003ec0 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d907      	bls.n	8006f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e150      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	42470000 	.word	0x42470000
 8006f94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f98:	4b88      	ldr	r3, [pc, #544]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1ea      	bne.n	8006f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8097 	beq.w	80070e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb6:	4b81      	ldr	r3, [pc, #516]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	4a7c      	ldr	r2, [pc, #496]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8006fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	60bb      	str	r3, [r7, #8]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe2:	4b77      	ldr	r3, [pc, #476]	@ (80071c0 <HAL_RCC_OscConfig+0x474>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d118      	bne.n	8007020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fee:	4b74      	ldr	r3, [pc, #464]	@ (80071c0 <HAL_RCC_OscConfig+0x474>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a73      	ldr	r2, [pc, #460]	@ (80071c0 <HAL_RCC_OscConfig+0x474>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ffa:	f7fc ff61 	bl	8003ec0 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fc ff5d 	bl	8003ec0 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e10c      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007014:	4b6a      	ldr	r3, [pc, #424]	@ (80071c0 <HAL_RCC_OscConfig+0x474>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d106      	bne.n	8007036 <HAL_RCC_OscConfig+0x2ea>
 8007028:	4b64      	ldr	r3, [pc, #400]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702c:	4a63      	ldr	r2, [pc, #396]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800702e:	f043 0301 	orr.w	r3, r3, #1
 8007032:	6713      	str	r3, [r2, #112]	@ 0x70
 8007034:	e01c      	b.n	8007070 <HAL_RCC_OscConfig+0x324>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x30c>
 800703e:	4b5f      	ldr	r3, [pc, #380]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a5e      	ldr	r2, [pc, #376]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007044:	f043 0304 	orr.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70
 800704a:	4b5c      	ldr	r3, [pc, #368]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	4a5b      	ldr	r2, [pc, #364]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6713      	str	r3, [r2, #112]	@ 0x70
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0x324>
 8007058:	4b58      	ldr	r3, [pc, #352]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705c:	4a57      	ldr	r2, [pc, #348]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	6713      	str	r3, [r2, #112]	@ 0x70
 8007064:	4b55      	ldr	r3, [pc, #340]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007068:	4a54      	ldr	r2, [pc, #336]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 800706a:	f023 0304 	bic.w	r3, r3, #4
 800706e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007078:	f7fc ff22 	bl	8003ec0 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707e:	e00a      	b.n	8007096 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007080:	f7fc ff1e 	bl	8003ec0 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0cb      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007096:	4b49      	ldr	r3, [pc, #292]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0ee      	beq.n	8007080 <HAL_RCC_OscConfig+0x334>
 80070a2:	e014      	b.n	80070ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070a4:	f7fc ff0c 	bl	8003ec0 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fc ff08 	bl	8003ec0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e0b5      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c2:	4b3e      	ldr	r3, [pc, #248]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1ee      	bne.n	80070ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d105      	bne.n	80070e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d4:	4b39      	ldr	r3, [pc, #228]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	4a38      	ldr	r2, [pc, #224]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 80070da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80a1 	beq.w	800722c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070ea:	4b34      	ldr	r3, [pc, #208]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d05c      	beq.n	80071b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d141      	bne.n	8007182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fe:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <HAL_RCC_OscConfig+0x478>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007104:	f7fc fedc 	bl	8003ec0 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710c:	f7fc fed8 	bl	8003ec0 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e087      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711e:	4b27      	ldr	r3, [pc, #156]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f0      	bne.n	800710c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	019b      	lsls	r3, r3, #6
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	3b01      	subs	r3, #1
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	491b      	ldr	r1, [pc, #108]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007150:	4313      	orrs	r3, r2
 8007152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007154:	4b1b      	ldr	r3, [pc, #108]	@ (80071c4 <HAL_RCC_OscConfig+0x478>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715a:	f7fc feb1 	bl	8003ec0 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007162:	f7fc fead 	bl	8003ec0 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e05c      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007174:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <HAL_RCC_OscConfig+0x416>
 8007180:	e054      	b.n	800722c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007182:	4b10      	ldr	r3, [pc, #64]	@ (80071c4 <HAL_RCC_OscConfig+0x478>)
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007188:	f7fc fe9a 	bl	8003ec0 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007190:	f7fc fe96 	bl	8003ec0 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e045      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a2:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <HAL_RCC_OscConfig+0x470>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f0      	bne.n	8007190 <HAL_RCC_OscConfig+0x444>
 80071ae:	e03d      	b.n	800722c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d107      	bne.n	80071c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e038      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40007000 	.word	0x40007000
 80071c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <HAL_RCC_OscConfig+0x4ec>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d028      	beq.n	8007228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d121      	bne.n	8007228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d11a      	bne.n	8007228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071f8:	4013      	ands	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007200:	4293      	cmp	r3, r2
 8007202:	d111      	bne.n	8007228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	3b01      	subs	r3, #1
 8007212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007214:	429a      	cmp	r2, r3
 8007216:	d107      	bne.n	8007228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40023800 	.word	0x40023800

0800723c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0cc      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007250:	4b68      	ldr	r3, [pc, #416]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d90c      	bls.n	8007278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725e:	4b65      	ldr	r3, [pc, #404]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007266:	4b63      	ldr	r3, [pc, #396]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d001      	beq.n	8007278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0b8      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d020      	beq.n	80072c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007290:	4b59      	ldr	r3, [pc, #356]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	4a58      	ldr	r2, [pc, #352]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800729a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a8:	4b53      	ldr	r3, [pc, #332]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	4a52      	ldr	r2, [pc, #328]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b4:	4b50      	ldr	r3, [pc, #320]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	494d      	ldr	r1, [pc, #308]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d044      	beq.n	800735c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d107      	bne.n	80072ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072da:	4b47      	ldr	r3, [pc, #284]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d119      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e07f      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d003      	beq.n	80072fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d107      	bne.n	800730a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072fa:	4b3f      	ldr	r3, [pc, #252]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e06f      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800730a:	4b3b      	ldr	r3, [pc, #236]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e067      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800731a:	4b37      	ldr	r3, [pc, #220]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f023 0203 	bic.w	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	4934      	ldr	r1, [pc, #208]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	4313      	orrs	r3, r2
 800732a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800732c:	f7fc fdc8 	bl	8003ec0 <HAL_GetTick>
 8007330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007332:	e00a      	b.n	800734a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007334:	f7fc fdc4 	bl	8003ec0 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e04f      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734a:	4b2b      	ldr	r3, [pc, #172]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 020c 	and.w	r2, r3, #12
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	429a      	cmp	r2, r3
 800735a:	d1eb      	bne.n	8007334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800735c:	4b25      	ldr	r3, [pc, #148]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d20c      	bcs.n	8007384 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b22      	ldr	r3, [pc, #136]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b20      	ldr	r3, [pc, #128]	@ (80073f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e032      	b.n	80073ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007390:	4b19      	ldr	r3, [pc, #100]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4916      	ldr	r1, [pc, #88]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ae:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	490e      	ldr	r1, [pc, #56]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073c2:	f000 f821 	bl	8007408 <HAL_RCC_GetSysClockFreq>
 80073c6:	4602      	mov	r2, r0
 80073c8:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	091b      	lsrs	r3, r3, #4
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	490a      	ldr	r1, [pc, #40]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 80073d4:	5ccb      	ldrb	r3, [r1, r3]
 80073d6:	fa22 f303 	lsr.w	r3, r2, r3
 80073da:	4a09      	ldr	r2, [pc, #36]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80073de:	4b09      	ldr	r3, [pc, #36]	@ (8007404 <HAL_RCC_ClockConfig+0x1c8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fc fd28 	bl	8003e38 <HAL_InitTick>

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40023c00 	.word	0x40023c00
 80073f8:	40023800 	.word	0x40023800
 80073fc:	08008f8c 	.word	0x08008f8c
 8007400:	20000000 	.word	0x20000000
 8007404:	20000004 	.word	0x20000004

08007408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800740c:	b094      	sub	sp, #80	@ 0x50
 800740e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007420:	4b79      	ldr	r3, [pc, #484]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 030c 	and.w	r3, r3, #12
 8007428:	2b08      	cmp	r3, #8
 800742a:	d00d      	beq.n	8007448 <HAL_RCC_GetSysClockFreq+0x40>
 800742c:	2b08      	cmp	r3, #8
 800742e:	f200 80e1 	bhi.w	80075f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x34>
 8007436:	2b04      	cmp	r3, #4
 8007438:	d003      	beq.n	8007442 <HAL_RCC_GetSysClockFreq+0x3a>
 800743a:	e0db      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800743c:	4b73      	ldr	r3, [pc, #460]	@ (800760c <HAL_RCC_GetSysClockFreq+0x204>)
 800743e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007440:	e0db      	b.n	80075fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007442:	4b73      	ldr	r3, [pc, #460]	@ (8007610 <HAL_RCC_GetSysClockFreq+0x208>)
 8007444:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007446:	e0d8      	b.n	80075fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007448:	4b6f      	ldr	r3, [pc, #444]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007450:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007452:	4b6d      	ldr	r3, [pc, #436]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d063      	beq.n	8007526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800745e:	4b6a      	ldr	r3, [pc, #424]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	099b      	lsrs	r3, r3, #6
 8007464:	2200      	movs	r2, #0
 8007466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007468:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007470:	633b      	str	r3, [r7, #48]	@ 0x30
 8007472:	2300      	movs	r3, #0
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
 8007476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800747a:	4622      	mov	r2, r4
 800747c:	462b      	mov	r3, r5
 800747e:	f04f 0000 	mov.w	r0, #0
 8007482:	f04f 0100 	mov.w	r1, #0
 8007486:	0159      	lsls	r1, r3, #5
 8007488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800748c:	0150      	lsls	r0, r2, #5
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4621      	mov	r1, r4
 8007494:	1a51      	subs	r1, r2, r1
 8007496:	6139      	str	r1, [r7, #16]
 8007498:	4629      	mov	r1, r5
 800749a:	eb63 0301 	sbc.w	r3, r3, r1
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ac:	4659      	mov	r1, fp
 80074ae:	018b      	lsls	r3, r1, #6
 80074b0:	4651      	mov	r1, sl
 80074b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074b6:	4651      	mov	r1, sl
 80074b8:	018a      	lsls	r2, r1, #6
 80074ba:	4651      	mov	r1, sl
 80074bc:	ebb2 0801 	subs.w	r8, r2, r1
 80074c0:	4659      	mov	r1, fp
 80074c2:	eb63 0901 	sbc.w	r9, r3, r1
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074da:	4690      	mov	r8, r2
 80074dc:	4699      	mov	r9, r3
 80074de:	4623      	mov	r3, r4
 80074e0:	eb18 0303 	adds.w	r3, r8, r3
 80074e4:	60bb      	str	r3, [r7, #8]
 80074e6:	462b      	mov	r3, r5
 80074e8:	eb49 0303 	adc.w	r3, r9, r3
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074fa:	4629      	mov	r1, r5
 80074fc:	024b      	lsls	r3, r1, #9
 80074fe:	4621      	mov	r1, r4
 8007500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007504:	4621      	mov	r1, r4
 8007506:	024a      	lsls	r2, r1, #9
 8007508:	4610      	mov	r0, r2
 800750a:	4619      	mov	r1, r3
 800750c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750e:	2200      	movs	r2, #0
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007518:	f7f8 feb2 	bl	8000280 <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4613      	mov	r3, r2
 8007522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007524:	e058      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007526:	4b38      	ldr	r3, [pc, #224]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	099b      	lsrs	r3, r3, #6
 800752c:	2200      	movs	r2, #0
 800752e:	4618      	mov	r0, r3
 8007530:	4611      	mov	r1, r2
 8007532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007536:	623b      	str	r3, [r7, #32]
 8007538:	2300      	movs	r3, #0
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
 800753c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	f04f 0000 	mov.w	r0, #0
 8007548:	f04f 0100 	mov.w	r1, #0
 800754c:	0159      	lsls	r1, r3, #5
 800754e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007552:	0150      	lsls	r0, r2, #5
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4641      	mov	r1, r8
 800755a:	ebb2 0a01 	subs.w	sl, r2, r1
 800755e:	4649      	mov	r1, r9
 8007560:	eb63 0b01 	sbc.w	fp, r3, r1
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007578:	ebb2 040a 	subs.w	r4, r2, sl
 800757c:	eb63 050b 	sbc.w	r5, r3, fp
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	00eb      	lsls	r3, r5, #3
 800758a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758e:	00e2      	lsls	r2, r4, #3
 8007590:	4614      	mov	r4, r2
 8007592:	461d      	mov	r5, r3
 8007594:	4643      	mov	r3, r8
 8007596:	18e3      	adds	r3, r4, r3
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	464b      	mov	r3, r9
 800759c:	eb45 0303 	adc.w	r3, r5, r3
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ae:	4629      	mov	r1, r5
 80075b0:	028b      	lsls	r3, r1, #10
 80075b2:	4621      	mov	r1, r4
 80075b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075b8:	4621      	mov	r1, r4
 80075ba:	028a      	lsls	r2, r1, #10
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c2:	2200      	movs	r2, #0
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	61fa      	str	r2, [r7, #28]
 80075c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075cc:	f7f8 fe58 	bl	8000280 <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4613      	mov	r3, r2
 80075d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80075d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <HAL_RCC_GetSysClockFreq+0x200>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	3301      	adds	r3, #1
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80075e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075f2:	e002      	b.n	80075fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_RCC_GetSysClockFreq+0x204>)
 80075f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3750      	adds	r7, #80	@ 0x50
 8007600:	46bd      	mov	sp, r7
 8007602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007606:	bf00      	nop
 8007608:	40023800 	.word	0x40023800
 800760c:	00f42400 	.word	0x00f42400
 8007610:	007a1200 	.word	0x007a1200

08007614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007618:	4b03      	ldr	r3, [pc, #12]	@ (8007628 <HAL_RCC_GetHCLKFreq+0x14>)
 800761a:	681b      	ldr	r3, [r3, #0]
}
 800761c:	4618      	mov	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000000 	.word	0x20000000

0800762c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007630:	f7ff fff0 	bl	8007614 <HAL_RCC_GetHCLKFreq>
 8007634:	4602      	mov	r2, r0
 8007636:	4b05      	ldr	r3, [pc, #20]	@ (800764c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	0a9b      	lsrs	r3, r3, #10
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	4903      	ldr	r1, [pc, #12]	@ (8007650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007642:	5ccb      	ldrb	r3, [r1, r3]
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40023800 	.word	0x40023800
 8007650:	08008f9c 	.word	0x08008f9c

08007654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007658:	f7ff ffdc 	bl	8007614 <HAL_RCC_GetHCLKFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b05      	ldr	r3, [pc, #20]	@ (8007674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	0b5b      	lsrs	r3, r3, #13
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4903      	ldr	r1, [pc, #12]	@ (8007678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40023800 	.word	0x40023800
 8007678:	08008f9c 	.word	0x08008f9c

0800767c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e042      	b.n	8007714 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f9 fe98 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2224      	movs	r2, #36	@ 0x24
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f82b 	bl	800771c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695a      	ldr	r2, [r3, #20]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800771c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007720:	b0c0      	sub	sp, #256	@ 0x100
 8007722:	af00      	add	r7, sp, #0
 8007724:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007738:	68d9      	ldr	r1, [r3, #12]
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	ea40 0301 	orr.w	r3, r0, r1
 8007744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	431a      	orrs	r2, r3
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	431a      	orrs	r2, r3
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007774:	f021 010c 	bic.w	r1, r1, #12
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007782:	430b      	orrs	r3, r1
 8007784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007796:	6999      	ldr	r1, [r3, #24]
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	ea40 0301 	orr.w	r3, r0, r1
 80077a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b8f      	ldr	r3, [pc, #572]	@ (80079e8 <UART_SetConfig+0x2cc>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d005      	beq.n	80077bc <UART_SetConfig+0xa0>
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b8d      	ldr	r3, [pc, #564]	@ (80079ec <UART_SetConfig+0x2d0>)
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d104      	bne.n	80077c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7ff ff4a 	bl	8007654 <HAL_RCC_GetPCLK2Freq>
 80077c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077c4:	e003      	b.n	80077ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077c6:	f7ff ff31 	bl	800762c <HAL_RCC_GetPCLK1Freq>
 80077ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d8:	f040 810c 	bne.w	80079f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	1891      	adds	r1, r2, r2
 80077f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077f6:	415b      	adcs	r3, r3
 80077f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077fe:	4621      	mov	r1, r4
 8007800:	eb12 0801 	adds.w	r8, r2, r1
 8007804:	4629      	mov	r1, r5
 8007806:	eb43 0901 	adc.w	r9, r3, r1
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800781a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800781e:	4690      	mov	r8, r2
 8007820:	4699      	mov	r9, r3
 8007822:	4623      	mov	r3, r4
 8007824:	eb18 0303 	adds.w	r3, r8, r3
 8007828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800782c:	462b      	mov	r3, r5
 800782e:	eb49 0303 	adc.w	r3, r9, r3
 8007832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800784a:	460b      	mov	r3, r1
 800784c:	18db      	adds	r3, r3, r3
 800784e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007850:	4613      	mov	r3, r2
 8007852:	eb42 0303 	adc.w	r3, r2, r3
 8007856:	657b      	str	r3, [r7, #84]	@ 0x54
 8007858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800785c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007860:	f7f8 fd0e 	bl	8000280 <__aeabi_uldivmod>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4b61      	ldr	r3, [pc, #388]	@ (80079f0 <UART_SetConfig+0x2d4>)
 800786a:	fba3 2302 	umull	r2, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	011c      	lsls	r4, r3, #4
 8007872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007876:	2200      	movs	r2, #0
 8007878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800787c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	1891      	adds	r1, r2, r2
 800788a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800788c:	415b      	adcs	r3, r3
 800788e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007894:	4641      	mov	r1, r8
 8007896:	eb12 0a01 	adds.w	sl, r2, r1
 800789a:	4649      	mov	r1, r9
 800789c:	eb43 0b01 	adc.w	fp, r3, r1
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b4:	4692      	mov	sl, r2
 80078b6:	469b      	mov	fp, r3
 80078b8:	4643      	mov	r3, r8
 80078ba:	eb1a 0303 	adds.w	r3, sl, r3
 80078be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078c2:	464b      	mov	r3, r9
 80078c4:	eb4b 0303 	adc.w	r3, fp, r3
 80078c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078e0:	460b      	mov	r3, r1
 80078e2:	18db      	adds	r3, r3, r3
 80078e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078e6:	4613      	mov	r3, r2
 80078e8:	eb42 0303 	adc.w	r3, r2, r3
 80078ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078f6:	f7f8 fcc3 	bl	8000280 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	4b3b      	ldr	r3, [pc, #236]	@ (80079f0 <UART_SetConfig+0x2d4>)
 8007902:	fba3 2301 	umull	r2, r3, r3, r1
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	2264      	movs	r2, #100	@ 0x64
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	1acb      	subs	r3, r1, r3
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007916:	4b36      	ldr	r3, [pc, #216]	@ (80079f0 <UART_SetConfig+0x2d4>)
 8007918:	fba3 2302 	umull	r2, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007924:	441c      	add	r4, r3
 8007926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800792a:	2200      	movs	r2, #0
 800792c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007930:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	1891      	adds	r1, r2, r2
 800793e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007940:	415b      	adcs	r3, r3
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007948:	4641      	mov	r1, r8
 800794a:	1851      	adds	r1, r2, r1
 800794c:	6339      	str	r1, [r7, #48]	@ 0x30
 800794e:	4649      	mov	r1, r9
 8007950:	414b      	adcs	r3, r1
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007960:	4659      	mov	r1, fp
 8007962:	00cb      	lsls	r3, r1, #3
 8007964:	4651      	mov	r1, sl
 8007966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796a:	4651      	mov	r1, sl
 800796c:	00ca      	lsls	r2, r1, #3
 800796e:	4610      	mov	r0, r2
 8007970:	4619      	mov	r1, r3
 8007972:	4603      	mov	r3, r0
 8007974:	4642      	mov	r2, r8
 8007976:	189b      	adds	r3, r3, r2
 8007978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800797c:	464b      	mov	r3, r9
 800797e:	460a      	mov	r2, r1
 8007980:	eb42 0303 	adc.w	r3, r2, r3
 8007984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007994:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800799c:	460b      	mov	r3, r1
 800799e:	18db      	adds	r3, r3, r3
 80079a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079a2:	4613      	mov	r3, r2
 80079a4:	eb42 0303 	adc.w	r3, r2, r3
 80079a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079b2:	f7f8 fc65 	bl	8000280 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <UART_SetConfig+0x2d4>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	@ 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	3332      	adds	r3, #50	@ 0x32
 80079ce:	4a08      	ldr	r2, [pc, #32]	@ (80079f0 <UART_SetConfig+0x2d4>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f003 0207 	and.w	r2, r3, #7
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4422      	add	r2, r4
 80079e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079e4:	e106      	b.n	8007bf4 <UART_SetConfig+0x4d8>
 80079e6:	bf00      	nop
 80079e8:	40011000 	.word	0x40011000
 80079ec:	40011400 	.word	0x40011400
 80079f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	1891      	adds	r1, r2, r2
 8007a0c:	6239      	str	r1, [r7, #32]
 8007a0e:	415b      	adcs	r3, r3
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a16:	4641      	mov	r1, r8
 8007a18:	1854      	adds	r4, r2, r1
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	eb43 0501 	adc.w	r5, r3, r1
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	00eb      	lsls	r3, r5, #3
 8007a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a2e:	00e2      	lsls	r2, r4, #3
 8007a30:	4614      	mov	r4, r2
 8007a32:	461d      	mov	r5, r3
 8007a34:	4643      	mov	r3, r8
 8007a36:	18e3      	adds	r3, r4, r3
 8007a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	eb45 0303 	adc.w	r3, r5, r3
 8007a42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a62:	4629      	mov	r1, r5
 8007a64:	008b      	lsls	r3, r1, #2
 8007a66:	4621      	mov	r1, r4
 8007a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	008a      	lsls	r2, r1, #2
 8007a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a74:	f7f8 fc04 	bl	8000280 <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4b60      	ldr	r3, [pc, #384]	@ (8007c00 <UART_SetConfig+0x4e4>)
 8007a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	011c      	lsls	r4, r3, #4
 8007a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	1891      	adds	r1, r2, r2
 8007a9e:	61b9      	str	r1, [r7, #24]
 8007aa0:	415b      	adcs	r3, r3
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	1851      	adds	r1, r2, r1
 8007aac:	6139      	str	r1, [r7, #16]
 8007aae:	4649      	mov	r1, r9
 8007ab0:	414b      	adcs	r3, r1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	00cb      	lsls	r3, r1, #3
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aca:	4651      	mov	r1, sl
 8007acc:	00ca      	lsls	r2, r1, #3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	189b      	adds	r3, r3, r2
 8007ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007adc:	464b      	mov	r3, r9
 8007ade:	460a      	mov	r2, r1
 8007ae0:	eb42 0303 	adc.w	r3, r2, r3
 8007ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007af2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b00:	4649      	mov	r1, r9
 8007b02:	008b      	lsls	r3, r1, #2
 8007b04:	4641      	mov	r1, r8
 8007b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	008a      	lsls	r2, r1, #2
 8007b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b12:	f7f8 fbb5 	bl	8000280 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4b38      	ldr	r3, [pc, #224]	@ (8007c00 <UART_SetConfig+0x4e4>)
 8007b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	2264      	movs	r2, #100	@ 0x64
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	1acb      	subs	r3, r1, r3
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	3332      	adds	r3, #50	@ 0x32
 8007b30:	4a33      	ldr	r2, [pc, #204]	@ (8007c00 <UART_SetConfig+0x4e4>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b3c:	441c      	add	r4, r3
 8007b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b42:	2200      	movs	r2, #0
 8007b44:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b46:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	464b      	mov	r3, r9
 8007b50:	1891      	adds	r1, r2, r2
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	415b      	adcs	r3, r3
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	1851      	adds	r1, r2, r1
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	4649      	mov	r1, r9
 8007b64:	414b      	adcs	r3, r1
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b74:	4659      	mov	r1, fp
 8007b76:	00cb      	lsls	r3, r1, #3
 8007b78:	4651      	mov	r1, sl
 8007b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b7e:	4651      	mov	r1, sl
 8007b80:	00ca      	lsls	r2, r1, #3
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	4603      	mov	r3, r0
 8007b88:	4642      	mov	r2, r8
 8007b8a:	189b      	adds	r3, r3, r2
 8007b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b8e:	464b      	mov	r3, r9
 8007b90:	460a      	mov	r2, r1
 8007b92:	eb42 0303 	adc.w	r3, r2, r3
 8007b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ba2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	008b      	lsls	r3, r1, #2
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bba:	4641      	mov	r1, r8
 8007bbc:	008a      	lsls	r2, r1, #2
 8007bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bc2:	f7f8 fb5d 	bl	8000280 <__aeabi_uldivmod>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <UART_SetConfig+0x4e4>)
 8007bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	2164      	movs	r1, #100	@ 0x64
 8007bd4:	fb01 f303 	mul.w	r3, r1, r3
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	3332      	adds	r3, #50	@ 0x32
 8007bde:	4a08      	ldr	r2, [pc, #32]	@ (8007c00 <UART_SetConfig+0x4e4>)
 8007be0:	fba2 2303 	umull	r2, r3, r2, r3
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	f003 020f 	and.w	r2, r3, #15
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4422      	add	r2, r4
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c00:	51eb851f 	.word	0x51eb851f

08007c04 <_ZN13EventRecieverC1Ev>:
 *      Author: lex
 */

#include <EventReciever.h>

EventReciever::EventReciever() {
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	4a04      	ldr	r2, [pc, #16]	@ (8007c20 <_ZN13EventRecieverC1Ev+0x1c>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	0800aaac 	.word	0x0800aaac

08007c24 <_ZN13EventRecieverD1Ev>:

EventReciever::~EventReciever() {
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	4a04      	ldr	r2, [pc, #16]	@ (8007c40 <_ZN13EventRecieverD1Ev+0x1c>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	0800aaac 	.word	0x0800aaac

08007c44 <_ZN11EventSenderC1Ev>:
 *      Author: lex
 */

#include <EventSender.h>

EventSender::EventSender() {
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4a04      	ldr	r2, [pc, #16]	@ (8007c60 <_ZN11EventSenderC1Ev+0x1c>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	0800aac0 	.word	0x0800aac0

08007c64 <_ZN11EventSenderD1Ev>:

EventSender::~EventSender() {
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	@ (8007c80 <_ZN11EventSenderD1Ev+0x1c>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	0800aac0 	.word	0x0800aac0

08007c84 <_ZN11EventSenderD0Ev>:
EventSender::~EventSender() {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
}
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff ffe9 	bl	8007c64 <_ZN11EventSenderD1Ev>
 8007c92:	2108      	movs	r1, #8
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f83d 	bl	8007d14 <_ZdlPvj>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <_Z14getChannelNametiPc>:
const uint16_t Band_X[8] = 					{ 4991, 5021, 5049, 5079, 5109, 5139, 5171, 5201 }; // X
const uint16_t Band_J[8] = 					{ 4867, 4883, 4921, 4958, 4995, 5032, 5069, 5099 }; // J
const uint16_t Band_K[8] = 					{ 5959, 5979, 5999, 6019, 6039, 6059, 6079, 6101 }; // K
const uint16_t Band_Z[8] = 					{ 6001, 6027, 6053, 6079, 6105, 6131, 6157, 6183 };  // Z

void getChannelName(uint16_t frequency, int receiver, char printBuffer[24]) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	4603      	mov	r3, r0
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	81fb      	strh	r3, [r7, #14]
//  if (receiver == 1) {
    for (uint8_t i = 0; i < 137; i++) {
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]
 8007cb6:	e01e      	b.n	8007cf6 <_Z14getChannelNametiPc+0x52>
      if (channelFreqTable[i] == frequency) {
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	4a13      	ldr	r2, [pc, #76]	@ (8007d08 <_Z14getChannelNametiPc+0x64>)
 8007cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc0:	89fa      	ldrh	r2, [r7, #14]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d114      	bne.n	8007cf0 <_Z14getChannelNametiPc+0x4c>
        char band = 'A' + (i / 8); // определяем бенд (A, B, E, F, ...)
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	08db      	lsrs	r3, r3, #3
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	3341      	adds	r3, #65	@ 0x41
 8007cce:	75bb      	strb	r3, [r7, #22]
        uint8_t channel = (i % 8) + 1; // номер канала в бенде
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	3301      	adds	r3, #1
 8007cda:	757b      	strb	r3, [r7, #21]
        snprintf(printBuffer, sizeof(printBuffer), " CH\:%c %i", band, channel);
 8007cdc:	7dba      	ldrb	r2, [r7, #22]
 8007cde:	7d7b      	ldrb	r3, [r7, #21]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	4a09      	ldr	r2, [pc, #36]	@ (8007d0c <_Z14getChannelNametiPc+0x68>)
 8007ce6:	2104      	movs	r1, #4
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa41 	bl	8008170 <sniprintf>
        return;
 8007cee:	e008      	b.n	8007d02 <_Z14getChannelNametiPc+0x5e>
    for (uint8_t i = 0; i < 137; i++) {
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	2b88      	cmp	r3, #136	@ 0x88
 8007cfa:	d9dd      	bls.n	8007cb8 <_Z14getChannelNametiPc+0x14>
//        return;
//      }
//    }
//  }

  printBuffer = " CH:--";
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <_Z14getChannelNametiPc+0x6c>)
 8007cfe:	607b      	str	r3, [r7, #4]
  return;
 8007d00:	bf00      	nop
}
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08008df4 	.word	0x08008df4
 8007d0c:	08008f40 	.word	0x08008f40
 8007d10:	08008f4c 	.word	0x08008f4c

08007d14 <_ZdlPvj>:
 8007d14:	f000 b800 	b.w	8007d18 <_ZdlPv>

08007d18 <_ZdlPv>:
 8007d18:	f000 b980 	b.w	800801c <free>

08007d1c <swapfunc>:
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	d00a      	beq.n	8007d38 <swapfunc+0x1c>
 8007d22:	0892      	lsrs	r2, r2, #2
 8007d24:	3a01      	subs	r2, #1
 8007d26:	6803      	ldr	r3, [r0, #0]
 8007d28:	680c      	ldr	r4, [r1, #0]
 8007d2a:	f840 4b04 	str.w	r4, [r0], #4
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	f841 3b04 	str.w	r3, [r1], #4
 8007d34:	dcf6      	bgt.n	8007d24 <swapfunc+0x8>
 8007d36:	bd10      	pop	{r4, pc}
 8007d38:	4402      	add	r2, r0
 8007d3a:	780c      	ldrb	r4, [r1, #0]
 8007d3c:	7803      	ldrb	r3, [r0, #0]
 8007d3e:	f800 4b01 	strb.w	r4, [r0], #1
 8007d42:	f801 3b01 	strb.w	r3, [r1], #1
 8007d46:	1a13      	subs	r3, r2, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dcf6      	bgt.n	8007d3a <swapfunc+0x1e>
 8007d4c:	e7f3      	b.n	8007d36 <swapfunc+0x1a>

08007d4e <med3.constprop.0>:
 8007d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d50:	460f      	mov	r7, r1
 8007d52:	4616      	mov	r6, r2
 8007d54:	4604      	mov	r4, r0
 8007d56:	461d      	mov	r5, r3
 8007d58:	4798      	blx	r3
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4638      	mov	r0, r7
 8007d60:	da0c      	bge.n	8007d7c <med3.constprop.0+0x2e>
 8007d62:	47a8      	blx	r5
 8007d64:	2800      	cmp	r0, #0
 8007d66:	da02      	bge.n	8007d6e <med3.constprop.0+0x20>
 8007d68:	463c      	mov	r4, r7
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4620      	mov	r0, r4
 8007d72:	47a8      	blx	r5
 8007d74:	2800      	cmp	r0, #0
 8007d76:	daf8      	bge.n	8007d6a <med3.constprop.0+0x1c>
 8007d78:	4634      	mov	r4, r6
 8007d7a:	e7f6      	b.n	8007d6a <med3.constprop.0+0x1c>
 8007d7c:	47a8      	blx	r5
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	dcf2      	bgt.n	8007d68 <med3.constprop.0+0x1a>
 8007d82:	4631      	mov	r1, r6
 8007d84:	4620      	mov	r0, r4
 8007d86:	47a8      	blx	r5
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	daf5      	bge.n	8007d78 <med3.constprop.0+0x2a>
 8007d8c:	e7ed      	b.n	8007d6a <med3.constprop.0+0x1c>

08007d8e <qsort>:
 8007d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d92:	b095      	sub	sp, #84	@ 0x54
 8007d94:	4607      	mov	r7, r0
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	ea40 0302 	orr.w	r3, r0, r2
 8007d9c:	079b      	lsls	r3, r3, #30
 8007d9e:	4615      	mov	r5, r2
 8007da0:	d118      	bne.n	8007dd4 <qsort+0x46>
 8007da2:	f1b2 0804 	subs.w	r8, r2, #4
 8007da6:	bf18      	it	ne
 8007da8:	f04f 0801 	movne.w	r8, #1
 8007dac:	2300      	movs	r3, #0
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	fb05 f401 	mul.w	r4, r5, r1
 8007db4:	193b      	adds	r3, r7, r4
 8007db6:	2906      	cmp	r1, #6
 8007db8:	eb07 0b05 	add.w	fp, r7, r5
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	d828      	bhi.n	8007e12 <qsort+0x84>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	459b      	cmp	fp, r3
 8007dc4:	d310      	bcc.n	8007de8 <qsort+0x5a>
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8117 	bne.w	8007ffc <qsort+0x26e>
 8007dce:	b015      	add	sp, #84	@ 0x54
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	f04f 0802 	mov.w	r8, #2
 8007dd8:	e7e8      	b.n	8007dac <qsort+0x1e>
 8007dda:	4643      	mov	r3, r8
 8007ddc:	462a      	mov	r2, r5
 8007dde:	4631      	mov	r1, r6
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7ff ff9b 	bl	8007d1c <swapfunc>
 8007de6:	e00f      	b.n	8007e08 <qsort+0x7a>
 8007de8:	465c      	mov	r4, fp
 8007dea:	e00e      	b.n	8007e0a <qsort+0x7c>
 8007dec:	1b66      	subs	r6, r4, r5
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	4621      	mov	r1, r4
 8007df2:	4630      	mov	r0, r6
 8007df4:	4798      	blx	r3
 8007df6:	2800      	cmp	r0, #0
 8007df8:	dd09      	ble.n	8007e0e <qsort+0x80>
 8007dfa:	f1b8 0f00 	cmp.w	r8, #0
 8007dfe:	d1ec      	bne.n	8007dda <qsort+0x4c>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	6832      	ldr	r2, [r6, #0]
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	6033      	str	r3, [r6, #0]
 8007e08:	4634      	mov	r4, r6
 8007e0a:	42a7      	cmp	r7, r4
 8007e0c:	d3ee      	bcc.n	8007dec <qsort+0x5e>
 8007e0e:	44ab      	add	fp, r5
 8007e10:	e7d6      	b.n	8007dc0 <qsort+0x32>
 8007e12:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8007e16:	1b64      	subs	r4, r4, r5
 8007e18:	2907      	cmp	r1, #7
 8007e1a:	fb05 7909 	mla	r9, r5, r9, r7
 8007e1e:	443c      	add	r4, r7
 8007e20:	d021      	beq.n	8007e66 <qsort+0xd8>
 8007e22:	2928      	cmp	r1, #40	@ 0x28
 8007e24:	d944      	bls.n	8007eb0 <qsort+0x122>
 8007e26:	08ce      	lsrs	r6, r1, #3
 8007e28:	436e      	muls	r6, r5
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8007e30:	19b9      	adds	r1, r7, r6
 8007e32:	4638      	mov	r0, r7
 8007e34:	f7ff ff8b 	bl	8007d4e <med3.constprop.0>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	eb09 0206 	add.w	r2, r9, r6
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	4682      	mov	sl, r0
 8007e42:	1b88      	subs	r0, r1, r6
 8007e44:	f7ff ff83 	bl	8007d4e <med3.constprop.0>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	1ba1      	subs	r1, r4, r6
 8007e50:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8007e54:	f7ff ff7b 	bl	8007d4e <med3.constprop.0>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	4650      	mov	r0, sl
 8007e60:	f7ff ff75 	bl	8007d4e <med3.constprop.0>
 8007e64:	4681      	mov	r9, r0
 8007e66:	f1b8 0f00 	cmp.w	r8, #0
 8007e6a:	d124      	bne.n	8007eb6 <qsort+0x128>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f8d9 2000 	ldr.w	r2, [r9]
 8007e72:	603a      	str	r2, [r7, #0]
 8007e74:	f8c9 3000 	str.w	r3, [r9]
 8007e78:	46d9      	mov	r9, fp
 8007e7a:	46a2      	mov	sl, r4
 8007e7c:	465e      	mov	r6, fp
 8007e7e:	2300      	movs	r3, #0
 8007e80:	45a1      	cmp	r9, r4
 8007e82:	d836      	bhi.n	8007ef2 <qsort+0x164>
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	4639      	mov	r1, r7
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	4648      	mov	r0, r9
 8007e8c:	4798      	blx	r3
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	dc2c      	bgt.n	8007eee <qsort+0x160>
 8007e94:	d10a      	bne.n	8007eac <qsort+0x11e>
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	d113      	bne.n	8007ec4 <qsort+0x136>
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea2:	6032      	str	r2, [r6, #0]
 8007ea4:	f8c9 3000 	str.w	r3, [r9]
 8007ea8:	442e      	add	r6, r5
 8007eaa:	2301      	movs	r3, #1
 8007eac:	44a9      	add	r9, r5
 8007eae:	e7e7      	b.n	8007e80 <qsort+0xf2>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	46ba      	mov	sl, r7
 8007eb4:	e7d1      	b.n	8007e5a <qsort+0xcc>
 8007eb6:	4643      	mov	r3, r8
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ff2d 	bl	8007d1c <swapfunc>
 8007ec2:	e7d9      	b.n	8007e78 <qsort+0xea>
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4649      	mov	r1, r9
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ff26 	bl	8007d1c <swapfunc>
 8007ed0:	e7ea      	b.n	8007ea8 <qsort+0x11a>
 8007ed2:	d10b      	bne.n	8007eec <qsort+0x15e>
 8007ed4:	f1b8 0f00 	cmp.w	r8, #0
 8007ed8:	d113      	bne.n	8007f02 <qsort+0x174>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f8da 2000 	ldr.w	r2, [sl]
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	f8ca 3000 	str.w	r3, [sl]
 8007ee6:	ebaa 0a05 	sub.w	sl, sl, r5
 8007eea:	2301      	movs	r3, #1
 8007eec:	1b64      	subs	r4, r4, r5
 8007eee:	45a1      	cmp	r9, r4
 8007ef0:	d90e      	bls.n	8007f10 <qsort+0x182>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d140      	bne.n	8007f78 <qsort+0x1ea>
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	459b      	cmp	fp, r3
 8007efa:	f4bf af64 	bcs.w	8007dc6 <qsort+0x38>
 8007efe:	465c      	mov	r4, fp
 8007f00:	e036      	b.n	8007f70 <qsort+0x1e2>
 8007f02:	4643      	mov	r3, r8
 8007f04:	462a      	mov	r2, r5
 8007f06:	4651      	mov	r1, sl
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7ff ff07 	bl	8007d1c <swapfunc>
 8007f0e:	e7ea      	b.n	8007ee6 <qsort+0x158>
 8007f10:	9303      	str	r3, [sp, #12]
 8007f12:	4639      	mov	r1, r7
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	4620      	mov	r0, r4
 8007f18:	4798      	blx	r3
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	dad8      	bge.n	8007ed2 <qsort+0x144>
 8007f20:	f1b8 0f00 	cmp.w	r8, #0
 8007f24:	d107      	bne.n	8007f36 <qsort+0x1a8>
 8007f26:	f8d9 3000 	ldr.w	r3, [r9]
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	f8c9 2000 	str.w	r2, [r9]
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	e7b9      	b.n	8007eaa <qsort+0x11c>
 8007f36:	4643      	mov	r3, r8
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f7ff feed 	bl	8007d1c <swapfunc>
 8007f42:	e7f6      	b.n	8007f32 <qsort+0x1a4>
 8007f44:	4643      	mov	r3, r8
 8007f46:	462a      	mov	r2, r5
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fee6 	bl	8007d1c <swapfunc>
 8007f50:	e00d      	b.n	8007f6e <qsort+0x1e0>
 8007f52:	1b66      	subs	r6, r4, r5
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4798      	blx	r3
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	dd09      	ble.n	8007f74 <qsort+0x1e6>
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	d1ee      	bne.n	8007f44 <qsort+0x1b6>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	6832      	ldr	r2, [r6, #0]
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	6033      	str	r3, [r6, #0]
 8007f6e:	4634      	mov	r4, r6
 8007f70:	42a7      	cmp	r7, r4
 8007f72:	d3ee      	bcc.n	8007f52 <qsort+0x1c4>
 8007f74:	44ab      	add	fp, r5
 8007f76:	e7be      	b.n	8007ef6 <qsort+0x168>
 8007f78:	eba9 0b06 	sub.w	fp, r9, r6
 8007f7c:	1bf2      	subs	r2, r6, r7
 8007f7e:	455a      	cmp	r2, fp
 8007f80:	bfa8      	it	ge
 8007f82:	465a      	movge	r2, fp
 8007f84:	b12a      	cbz	r2, 8007f92 <qsort+0x204>
 8007f86:	4643      	mov	r3, r8
 8007f88:	eba9 0102 	sub.w	r1, r9, r2
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff fec5 	bl	8007d1c <swapfunc>
 8007f92:	9b02      	ldr	r3, [sp, #8]
 8007f94:	eba3 020a 	sub.w	r2, r3, sl
 8007f98:	ebaa 0404 	sub.w	r4, sl, r4
 8007f9c:	1b52      	subs	r2, r2, r5
 8007f9e:	42a2      	cmp	r2, r4
 8007fa0:	bf28      	it	cs
 8007fa2:	4622      	movcs	r2, r4
 8007fa4:	b12a      	cbz	r2, 8007fb2 <qsort+0x224>
 8007fa6:	9902      	ldr	r1, [sp, #8]
 8007fa8:	4643      	mov	r3, r8
 8007faa:	1a89      	subs	r1, r1, r2
 8007fac:	4648      	mov	r0, r9
 8007fae:	f7ff feb5 	bl	8007d1c <swapfunc>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	455c      	cmp	r4, fp
 8007fb6:	eba3 0604 	sub.w	r6, r3, r4
 8007fba:	d805      	bhi.n	8007fc8 <qsort+0x23a>
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	465c      	mov	r4, fp
 8007fc0:	469b      	mov	fp, r3
 8007fc2:	4633      	mov	r3, r6
 8007fc4:	463e      	mov	r6, r7
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	45ab      	cmp	fp, r5
 8007fca:	d920      	bls.n	800800e <qsort+0x280>
 8007fcc:	fbbb f1f5 	udiv	r1, fp, r5
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	2b07      	cmp	r3, #7
 8007fd4:	d80b      	bhi.n	8007fee <qsort+0x260>
 8007fd6:	fbb4 f4f5 	udiv	r4, r4, r5
 8007fda:	aa14      	add	r2, sp, #80	@ 0x50
 8007fdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fe0:	f843 6c40 	str.w	r6, [r3, #-64]
 8007fe4:	f843 4c3c 	str.w	r4, [r3, #-60]
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	3301      	adds	r3, #1
 8007fec:	e6df      	b.n	8007dae <qsort+0x20>
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff fecb 	bl	8007d8e <qsort>
 8007ff8:	42ac      	cmp	r4, r5
 8007ffa:	d80b      	bhi.n	8008014 <qsort+0x286>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	aa14      	add	r2, sp, #80	@ 0x50
 8008000:	3b01      	subs	r3, #1
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008008:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 800800c:	e6d0      	b.n	8007db0 <qsort+0x22>
 800800e:	42ac      	cmp	r4, r5
 8008010:	f67f aed9 	bls.w	8007dc6 <qsort+0x38>
 8008014:	fbb4 f1f5 	udiv	r1, r4, r5
 8008018:	4637      	mov	r7, r6
 800801a:	e6c9      	b.n	8007db0 <qsort+0x22>

0800801c <free>:
 800801c:	4b02      	ldr	r3, [pc, #8]	@ (8008028 <free+0xc>)
 800801e:	4601      	mov	r1, r0
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f000 b953 	b.w	80082cc <_free_r>
 8008026:	bf00      	nop
 8008028:	2000000c 	.word	0x2000000c

0800802c <sbrk_aligned>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	4e0f      	ldr	r6, [pc, #60]	@ (800806c <sbrk_aligned+0x40>)
 8008030:	460c      	mov	r4, r1
 8008032:	6831      	ldr	r1, [r6, #0]
 8008034:	4605      	mov	r5, r0
 8008036:	b911      	cbnz	r1, 800803e <sbrk_aligned+0x12>
 8008038:	f000 f8fe 	bl	8008238 <_sbrk_r>
 800803c:	6030      	str	r0, [r6, #0]
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f8f9 	bl	8008238 <_sbrk_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d103      	bne.n	8008052 <sbrk_aligned+0x26>
 800804a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800804e:	4620      	mov	r0, r4
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	1cc4      	adds	r4, r0, #3
 8008054:	f024 0403 	bic.w	r4, r4, #3
 8008058:	42a0      	cmp	r0, r4
 800805a:	d0f8      	beq.n	800804e <sbrk_aligned+0x22>
 800805c:	1a21      	subs	r1, r4, r0
 800805e:	4628      	mov	r0, r5
 8008060:	f000 f8ea 	bl	8008238 <_sbrk_r>
 8008064:	3001      	adds	r0, #1
 8008066:	d1f2      	bne.n	800804e <sbrk_aligned+0x22>
 8008068:	e7ef      	b.n	800804a <sbrk_aligned+0x1e>
 800806a:	bf00      	nop
 800806c:	20000978 	.word	0x20000978

08008070 <_malloc_r>:
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008074:	1ccd      	adds	r5, r1, #3
 8008076:	f025 0503 	bic.w	r5, r5, #3
 800807a:	3508      	adds	r5, #8
 800807c:	2d0c      	cmp	r5, #12
 800807e:	bf38      	it	cc
 8008080:	250c      	movcc	r5, #12
 8008082:	2d00      	cmp	r5, #0
 8008084:	4606      	mov	r6, r0
 8008086:	db01      	blt.n	800808c <_malloc_r+0x1c>
 8008088:	42a9      	cmp	r1, r5
 800808a:	d904      	bls.n	8008096 <_malloc_r+0x26>
 800808c:	230c      	movs	r3, #12
 800808e:	6033      	str	r3, [r6, #0]
 8008090:	2000      	movs	r0, #0
 8008092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800816c <_malloc_r+0xfc>
 800809a:	f000 f89f 	bl	80081dc <__malloc_lock>
 800809e:	f8d8 3000 	ldr.w	r3, [r8]
 80080a2:	461c      	mov	r4, r3
 80080a4:	bb44      	cbnz	r4, 80080f8 <_malloc_r+0x88>
 80080a6:	4629      	mov	r1, r5
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff ffbf 	bl	800802c <sbrk_aligned>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	4604      	mov	r4, r0
 80080b2:	d158      	bne.n	8008166 <_malloc_r+0xf6>
 80080b4:	f8d8 4000 	ldr.w	r4, [r8]
 80080b8:	4627      	mov	r7, r4
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	d143      	bne.n	8008146 <_malloc_r+0xd6>
 80080be:	2c00      	cmp	r4, #0
 80080c0:	d04b      	beq.n	800815a <_malloc_r+0xea>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	4639      	mov	r1, r7
 80080c6:	4630      	mov	r0, r6
 80080c8:	eb04 0903 	add.w	r9, r4, r3
 80080cc:	f000 f8b4 	bl	8008238 <_sbrk_r>
 80080d0:	4581      	cmp	r9, r0
 80080d2:	d142      	bne.n	800815a <_malloc_r+0xea>
 80080d4:	6821      	ldr	r1, [r4, #0]
 80080d6:	1a6d      	subs	r5, r5, r1
 80080d8:	4629      	mov	r1, r5
 80080da:	4630      	mov	r0, r6
 80080dc:	f7ff ffa6 	bl	800802c <sbrk_aligned>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d03a      	beq.n	800815a <_malloc_r+0xea>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	442b      	add	r3, r5
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	f8d8 3000 	ldr.w	r3, [r8]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	bb62      	cbnz	r2, 800814c <_malloc_r+0xdc>
 80080f2:	f8c8 7000 	str.w	r7, [r8]
 80080f6:	e00f      	b.n	8008118 <_malloc_r+0xa8>
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	1b52      	subs	r2, r2, r5
 80080fc:	d420      	bmi.n	8008140 <_malloc_r+0xd0>
 80080fe:	2a0b      	cmp	r2, #11
 8008100:	d917      	bls.n	8008132 <_malloc_r+0xc2>
 8008102:	1961      	adds	r1, r4, r5
 8008104:	42a3      	cmp	r3, r4
 8008106:	6025      	str	r5, [r4, #0]
 8008108:	bf18      	it	ne
 800810a:	6059      	strne	r1, [r3, #4]
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	bf08      	it	eq
 8008110:	f8c8 1000 	streq.w	r1, [r8]
 8008114:	5162      	str	r2, [r4, r5]
 8008116:	604b      	str	r3, [r1, #4]
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f865 	bl	80081e8 <__malloc_unlock>
 800811e:	f104 000b 	add.w	r0, r4, #11
 8008122:	1d23      	adds	r3, r4, #4
 8008124:	f020 0007 	bic.w	r0, r0, #7
 8008128:	1ac2      	subs	r2, r0, r3
 800812a:	bf1c      	itt	ne
 800812c:	1a1b      	subne	r3, r3, r0
 800812e:	50a3      	strne	r3, [r4, r2]
 8008130:	e7af      	b.n	8008092 <_malloc_r+0x22>
 8008132:	6862      	ldr	r2, [r4, #4]
 8008134:	42a3      	cmp	r3, r4
 8008136:	bf0c      	ite	eq
 8008138:	f8c8 2000 	streq.w	r2, [r8]
 800813c:	605a      	strne	r2, [r3, #4]
 800813e:	e7eb      	b.n	8008118 <_malloc_r+0xa8>
 8008140:	4623      	mov	r3, r4
 8008142:	6864      	ldr	r4, [r4, #4]
 8008144:	e7ae      	b.n	80080a4 <_malloc_r+0x34>
 8008146:	463c      	mov	r4, r7
 8008148:	687f      	ldr	r7, [r7, #4]
 800814a:	e7b6      	b.n	80080ba <_malloc_r+0x4a>
 800814c:	461a      	mov	r2, r3
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	42a3      	cmp	r3, r4
 8008152:	d1fb      	bne.n	800814c <_malloc_r+0xdc>
 8008154:	2300      	movs	r3, #0
 8008156:	6053      	str	r3, [r2, #4]
 8008158:	e7de      	b.n	8008118 <_malloc_r+0xa8>
 800815a:	230c      	movs	r3, #12
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	4630      	mov	r0, r6
 8008160:	f000 f842 	bl	80081e8 <__malloc_unlock>
 8008164:	e794      	b.n	8008090 <_malloc_r+0x20>
 8008166:	6005      	str	r5, [r0, #0]
 8008168:	e7d6      	b.n	8008118 <_malloc_r+0xa8>
 800816a:	bf00      	nop
 800816c:	2000097c 	.word	0x2000097c

08008170 <sniprintf>:
 8008170:	b40c      	push	{r2, r3}
 8008172:	b530      	push	{r4, r5, lr}
 8008174:	4b18      	ldr	r3, [pc, #96]	@ (80081d8 <sniprintf+0x68>)
 8008176:	1e0c      	subs	r4, r1, #0
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	b09d      	sub	sp, #116	@ 0x74
 800817c:	da08      	bge.n	8008190 <sniprintf+0x20>
 800817e:	238b      	movs	r3, #139	@ 0x8b
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008186:	b01d      	add	sp, #116	@ 0x74
 8008188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800818c:	b002      	add	sp, #8
 800818e:	4770      	bx	lr
 8008190:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008194:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800819e:	bf14      	ite	ne
 80081a0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80081a4:	4623      	moveq	r3, r4
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081ae:	9002      	str	r0, [sp, #8]
 80081b0:	9006      	str	r0, [sp, #24]
 80081b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081b8:	ab21      	add	r3, sp, #132	@ 0x84
 80081ba:	a902      	add	r1, sp, #8
 80081bc:	4628      	mov	r0, r5
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	f000 f92a 	bl	8008418 <_svfiprintf_r>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	bfbc      	itt	lt
 80081c8:	238b      	movlt	r3, #139	@ 0x8b
 80081ca:	602b      	strlt	r3, [r5, #0]
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d0da      	beq.n	8008186 <sniprintf+0x16>
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	e7d6      	b.n	8008186 <sniprintf+0x16>
 80081d8:	2000000c 	.word	0x2000000c

080081dc <__malloc_lock>:
 80081dc:	4801      	ldr	r0, [pc, #4]	@ (80081e4 <__malloc_lock+0x8>)
 80081de:	f000 b865 	b.w	80082ac <__retarget_lock_acquire_recursive>
 80081e2:	bf00      	nop
 80081e4:	20000ab8 	.word	0x20000ab8

080081e8 <__malloc_unlock>:
 80081e8:	4801      	ldr	r0, [pc, #4]	@ (80081f0 <__malloc_unlock+0x8>)
 80081ea:	f000 b860 	b.w	80082ae <__retarget_lock_release_recursive>
 80081ee:	bf00      	nop
 80081f0:	20000ab8 	.word	0x20000ab8

080081f4 <memmove>:
 80081f4:	4288      	cmp	r0, r1
 80081f6:	b510      	push	{r4, lr}
 80081f8:	eb01 0402 	add.w	r4, r1, r2
 80081fc:	d902      	bls.n	8008204 <memmove+0x10>
 80081fe:	4284      	cmp	r4, r0
 8008200:	4623      	mov	r3, r4
 8008202:	d807      	bhi.n	8008214 <memmove+0x20>
 8008204:	1e43      	subs	r3, r0, #1
 8008206:	42a1      	cmp	r1, r4
 8008208:	d008      	beq.n	800821c <memmove+0x28>
 800820a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800820e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008212:	e7f8      	b.n	8008206 <memmove+0x12>
 8008214:	4402      	add	r2, r0
 8008216:	4601      	mov	r1, r0
 8008218:	428a      	cmp	r2, r1
 800821a:	d100      	bne.n	800821e <memmove+0x2a>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008226:	e7f7      	b.n	8008218 <memmove+0x24>

08008228 <memset>:
 8008228:	4402      	add	r2, r0
 800822a:	4603      	mov	r3, r0
 800822c:	4293      	cmp	r3, r2
 800822e:	d100      	bne.n	8008232 <memset+0xa>
 8008230:	4770      	bx	lr
 8008232:	f803 1b01 	strb.w	r1, [r3], #1
 8008236:	e7f9      	b.n	800822c <memset+0x4>

08008238 <_sbrk_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4d06      	ldr	r5, [pc, #24]	@ (8008254 <_sbrk_r+0x1c>)
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7f9 f856 	bl	80012f4 <_sbrk>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_sbrk_r+0x1a>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_sbrk_r+0x1a>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20000abc 	.word	0x20000abc

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	@ (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	2000000c 	.word	0x2000000c

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4d0d      	ldr	r5, [pc, #52]	@ (800829c <__libc_init_array+0x38>)
 8008268:	4c0d      	ldr	r4, [pc, #52]	@ (80082a0 <__libc_init_array+0x3c>)
 800826a:	1b64      	subs	r4, r4, r5
 800826c:	10a4      	asrs	r4, r4, #2
 800826e:	2600      	movs	r6, #0
 8008270:	42a6      	cmp	r6, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	4d0b      	ldr	r5, [pc, #44]	@ (80082a4 <__libc_init_array+0x40>)
 8008276:	4c0c      	ldr	r4, [pc, #48]	@ (80082a8 <__libc_init_array+0x44>)
 8008278:	f000 fb8c 	bl	8008994 <_init>
 800827c:	1b64      	subs	r4, r4, r5
 800827e:	10a4      	asrs	r4, r4, #2
 8008280:	2600      	movs	r6, #0
 8008282:	42a6      	cmp	r6, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f855 3b04 	ldr.w	r3, [r5], #4
 800828c:	4798      	blx	r3
 800828e:	3601      	adds	r6, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f855 3b04 	ldr.w	r3, [r5], #4
 8008296:	4798      	blx	r3
 8008298:	3601      	adds	r6, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	0800ab04 	.word	0x0800ab04
 80082a0:	0800ab04 	.word	0x0800ab04
 80082a4:	0800ab04 	.word	0x0800ab04
 80082a8:	0800ab0c 	.word	0x0800ab0c

080082ac <__retarget_lock_acquire_recursive>:
 80082ac:	4770      	bx	lr

080082ae <__retarget_lock_release_recursive>:
 80082ae:	4770      	bx	lr

080082b0 <memcpy>:
 80082b0:	440a      	add	r2, r1
 80082b2:	4291      	cmp	r1, r2
 80082b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082b8:	d100      	bne.n	80082bc <memcpy+0xc>
 80082ba:	4770      	bx	lr
 80082bc:	b510      	push	{r4, lr}
 80082be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c6:	4291      	cmp	r1, r2
 80082c8:	d1f9      	bne.n	80082be <memcpy+0xe>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <_free_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4605      	mov	r5, r0
 80082d0:	2900      	cmp	r1, #0
 80082d2:	d041      	beq.n	8008358 <_free_r+0x8c>
 80082d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d8:	1f0c      	subs	r4, r1, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfb8      	it	lt
 80082de:	18e4      	addlt	r4, r4, r3
 80082e0:	f7ff ff7c 	bl	80081dc <__malloc_lock>
 80082e4:	4a1d      	ldr	r2, [pc, #116]	@ (800835c <_free_r+0x90>)
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	b933      	cbnz	r3, 80082f8 <_free_r+0x2c>
 80082ea:	6063      	str	r3, [r4, #4]
 80082ec:	6014      	str	r4, [r2, #0]
 80082ee:	4628      	mov	r0, r5
 80082f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f4:	f7ff bf78 	b.w	80081e8 <__malloc_unlock>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d908      	bls.n	800830e <_free_r+0x42>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	1821      	adds	r1, r4, r0
 8008300:	428b      	cmp	r3, r1
 8008302:	bf01      	itttt	eq
 8008304:	6819      	ldreq	r1, [r3, #0]
 8008306:	685b      	ldreq	r3, [r3, #4]
 8008308:	1809      	addeq	r1, r1, r0
 800830a:	6021      	streq	r1, [r4, #0]
 800830c:	e7ed      	b.n	80082ea <_free_r+0x1e>
 800830e:	461a      	mov	r2, r3
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	b10b      	cbz	r3, 8008318 <_free_r+0x4c>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d9fa      	bls.n	800830e <_free_r+0x42>
 8008318:	6811      	ldr	r1, [r2, #0]
 800831a:	1850      	adds	r0, r2, r1
 800831c:	42a0      	cmp	r0, r4
 800831e:	d10b      	bne.n	8008338 <_free_r+0x6c>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	4401      	add	r1, r0
 8008324:	1850      	adds	r0, r2, r1
 8008326:	4283      	cmp	r3, r0
 8008328:	6011      	str	r1, [r2, #0]
 800832a:	d1e0      	bne.n	80082ee <_free_r+0x22>
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	6053      	str	r3, [r2, #4]
 8008332:	4408      	add	r0, r1
 8008334:	6010      	str	r0, [r2, #0]
 8008336:	e7da      	b.n	80082ee <_free_r+0x22>
 8008338:	d902      	bls.n	8008340 <_free_r+0x74>
 800833a:	230c      	movs	r3, #12
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	e7d6      	b.n	80082ee <_free_r+0x22>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	1821      	adds	r1, r4, r0
 8008344:	428b      	cmp	r3, r1
 8008346:	bf04      	itt	eq
 8008348:	6819      	ldreq	r1, [r3, #0]
 800834a:	685b      	ldreq	r3, [r3, #4]
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	bf04      	itt	eq
 8008350:	1809      	addeq	r1, r1, r0
 8008352:	6021      	streq	r1, [r4, #0]
 8008354:	6054      	str	r4, [r2, #4]
 8008356:	e7ca      	b.n	80082ee <_free_r+0x22>
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	2000097c 	.word	0x2000097c

08008360 <__ssputs_r>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	688e      	ldr	r6, [r1, #8]
 8008366:	461f      	mov	r7, r3
 8008368:	42be      	cmp	r6, r7
 800836a:	680b      	ldr	r3, [r1, #0]
 800836c:	4682      	mov	sl, r0
 800836e:	460c      	mov	r4, r1
 8008370:	4690      	mov	r8, r2
 8008372:	d82d      	bhi.n	80083d0 <__ssputs_r+0x70>
 8008374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800837c:	d026      	beq.n	80083cc <__ssputs_r+0x6c>
 800837e:	6965      	ldr	r5, [r4, #20]
 8008380:	6909      	ldr	r1, [r1, #16]
 8008382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008386:	eba3 0901 	sub.w	r9, r3, r1
 800838a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800838e:	1c7b      	adds	r3, r7, #1
 8008390:	444b      	add	r3, r9
 8008392:	106d      	asrs	r5, r5, #1
 8008394:	429d      	cmp	r5, r3
 8008396:	bf38      	it	cc
 8008398:	461d      	movcc	r5, r3
 800839a:	0553      	lsls	r3, r2, #21
 800839c:	d527      	bpl.n	80083ee <__ssputs_r+0x8e>
 800839e:	4629      	mov	r1, r5
 80083a0:	f7ff fe66 	bl	8008070 <_malloc_r>
 80083a4:	4606      	mov	r6, r0
 80083a6:	b360      	cbz	r0, 8008402 <__ssputs_r+0xa2>
 80083a8:	6921      	ldr	r1, [r4, #16]
 80083aa:	464a      	mov	r2, r9
 80083ac:	f7ff ff80 	bl	80082b0 <memcpy>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	6126      	str	r6, [r4, #16]
 80083be:	6165      	str	r5, [r4, #20]
 80083c0:	444e      	add	r6, r9
 80083c2:	eba5 0509 	sub.w	r5, r5, r9
 80083c6:	6026      	str	r6, [r4, #0]
 80083c8:	60a5      	str	r5, [r4, #8]
 80083ca:	463e      	mov	r6, r7
 80083cc:	42be      	cmp	r6, r7
 80083ce:	d900      	bls.n	80083d2 <__ssputs_r+0x72>
 80083d0:	463e      	mov	r6, r7
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4641      	mov	r1, r8
 80083d8:	f7ff ff0c 	bl	80081f4 <memmove>
 80083dc:	68a3      	ldr	r3, [r4, #8]
 80083de:	1b9b      	subs	r3, r3, r6
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	4433      	add	r3, r6
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	2000      	movs	r0, #0
 80083ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ee:	462a      	mov	r2, r5
 80083f0:	f000 fa9a 	bl	8008928 <_realloc_r>
 80083f4:	4606      	mov	r6, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d1e0      	bne.n	80083bc <__ssputs_r+0x5c>
 80083fa:	6921      	ldr	r1, [r4, #16]
 80083fc:	4650      	mov	r0, sl
 80083fe:	f7ff ff65 	bl	80082cc <_free_r>
 8008402:	230c      	movs	r3, #12
 8008404:	f8ca 3000 	str.w	r3, [sl]
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008414:	e7e9      	b.n	80083ea <__ssputs_r+0x8a>
	...

08008418 <_svfiprintf_r>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4698      	mov	r8, r3
 800841e:	898b      	ldrh	r3, [r1, #12]
 8008420:	061b      	lsls	r3, r3, #24
 8008422:	b09d      	sub	sp, #116	@ 0x74
 8008424:	4607      	mov	r7, r0
 8008426:	460d      	mov	r5, r1
 8008428:	4614      	mov	r4, r2
 800842a:	d510      	bpl.n	800844e <_svfiprintf_r+0x36>
 800842c:	690b      	ldr	r3, [r1, #16]
 800842e:	b973      	cbnz	r3, 800844e <_svfiprintf_r+0x36>
 8008430:	2140      	movs	r1, #64	@ 0x40
 8008432:	f7ff fe1d 	bl	8008070 <_malloc_r>
 8008436:	6028      	str	r0, [r5, #0]
 8008438:	6128      	str	r0, [r5, #16]
 800843a:	b930      	cbnz	r0, 800844a <_svfiprintf_r+0x32>
 800843c:	230c      	movs	r3, #12
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008444:	b01d      	add	sp, #116	@ 0x74
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	2340      	movs	r3, #64	@ 0x40
 800844c:	616b      	str	r3, [r5, #20]
 800844e:	2300      	movs	r3, #0
 8008450:	9309      	str	r3, [sp, #36]	@ 0x24
 8008452:	2320      	movs	r3, #32
 8008454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008458:	f8cd 800c 	str.w	r8, [sp, #12]
 800845c:	2330      	movs	r3, #48	@ 0x30
 800845e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085fc <_svfiprintf_r+0x1e4>
 8008462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008466:	f04f 0901 	mov.w	r9, #1
 800846a:	4623      	mov	r3, r4
 800846c:	469a      	mov	sl, r3
 800846e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008472:	b10a      	cbz	r2, 8008478 <_svfiprintf_r+0x60>
 8008474:	2a25      	cmp	r2, #37	@ 0x25
 8008476:	d1f9      	bne.n	800846c <_svfiprintf_r+0x54>
 8008478:	ebba 0b04 	subs.w	fp, sl, r4
 800847c:	d00b      	beq.n	8008496 <_svfiprintf_r+0x7e>
 800847e:	465b      	mov	r3, fp
 8008480:	4622      	mov	r2, r4
 8008482:	4629      	mov	r1, r5
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff ff6b 	bl	8008360 <__ssputs_r>
 800848a:	3001      	adds	r0, #1
 800848c:	f000 80a7 	beq.w	80085de <_svfiprintf_r+0x1c6>
 8008490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008492:	445a      	add	r2, fp
 8008494:	9209      	str	r2, [sp, #36]	@ 0x24
 8008496:	f89a 3000 	ldrb.w	r3, [sl]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 809f 	beq.w	80085de <_svfiprintf_r+0x1c6>
 80084a0:	2300      	movs	r3, #0
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084aa:	f10a 0a01 	add.w	sl, sl, #1
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80084b8:	4654      	mov	r4, sl
 80084ba:	2205      	movs	r2, #5
 80084bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c0:	484e      	ldr	r0, [pc, #312]	@ (80085fc <_svfiprintf_r+0x1e4>)
 80084c2:	f7f7 fe8d 	bl	80001e0 <memchr>
 80084c6:	9a04      	ldr	r2, [sp, #16]
 80084c8:	b9d8      	cbnz	r0, 8008502 <_svfiprintf_r+0xea>
 80084ca:	06d0      	lsls	r0, r2, #27
 80084cc:	bf44      	itt	mi
 80084ce:	2320      	movmi	r3, #32
 80084d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084d4:	0711      	lsls	r1, r2, #28
 80084d6:	bf44      	itt	mi
 80084d8:	232b      	movmi	r3, #43	@ 0x2b
 80084da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084de:	f89a 3000 	ldrb.w	r3, [sl]
 80084e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e4:	d015      	beq.n	8008512 <_svfiprintf_r+0xfa>
 80084e6:	9a07      	ldr	r2, [sp, #28]
 80084e8:	4654      	mov	r4, sl
 80084ea:	2000      	movs	r0, #0
 80084ec:	f04f 0c0a 	mov.w	ip, #10
 80084f0:	4621      	mov	r1, r4
 80084f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f6:	3b30      	subs	r3, #48	@ 0x30
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	d94b      	bls.n	8008594 <_svfiprintf_r+0x17c>
 80084fc:	b1b0      	cbz	r0, 800852c <_svfiprintf_r+0x114>
 80084fe:	9207      	str	r2, [sp, #28]
 8008500:	e014      	b.n	800852c <_svfiprintf_r+0x114>
 8008502:	eba0 0308 	sub.w	r3, r0, r8
 8008506:	fa09 f303 	lsl.w	r3, r9, r3
 800850a:	4313      	orrs	r3, r2
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	46a2      	mov	sl, r4
 8008510:	e7d2      	b.n	80084b8 <_svfiprintf_r+0xa0>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	1d19      	adds	r1, r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	9103      	str	r1, [sp, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfbb      	ittet	lt
 800851e:	425b      	neglt	r3, r3
 8008520:	f042 0202 	orrlt.w	r2, r2, #2
 8008524:	9307      	strge	r3, [sp, #28]
 8008526:	9307      	strlt	r3, [sp, #28]
 8008528:	bfb8      	it	lt
 800852a:	9204      	strlt	r2, [sp, #16]
 800852c:	7823      	ldrb	r3, [r4, #0]
 800852e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008530:	d10a      	bne.n	8008548 <_svfiprintf_r+0x130>
 8008532:	7863      	ldrb	r3, [r4, #1]
 8008534:	2b2a      	cmp	r3, #42	@ 0x2a
 8008536:	d132      	bne.n	800859e <_svfiprintf_r+0x186>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	1d1a      	adds	r2, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9203      	str	r2, [sp, #12]
 8008540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008544:	3402      	adds	r4, #2
 8008546:	9305      	str	r3, [sp, #20]
 8008548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800860c <_svfiprintf_r+0x1f4>
 800854c:	7821      	ldrb	r1, [r4, #0]
 800854e:	2203      	movs	r2, #3
 8008550:	4650      	mov	r0, sl
 8008552:	f7f7 fe45 	bl	80001e0 <memchr>
 8008556:	b138      	cbz	r0, 8008568 <_svfiprintf_r+0x150>
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	eba0 000a 	sub.w	r0, r0, sl
 800855e:	2240      	movs	r2, #64	@ 0x40
 8008560:	4082      	lsls	r2, r0
 8008562:	4313      	orrs	r3, r2
 8008564:	3401      	adds	r4, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856c:	4824      	ldr	r0, [pc, #144]	@ (8008600 <_svfiprintf_r+0x1e8>)
 800856e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008572:	2206      	movs	r2, #6
 8008574:	f7f7 fe34 	bl	80001e0 <memchr>
 8008578:	2800      	cmp	r0, #0
 800857a:	d036      	beq.n	80085ea <_svfiprintf_r+0x1d2>
 800857c:	4b21      	ldr	r3, [pc, #132]	@ (8008604 <_svfiprintf_r+0x1ec>)
 800857e:	bb1b      	cbnz	r3, 80085c8 <_svfiprintf_r+0x1b0>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	3307      	adds	r3, #7
 8008584:	f023 0307 	bic.w	r3, r3, #7
 8008588:	3308      	adds	r3, #8
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858e:	4433      	add	r3, r6
 8008590:	9309      	str	r3, [sp, #36]	@ 0x24
 8008592:	e76a      	b.n	800846a <_svfiprintf_r+0x52>
 8008594:	fb0c 3202 	mla	r2, ip, r2, r3
 8008598:	460c      	mov	r4, r1
 800859a:	2001      	movs	r0, #1
 800859c:	e7a8      	b.n	80084f0 <_svfiprintf_r+0xd8>
 800859e:	2300      	movs	r3, #0
 80085a0:	3401      	adds	r4, #1
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	4619      	mov	r1, r3
 80085a6:	f04f 0c0a 	mov.w	ip, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b0:	3a30      	subs	r2, #48	@ 0x30
 80085b2:	2a09      	cmp	r2, #9
 80085b4:	d903      	bls.n	80085be <_svfiprintf_r+0x1a6>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0c6      	beq.n	8008548 <_svfiprintf_r+0x130>
 80085ba:	9105      	str	r1, [sp, #20]
 80085bc:	e7c4      	b.n	8008548 <_svfiprintf_r+0x130>
 80085be:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c2:	4604      	mov	r4, r0
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7f0      	b.n	80085aa <_svfiprintf_r+0x192>
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	462a      	mov	r2, r5
 80085ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008608 <_svfiprintf_r+0x1f0>)
 80085d0:	a904      	add	r1, sp, #16
 80085d2:	4638      	mov	r0, r7
 80085d4:	f3af 8000 	nop.w
 80085d8:	1c42      	adds	r2, r0, #1
 80085da:	4606      	mov	r6, r0
 80085dc:	d1d6      	bne.n	800858c <_svfiprintf_r+0x174>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	065b      	lsls	r3, r3, #25
 80085e2:	f53f af2d 	bmi.w	8008440 <_svfiprintf_r+0x28>
 80085e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085e8:	e72c      	b.n	8008444 <_svfiprintf_r+0x2c>
 80085ea:	ab03      	add	r3, sp, #12
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	462a      	mov	r2, r5
 80085f0:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <_svfiprintf_r+0x1f0>)
 80085f2:	a904      	add	r1, sp, #16
 80085f4:	4638      	mov	r0, r7
 80085f6:	f000 f879 	bl	80086ec <_printf_i>
 80085fa:	e7ed      	b.n	80085d8 <_svfiprintf_r+0x1c0>
 80085fc:	0800aac8 	.word	0x0800aac8
 8008600:	0800aad2 	.word	0x0800aad2
 8008604:	00000000 	.word	0x00000000
 8008608:	08008361 	.word	0x08008361
 800860c:	0800aace 	.word	0x0800aace

08008610 <_printf_common>:
 8008610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	4616      	mov	r6, r2
 8008616:	4698      	mov	r8, r3
 8008618:	688a      	ldr	r2, [r1, #8]
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008620:	4293      	cmp	r3, r2
 8008622:	bfb8      	it	lt
 8008624:	4613      	movlt	r3, r2
 8008626:	6033      	str	r3, [r6, #0]
 8008628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800862c:	4607      	mov	r7, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b10a      	cbz	r2, 8008636 <_printf_common+0x26>
 8008632:	3301      	adds	r3, #1
 8008634:	6033      	str	r3, [r6, #0]
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	0699      	lsls	r1, r3, #26
 800863a:	bf42      	ittt	mi
 800863c:	6833      	ldrmi	r3, [r6, #0]
 800863e:	3302      	addmi	r3, #2
 8008640:	6033      	strmi	r3, [r6, #0]
 8008642:	6825      	ldr	r5, [r4, #0]
 8008644:	f015 0506 	ands.w	r5, r5, #6
 8008648:	d106      	bne.n	8008658 <_printf_common+0x48>
 800864a:	f104 0a19 	add.w	sl, r4, #25
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	6832      	ldr	r2, [r6, #0]
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	42ab      	cmp	r3, r5
 8008656:	dc26      	bgt.n	80086a6 <_printf_common+0x96>
 8008658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	3b00      	subs	r3, #0
 8008660:	bf18      	it	ne
 8008662:	2301      	movne	r3, #1
 8008664:	0692      	lsls	r2, r2, #26
 8008666:	d42b      	bmi.n	80086c0 <_printf_common+0xb0>
 8008668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800866c:	4641      	mov	r1, r8
 800866e:	4638      	mov	r0, r7
 8008670:	47c8      	blx	r9
 8008672:	3001      	adds	r0, #1
 8008674:	d01e      	beq.n	80086b4 <_printf_common+0xa4>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	f003 0306 	and.w	r3, r3, #6
 800867e:	2b04      	cmp	r3, #4
 8008680:	bf02      	ittt	eq
 8008682:	68e5      	ldreq	r5, [r4, #12]
 8008684:	6833      	ldreq	r3, [r6, #0]
 8008686:	1aed      	subeq	r5, r5, r3
 8008688:	68a3      	ldr	r3, [r4, #8]
 800868a:	bf0c      	ite	eq
 800868c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008690:	2500      	movne	r5, #0
 8008692:	4293      	cmp	r3, r2
 8008694:	bfc4      	itt	gt
 8008696:	1a9b      	subgt	r3, r3, r2
 8008698:	18ed      	addgt	r5, r5, r3
 800869a:	2600      	movs	r6, #0
 800869c:	341a      	adds	r4, #26
 800869e:	42b5      	cmp	r5, r6
 80086a0:	d11a      	bne.n	80086d8 <_printf_common+0xc8>
 80086a2:	2000      	movs	r0, #0
 80086a4:	e008      	b.n	80086b8 <_printf_common+0xa8>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4652      	mov	r2, sl
 80086aa:	4641      	mov	r1, r8
 80086ac:	4638      	mov	r0, r7
 80086ae:	47c8      	blx	r9
 80086b0:	3001      	adds	r0, #1
 80086b2:	d103      	bne.n	80086bc <_printf_common+0xac>
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	3501      	adds	r5, #1
 80086be:	e7c6      	b.n	800864e <_printf_common+0x3e>
 80086c0:	18e1      	adds	r1, r4, r3
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	2030      	movs	r0, #48	@ 0x30
 80086c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086ca:	4422      	add	r2, r4
 80086cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7c7      	b.n	8008668 <_printf_common+0x58>
 80086d8:	2301      	movs	r3, #1
 80086da:	4622      	mov	r2, r4
 80086dc:	4641      	mov	r1, r8
 80086de:	4638      	mov	r0, r7
 80086e0:	47c8      	blx	r9
 80086e2:	3001      	adds	r0, #1
 80086e4:	d0e6      	beq.n	80086b4 <_printf_common+0xa4>
 80086e6:	3601      	adds	r6, #1
 80086e8:	e7d9      	b.n	800869e <_printf_common+0x8e>
	...

080086ec <_printf_i>:
 80086ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	7e0f      	ldrb	r7, [r1, #24]
 80086f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086f4:	2f78      	cmp	r7, #120	@ 0x78
 80086f6:	4691      	mov	r9, r2
 80086f8:	4680      	mov	r8, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	469a      	mov	sl, r3
 80086fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008702:	d807      	bhi.n	8008714 <_printf_i+0x28>
 8008704:	2f62      	cmp	r7, #98	@ 0x62
 8008706:	d80a      	bhi.n	800871e <_printf_i+0x32>
 8008708:	2f00      	cmp	r7, #0
 800870a:	f000 80d1 	beq.w	80088b0 <_printf_i+0x1c4>
 800870e:	2f58      	cmp	r7, #88	@ 0x58
 8008710:	f000 80b8 	beq.w	8008884 <_printf_i+0x198>
 8008714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800871c:	e03a      	b.n	8008794 <_printf_i+0xa8>
 800871e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008722:	2b15      	cmp	r3, #21
 8008724:	d8f6      	bhi.n	8008714 <_printf_i+0x28>
 8008726:	a101      	add	r1, pc, #4	@ (adr r1, 800872c <_printf_i+0x40>)
 8008728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800872c:	08008785 	.word	0x08008785
 8008730:	08008799 	.word	0x08008799
 8008734:	08008715 	.word	0x08008715
 8008738:	08008715 	.word	0x08008715
 800873c:	08008715 	.word	0x08008715
 8008740:	08008715 	.word	0x08008715
 8008744:	08008799 	.word	0x08008799
 8008748:	08008715 	.word	0x08008715
 800874c:	08008715 	.word	0x08008715
 8008750:	08008715 	.word	0x08008715
 8008754:	08008715 	.word	0x08008715
 8008758:	08008897 	.word	0x08008897
 800875c:	080087c3 	.word	0x080087c3
 8008760:	08008851 	.word	0x08008851
 8008764:	08008715 	.word	0x08008715
 8008768:	08008715 	.word	0x08008715
 800876c:	080088b9 	.word	0x080088b9
 8008770:	08008715 	.word	0x08008715
 8008774:	080087c3 	.word	0x080087c3
 8008778:	08008715 	.word	0x08008715
 800877c:	08008715 	.word	0x08008715
 8008780:	08008859 	.word	0x08008859
 8008784:	6833      	ldr	r3, [r6, #0]
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6032      	str	r2, [r6, #0]
 800878c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008794:	2301      	movs	r3, #1
 8008796:	e09c      	b.n	80088d2 <_printf_i+0x1e6>
 8008798:	6833      	ldr	r3, [r6, #0]
 800879a:	6820      	ldr	r0, [r4, #0]
 800879c:	1d19      	adds	r1, r3, #4
 800879e:	6031      	str	r1, [r6, #0]
 80087a0:	0606      	lsls	r6, r0, #24
 80087a2:	d501      	bpl.n	80087a8 <_printf_i+0xbc>
 80087a4:	681d      	ldr	r5, [r3, #0]
 80087a6:	e003      	b.n	80087b0 <_printf_i+0xc4>
 80087a8:	0645      	lsls	r5, r0, #25
 80087aa:	d5fb      	bpl.n	80087a4 <_printf_i+0xb8>
 80087ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	da03      	bge.n	80087bc <_printf_i+0xd0>
 80087b4:	232d      	movs	r3, #45	@ 0x2d
 80087b6:	426d      	negs	r5, r5
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087bc:	4858      	ldr	r0, [pc, #352]	@ (8008920 <_printf_i+0x234>)
 80087be:	230a      	movs	r3, #10
 80087c0:	e011      	b.n	80087e6 <_printf_i+0xfa>
 80087c2:	6821      	ldr	r1, [r4, #0]
 80087c4:	6833      	ldr	r3, [r6, #0]
 80087c6:	0608      	lsls	r0, r1, #24
 80087c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80087cc:	d402      	bmi.n	80087d4 <_printf_i+0xe8>
 80087ce:	0649      	lsls	r1, r1, #25
 80087d0:	bf48      	it	mi
 80087d2:	b2ad      	uxthmi	r5, r5
 80087d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80087d6:	4852      	ldr	r0, [pc, #328]	@ (8008920 <_printf_i+0x234>)
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	bf14      	ite	ne
 80087dc:	230a      	movne	r3, #10
 80087de:	2308      	moveq	r3, #8
 80087e0:	2100      	movs	r1, #0
 80087e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087e6:	6866      	ldr	r6, [r4, #4]
 80087e8:	60a6      	str	r6, [r4, #8]
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	db05      	blt.n	80087fa <_printf_i+0x10e>
 80087ee:	6821      	ldr	r1, [r4, #0]
 80087f0:	432e      	orrs	r6, r5
 80087f2:	f021 0104 	bic.w	r1, r1, #4
 80087f6:	6021      	str	r1, [r4, #0]
 80087f8:	d04b      	beq.n	8008892 <_printf_i+0x1a6>
 80087fa:	4616      	mov	r6, r2
 80087fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008800:	fb03 5711 	mls	r7, r3, r1, r5
 8008804:	5dc7      	ldrb	r7, [r0, r7]
 8008806:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800880a:	462f      	mov	r7, r5
 800880c:	42bb      	cmp	r3, r7
 800880e:	460d      	mov	r5, r1
 8008810:	d9f4      	bls.n	80087fc <_printf_i+0x110>
 8008812:	2b08      	cmp	r3, #8
 8008814:	d10b      	bne.n	800882e <_printf_i+0x142>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	07df      	lsls	r7, r3, #31
 800881a:	d508      	bpl.n	800882e <_printf_i+0x142>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	6861      	ldr	r1, [r4, #4]
 8008820:	4299      	cmp	r1, r3
 8008822:	bfde      	ittt	le
 8008824:	2330      	movle	r3, #48	@ 0x30
 8008826:	f806 3c01 	strble.w	r3, [r6, #-1]
 800882a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800882e:	1b92      	subs	r2, r2, r6
 8008830:	6122      	str	r2, [r4, #16]
 8008832:	f8cd a000 	str.w	sl, [sp]
 8008836:	464b      	mov	r3, r9
 8008838:	aa03      	add	r2, sp, #12
 800883a:	4621      	mov	r1, r4
 800883c:	4640      	mov	r0, r8
 800883e:	f7ff fee7 	bl	8008610 <_printf_common>
 8008842:	3001      	adds	r0, #1
 8008844:	d14a      	bne.n	80088dc <_printf_i+0x1f0>
 8008846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800884a:	b004      	add	sp, #16
 800884c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	f043 0320 	orr.w	r3, r3, #32
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	4832      	ldr	r0, [pc, #200]	@ (8008924 <_printf_i+0x238>)
 800885a:	2778      	movs	r7, #120	@ 0x78
 800885c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	6831      	ldr	r1, [r6, #0]
 8008864:	061f      	lsls	r7, r3, #24
 8008866:	f851 5b04 	ldr.w	r5, [r1], #4
 800886a:	d402      	bmi.n	8008872 <_printf_i+0x186>
 800886c:	065f      	lsls	r7, r3, #25
 800886e:	bf48      	it	mi
 8008870:	b2ad      	uxthmi	r5, r5
 8008872:	6031      	str	r1, [r6, #0]
 8008874:	07d9      	lsls	r1, r3, #31
 8008876:	bf44      	itt	mi
 8008878:	f043 0320 	orrmi.w	r3, r3, #32
 800887c:	6023      	strmi	r3, [r4, #0]
 800887e:	b11d      	cbz	r5, 8008888 <_printf_i+0x19c>
 8008880:	2310      	movs	r3, #16
 8008882:	e7ad      	b.n	80087e0 <_printf_i+0xf4>
 8008884:	4826      	ldr	r0, [pc, #152]	@ (8008920 <_printf_i+0x234>)
 8008886:	e7e9      	b.n	800885c <_printf_i+0x170>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f023 0320 	bic.w	r3, r3, #32
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	e7f6      	b.n	8008880 <_printf_i+0x194>
 8008892:	4616      	mov	r6, r2
 8008894:	e7bd      	b.n	8008812 <_printf_i+0x126>
 8008896:	6833      	ldr	r3, [r6, #0]
 8008898:	6825      	ldr	r5, [r4, #0]
 800889a:	6961      	ldr	r1, [r4, #20]
 800889c:	1d18      	adds	r0, r3, #4
 800889e:	6030      	str	r0, [r6, #0]
 80088a0:	062e      	lsls	r6, r5, #24
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	d501      	bpl.n	80088aa <_printf_i+0x1be>
 80088a6:	6019      	str	r1, [r3, #0]
 80088a8:	e002      	b.n	80088b0 <_printf_i+0x1c4>
 80088aa:	0668      	lsls	r0, r5, #25
 80088ac:	d5fb      	bpl.n	80088a6 <_printf_i+0x1ba>
 80088ae:	8019      	strh	r1, [r3, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	4616      	mov	r6, r2
 80088b6:	e7bc      	b.n	8008832 <_printf_i+0x146>
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	6032      	str	r2, [r6, #0]
 80088be:	681e      	ldr	r6, [r3, #0]
 80088c0:	6862      	ldr	r2, [r4, #4]
 80088c2:	2100      	movs	r1, #0
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7f7 fc8b 	bl	80001e0 <memchr>
 80088ca:	b108      	cbz	r0, 80088d0 <_printf_i+0x1e4>
 80088cc:	1b80      	subs	r0, r0, r6
 80088ce:	6060      	str	r0, [r4, #4]
 80088d0:	6863      	ldr	r3, [r4, #4]
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	2300      	movs	r3, #0
 80088d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088da:	e7aa      	b.n	8008832 <_printf_i+0x146>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	4632      	mov	r2, r6
 80088e0:	4649      	mov	r1, r9
 80088e2:	4640      	mov	r0, r8
 80088e4:	47d0      	blx	sl
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0ad      	beq.n	8008846 <_printf_i+0x15a>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	079b      	lsls	r3, r3, #30
 80088ee:	d413      	bmi.n	8008918 <_printf_i+0x22c>
 80088f0:	68e0      	ldr	r0, [r4, #12]
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	4298      	cmp	r0, r3
 80088f6:	bfb8      	it	lt
 80088f8:	4618      	movlt	r0, r3
 80088fa:	e7a6      	b.n	800884a <_printf_i+0x15e>
 80088fc:	2301      	movs	r3, #1
 80088fe:	4632      	mov	r2, r6
 8008900:	4649      	mov	r1, r9
 8008902:	4640      	mov	r0, r8
 8008904:	47d0      	blx	sl
 8008906:	3001      	adds	r0, #1
 8008908:	d09d      	beq.n	8008846 <_printf_i+0x15a>
 800890a:	3501      	adds	r5, #1
 800890c:	68e3      	ldr	r3, [r4, #12]
 800890e:	9903      	ldr	r1, [sp, #12]
 8008910:	1a5b      	subs	r3, r3, r1
 8008912:	42ab      	cmp	r3, r5
 8008914:	dcf2      	bgt.n	80088fc <_printf_i+0x210>
 8008916:	e7eb      	b.n	80088f0 <_printf_i+0x204>
 8008918:	2500      	movs	r5, #0
 800891a:	f104 0619 	add.w	r6, r4, #25
 800891e:	e7f5      	b.n	800890c <_printf_i+0x220>
 8008920:	0800aad9 	.word	0x0800aad9
 8008924:	0800aaea 	.word	0x0800aaea

08008928 <_realloc_r>:
 8008928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892c:	4607      	mov	r7, r0
 800892e:	4614      	mov	r4, r2
 8008930:	460d      	mov	r5, r1
 8008932:	b921      	cbnz	r1, 800893e <_realloc_r+0x16>
 8008934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	4611      	mov	r1, r2
 800893a:	f7ff bb99 	b.w	8008070 <_malloc_r>
 800893e:	b92a      	cbnz	r2, 800894c <_realloc_r+0x24>
 8008940:	f7ff fcc4 	bl	80082cc <_free_r>
 8008944:	4625      	mov	r5, r4
 8008946:	4628      	mov	r0, r5
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	f000 f81a 	bl	8008984 <_malloc_usable_size_r>
 8008950:	4284      	cmp	r4, r0
 8008952:	4606      	mov	r6, r0
 8008954:	d802      	bhi.n	800895c <_realloc_r+0x34>
 8008956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800895a:	d8f4      	bhi.n	8008946 <_realloc_r+0x1e>
 800895c:	4621      	mov	r1, r4
 800895e:	4638      	mov	r0, r7
 8008960:	f7ff fb86 	bl	8008070 <_malloc_r>
 8008964:	4680      	mov	r8, r0
 8008966:	b908      	cbnz	r0, 800896c <_realloc_r+0x44>
 8008968:	4645      	mov	r5, r8
 800896a:	e7ec      	b.n	8008946 <_realloc_r+0x1e>
 800896c:	42b4      	cmp	r4, r6
 800896e:	4622      	mov	r2, r4
 8008970:	4629      	mov	r1, r5
 8008972:	bf28      	it	cs
 8008974:	4632      	movcs	r2, r6
 8008976:	f7ff fc9b 	bl	80082b0 <memcpy>
 800897a:	4629      	mov	r1, r5
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff fca5 	bl	80082cc <_free_r>
 8008982:	e7f1      	b.n	8008968 <_realloc_r+0x40>

08008984 <_malloc_usable_size_r>:
 8008984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008988:	1f18      	subs	r0, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfbc      	itt	lt
 800898e:	580b      	ldrlt	r3, [r1, r0]
 8008990:	18c0      	addlt	r0, r0, r3
 8008992:	4770      	bx	lr

08008994 <_init>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	bf00      	nop
 8008998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899a:	bc08      	pop	{r3}
 800899c:	469e      	mov	lr, r3
 800899e:	4770      	bx	lr

080089a0 <_fini>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr
